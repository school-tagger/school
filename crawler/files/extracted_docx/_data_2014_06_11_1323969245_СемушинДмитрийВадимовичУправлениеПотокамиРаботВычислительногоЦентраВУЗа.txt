





Список терминов и обозначений




Введение

Кампус НИУ ВШЭ-Пермь представляет собой совокупность территориально разнесенных корпусов, в каждом из которых:

осуществляется учебная, научно-исследовательская, общественная и административная деятельность;

имеются в наличии соответствующие элементы корпоративной информационной системы.

В современных условиях идея полной ответственности владельца по обслуживанию программно-технических средств нуждается в пересмотре. Теперь всё чаще пользователи вынуждены подключать свои личные переносные вычислительные устройства к корпоративным информационным системам своих работодателей и учебных заведений.  НИУ ВШЭ - Пермь в этом смысле далеко не исключение – практика показывает широкое использование личных ПК для решения основных учебных задач. Например, внешние совместители-преподаватели используют свои личные ноутбуки для проведения занятий, а большинство студентов используют свои личные ноутбуки в учебном процессе.

Новые учебные площади и, соответственно, новые вычислительные мощности, были введены, а также будут введены в будущем в эксплуатацию. Это дополнительная, хотя и запланированная, нагрузка на инженерно-технический персонал. НИУ ВШЭ - Пермь стремится не просто расшириться в физическом понимании, но организовать учебный процесс согласно высоким стандартам, что достигается путем модернизации технической составляющей ВУЗа, участвующей в учебном процессе. Одним из ключевых требований соответствия материально-технической базы современным стандартам является наличие аудиторий со стационарными средствами телекоммуникации, специализированных языковых лабораторий, в том числе для самостоятельных занятий студентов, компьютерных классов, библиотек со свободным доступом к фондам в читальном зале, помещений, предназначенных для работы студентов и преподавателей.

НИУ ВШЭ  Пермь, в силу ряда причин, не имеет автоматизированной системы управления обслуживающими видами деятельности компьютерного центра. При нарастающем объеме нагрузки, есть риски снижения управляемости не только этим структурным подразделением, но и риски нарушения непрерывности бизнес-процессов в целом. В целях обеспечения технического обслуживания студентов и сотрудников университета создан сервис технической поддержки, включающей в себя модуль Customer Relationship Management и Workflow Management System.

WfMS призвана обеспечить автоматизированное выполнение одного из главных процессов компьютерного центра кампуса – обслуживание заявок на техническое обслуживание.

Любая заявка о помощи, поданная преподавателем или студентом в данную систему, представляется как процесс, за ход выполнения которого и отвечает WfMS. Система обеспечивает автоматизацию бизнес-процесса выполнения заявок, который в свою очередь включает в себя другие подпроцессы.

Проблемой исследования является отсутствие автоматизированной системы управления потоками работ вычислительного центра НИУ ВШЭ - Пермь.

Целью исследования является проектирование и разработка WfMS для пермского кампуса НИУ ВШЭ.

Объектом исследования является деятельность компьютерного центра НИУ ВШЭ – Пермь по обеспечению технической поддержки студентов и сотрудников ВУЗа.

Предметом исследования являются функциональные возможности и средства разработки MS SharePoint 2010 при создании WfMS. 

Для достижения поставленной цели следующие задачи необходимо решить:

Изучить теоретический материал, необходимый для проектирования и разработки WfMS.

Проанализировать предметную область и особенности НИУ ВШЭ - Пермь, построить модель «как есть».

Изучить функциональные особенности MS SharePoint 2010.

Разработать техническое задание для WfMS.

Разработать модели основных бизнес-процессов WfMS.

Спроектировать схему данных WfMS.

Разработать WfMS.


Использование автоматизированных систем в службах технического обслуживания

Данная глава посвящена важному этапу проводимой работы - изучению предметной области и теоретических основ разрабатываемой системы.

Общие сведения о службе технической поддержки и анализ сложившейся ситуации в НИУ ВШЭ - Пермь

Любая деятельность, направленная на достижение конкретных целей, представляет собой набор взаимосвязанных активностей, которые образуют определенную систему. Если предприятие нацелено на получение прибыли, то оно определяет конкретные действия, которые необходимо выполнить и каждое из которых может привести к различным результатам. Взаимодействие этих действий и будет представлять собой систему, которая будет иметь как внешние, так и внутренние входы и выходы, а сами действия являться элементами системы. Потому необходимо правильно ее спроектировать, ведь именно верная организация позволит улучшить некоторые важные характеристики работ и уменьшить риски предприятия.

Внедрение различных систем, в том числе автоматизированных, позволяют достичь поставленных целей при правильном планировании и выполнении задач. Автоматизированная система подразумевает под собой взаимодействие человека и технических средств в процессе обработки информации. Даже в ВУЗах существует потребность в подобных продуктах, способных улучшить процесс обучения и другие важные области. НИУ ВШЭ - Пермь не исключение, и сложившаяся ситуация с принципами управления вычислительными мощностями и обслуживанием студентов и сотрудников университета в общем далека от идеальной, потому внедрение подобной системы вполне оправдано.

Разработка и внедрение системы технической поддержки позволит улучшить процесс обучения и может принести выгоду для НИУ ВШЭ - Пермь как для предприятия в целом. В перспективе существование такого сервиса может привести к сокращению финансовых и временных издержек, к легкому внедрению новых технологий и оборудования, правильному распределению ресурсов.

Так сложилось, что пермский кампус не имеет систему управления потоками работ вычислительного центра, и как следствие, отсутствие подобной системы ведет к проблемным и рискованным ситуациям. Текущее положение дел такого, что студенты и преподаватели вынуждены самостоятельно подготавливать как персональную электронику, так и оборудование университета для работы. Недостаточный уровень подготовки пользователей может привести не только к прерыванию процесса обучения, но и к техническим инцидентам.

Процесс внедрения личного оборудования в КИС сотрудников и студентов может затянуться и привести к непредвиденным ситуациям, потому так важно равномерно спланировать и провести данный этап работ. Подобные манипуляции должны происходить без ущерба для основных учебных и рабочих процессов.

Немаловажным фактором является то, что пермский кампус НИУ ВШЭ имеет стратегию развития до 2020 года. Эта стратегия включает в себя как описание стратегии в целом, так и планы расширения и модернизации материально-технической базы университета. В рамках этой стратегии университет планирует решить проблему дефицита учебно-лабораторных площадей, что неизбежно ведет за собой увеличение технических средств, расширение университета не только в площадном смысле, но и в информационном. Подобное расширение неизбежно приведет к увеличению нагрузки на вычислительный центр ВУЗа. На планомерное распределение и снижение данной нагрузки направлена система технической поддержки.

Таким образом, служба технической поддержки – сервис или система, разрешающая технические проблемы пользователей. В рамках данной работы система технической разрабатывается как инструмент, позволяющий улучшать процессы университета, а также оптимизировать рабочие процессы компьютерного центра.

Существуют разные виды служб технической поддержки, которые зависят от типа предприятия, на котором она используется, или же от степени сложности возникающей проблемы: решение некоторых проблем может занять большое количество часов ресурсов, а некоторые проблемы решаются с помощью низкоуровневых средств: электронная почта, телефон, чат и т.д. В рамках данной работы система технической поддержки создается с пониманием того, что проблемы, возникающие при разных процессах, протекающих в университете, будут иметь различные уровни сложности, потому система будет располагать как низшими уровнями технической поддержки, так и наивысшими, вроде привлечения к работе ведущих технических работников.

Система технической поддержки может разрабатываться с разными целями, например, по типу поддержки: поддержка внешних клиентов и поддержка внутренних клиентов. Система технической поддержки НИУ ВШЭ - Пермь нацелена в первую очередь на своих внутренних клиентов: студентов и работников ВУЗа.

Если составлять обобщенную структуру для служб технической поддержки в целом, то она могла бы иметь вид, представленный на рисунке 1.1 [1]:



Рисунок 1.1. Структура службы технической поддержки

Сердцем данной структуры является контакт-центр. Это программно-аппаратный комплекс, который обеспечивает прием и обработку заявок. Следующий уровень – Help Desk. Этот уровень часто путают с Service Desk, однако, это отличные друг от друга уровни. Первый из них ответственен за регистрацию проблемы и ее предотвращения, а если на данном уровне технической поддержки это невыполнимо, то привлекаются специалисты второго уровня. Service Desk же, помимо всего прочего, ответственен за предотвращение инцидентов. Но это лишь обобщенная структура и в каждом отдельном случае она может отличаться от общей картины.	

На данный момент поддержка пользователей в НИУ ВШЭ - Пермь не организована на должном по оптимальности уровне. На рисунке 1.2 представлена модель «как есть» для пермского кампуса в нотации ARIS eEPC:



Рисунок 1.2. Модель «как есть» службы технической поддержки НИУ ВШЭ - Пермь

Таким образом, человек подает заявку в КЦ университета любым доступным способом. Сотрудник КЦ анализирует заявку и находит пути ее решения. Заявки разделяют на два вида: типовые, то есть те, которые можно решить дистанционно, и остальные заявки, требующие непосредственного вмешательства инженерно-технического персонала. Основной минус такого подхода заключается в том, что все процессы выполняются самостоятельно и зачастую одним и тем же человеком.

Помимо анализа текущей ситуации в НИУ ВШЭ - Пермь, была проанализирована ситуация в других кампусах НИУ ВШЭ. Наличие хотя бы одного аналога разрабатываемой автоматизированной системы управления потоками работ позволило бы применить уже существующую модель при проектировании системы для пермского университета. Однако подобных систем ни в НИУ ВШЭ - Санкт-Петербург, ни в НИУ ВШЭ - Нижний Новгород нет. Что касается НИУ ВШЭ, то там имеется некая служба технической поддержки, выглядящая как единый центр сбора и обработки поступающих заявок о помощи, однако внедренной системы управления потоками работ там не имеется. 

Таким образом, решение о разработке и внедрении системы технической поддержки в пермском кампусе НИУ ВШЭ может быть обусловлено несколькими факторами:

неоптимальное распределение ресурсов КЦ университета при выполнении задач по заявкам;

возможность оптимизации некоторых из существующих процессов КЦ;

сложившаяся ситуация с почти неконтролируемым подключением к корпоративной информационной системе НИУ ВШЭ - Пермь может сгенерировать риски различных видов;

по проведенным опросам выяснилось, что подавляющее количество студентов и сотрудников университета имело различные технические проблемы, которые приводили к замедлению или даже срыву учебных мероприятий;

НИУ ВШЭ - Пермь имеет определенную стратегию развития, которая включает в себя: расширение учебных площадей, оснащенные различными техническими средствами; увеличение степени вовлеченности информационных, локальных и интернет ресурсов в процесс обучения; интеграцию различных внутренних систем с внешними сервисами, а также взаимодействие с внешним миром с помощью специальной аппаратуры и т.д.

При проектировании системы было решено, что она будет состоять из двух частей: модуля CRM, отвечающую за прием заявок, и Workflow Management System, ответственную за выполнение этих заявок. Именно WfMS является объектом исследования в данной работе. 

Ранее было дано описание структуры технической поддержки в общем виде, но оно не всегда соответствует действительности. На рисунке 1.3 показана структура службы технической поддержки НИУ ВШЭ - Пермь, состоящей из модуля CRM и WfMS.



Рисунок 1.3. Структура службы технической поддержки НИУ ВШЭ - Пермь

Инициатором работы системы технической поддержки является студент, либо сотрудник университета: он обращается с конкретной проблемой с целью получить решение. Следующий уровень – первая линия поддержки. Роль первой линии поддержки выполняет CRM: эта часть службы технической поддержки регистрирует и обрабатывает заявки, затем в рамках этого уровня выполняется попытка найти решение проблемы, например, путем поиска подобных проблем в базе данных CRM. Если же проблема не может быть решена, то в действие вступает второй уровень технической поддержки – WfMS. В общем, система будет спроектирована таким образом, что CRM выступает в роли front-end модуля, то есть той части, которая взаимодействует с клиентом, предоставляя ему результат работ, а WfMS – back-end разработка, отвечающая за выполнение основных процессов, скрытых от глаз пользователя.

Как и любое структурное подразделение, КЦ должен использовать в своей работе определенные документы и процедуры. Так, при создании службы технической поддержки одним из вспомогательных инструментов может быть ITIL – библиотека, содержащая в себе лучшие практики по организации работы в области информационных технологий [2]. Если говорить в целом, то важность этой библиотеки заключается в том, что многие серьезные ИТ-предприятия и подразделения ориентируются на разработанный стандарт BSI 15 000, который послужил основой и практически идентичен ISO 20 000, стандарту управлению и обслуживания ИТ-сервисов.

Итак, система технической поддержки НИУ ВШЭ - Пермь представляет собой систему, состоящую из двух подсистем: CRM и WfMS, которые взаимодействуют между собой. Ниже вкратце описаны этапы разработки сервиса технической поддержки:

Спроектировать систему технической поддержки, определив для нее требования и функционал.

Спроектировать CRM и WfMS, определив для них общие и частные требования и функционал, выделив области их взаимодействия.

Параллельно разработать CRM и WfMS, протестировать их.

Провести интеграцию двух систем, с целью обеспечения их правильного взаимодействия.

Ввести в эксплуатацию сервис технической поддержки.

Обеспечить поддержание функционирования сервиса.

Стоит понимать, что помимо двух программных продуктов, система так же состоит из ПК, серверов, сетевой аппаратуры и прочих технических средств, задействованных при эксплуатации системы. Помимо техники, в состав системы входят исполнители и клиенты: технический персонал, студенты и сотрудники университета.

Перед тем как преступить к разработке системы необходимо изучить теоретический материал в данной области, поэтому последующие параграфы будут посвящены теоретическому обзору систем управления потоками работ, а также изучению MS SharePoint 2010, являющимся инструментом разработки системы.

Общая теория по Workflow Management Systems

В текущем параграфе будет рассмотрена теория, которая будет изучена перед этапами проектирования и разработки WfMS.

Основные определения WfMS

Если давать строгое определение для WfMS, то Workflow Management System – система, которая определяет, создает и руководит ходом выполнения рабочего процесса, используя ПО, работающего на одной или нескольких платформах, способных определять процессы, взаимодействовать с участниками рабочих процессов и, если необходимо, вызывать нужные приложения [4].

Подбирая определение в более неформальном формате, можно сказать, что WfMS – это система, отвечающая за определение, выполнение и контроль определенных задач, которые в свою очередь являются составляющими основных бизнес-процессов.

Следующим важным элементом является компонент системы: рабочий процесс. Рабочий процесс – процесс автоматизации бизнес-процесса, в целом или частично, при исполнении которого документы, информация или задания передаются от одного участника к другому, следуя соответствующим правилам [4]. Проще говоря, рабочий процесс – это набор действий и переходов между ними.

Так как в рамках этого исследования WfMS является лишь составляющей системы технической поддержки, то важно понимать, что из себя представляет вторая часть этой системы. Итак, CRM модуль -  прикладное программное обеспечение для организаций, предназначенное для автоматизации стратегий взаимодействия с клиентами [3]. Если перенести проекцию на систему технической поддержки НИУ ВШЭ - Пермь, то CRM ответственна за взаимодействие с клиентами, обработку заявок и их подготовку для WfMS.

На данный момент существует несколько международных стандартов, направленных на работу с системами управления потоками работ:

Workflow Management Coalition (WFMC).

World Wide Web Consortium.

Organization for the Advancement of Structured Information Standards.

WFMC создавали и модифицировали стандарты на протяжении многих лет.  Эти стандарты используются многими компаниями в качестве основы для создания своих продуктов. Потому в рамках данной работы было решено, что именно стандарты Workflow Management Coalition будут основой для проектирования и разработки системы.

Теоретическое описание WfMS с помощью стандарта Workflow Reference Model

Основополагающим стандартом описания и моделирования WfMS можно считать Workflow Reference Model. Данный стандарт подразумевает, что все системы содержат в себе ряд общих компонентов, которые взаимодействуют между собой различными способами, в зависимости от системы [5]. Стандартизация необходима для того, чтобы обеспечить взаимодействие между рабочими процессами. 

Согласно этому стандарту, существует определенные требования к функциональности системы. WfMS направлена на автоматизацию исполнения рабочих процессов и на контроль ресурсов. На самом высоком уровне WfMS должна обеспечивать поддержку в трех областях [5]:

Build-time functions. Встроенные временные функции, задающиеся определением и моделированием рабочих процессов. На данном архитектурном уровне происходит выполнение заранее заданных функций, цель которых заключается в описании текущего бизнес-процесса. Бизнес-процесс, описанный до этого каким-либо способом человеком, переводится в формальное представление, понимаемое системой. Данное преобразование происходит с помощью анализа и моделирования, а результат этих манипуляций принято называть «моделью процесса» или «метаданными процесса». Модель процесса состоит из набора действий и переходами между ними, которые выполняются согласно заранее определенным правилам и процедурам. Эти действия могут выполняться как человеком, так и компьютером. Определение процесса может представляться в любом формате: от текстового до описания рабочих процессов с помощью формальных языков, например, с помощью спецификации XML Process Defenition Language (XPDL), предложенной WFMC. Так же стоит отметить, что некоторые процессы допускают изменение их определения прямо в ходе их выполнения.

Run-time control functions. Функции контроля во время выполнения, ответственные за управление рабочими процессами и последовательности, которые рассматриваются как отдельные части рабочих процессов. На этапе происходит анализ процессов. С помощью специальных программных средств осуществляется: создание и управление рабочими процессами, создание, планирование и управление задачами, определение и распределение человеческих и технических ресурсов.  Уровень выполнения процесса связывает его формальное описание и реальный вид, включающий пользователей и программные средства. Важнейшим элементом данного уровня является служба создания и управления потоками работ. Она создает и удаляет процессы, задает рабочие процессы и взаимодействие с ресурсами.

Run-time interactions. Взаимодействие с пользователями или программными средствами для выполнения каких-либо действий. Некоторые процессы могут иметь индивидуальные задачи и, как правило, эти задания связанные с привлечением к работе человека или приложений, а порой оба вида внешних ресурсов. Потому важно правильно настроить взаимодействие человека с системой создания и управления рабочими процессами, для передачи управления процессами и вызова сторонних приложений.

Рисунок 1.4 схематично отображает требуемые архитектурные уровни для системы управления потоками работ [5]:



Рисунок 1.4. Функциональные требования к WfMS

Таким образом, можно заключить, что требования к функционалу системы управления потоками работ в обобщенном виде можно охарактеризовать следующими признаками [5]:

наличие спецификаций для определения процессов и их взаимодействий;

способность к взаимодействию с другими системами;

вызов сторонних приложений;

способность к взаимодействию с пользователями и их клиентскими приложениями;

администрирование и контроль системы, управление взаимодействия с окружающей средой.

Языки описания бизнес-процессов

Как говорилось ранее, существует определенный этап трансформации бизнес-процессов в формальное представление, понятное компьютеру. Поэтому следует выбрать язык, который наиболее полно способен описать процесс и представить его в нужной форме для системы.

Существует множество формальных языков описания бизнес-процессов, в данном параграфе будут рассмотрены наиболее распространенные языки, применяемые для декларативного определения процессов.

XML Process Definition Language.

Спецификация XPDL, предложенная Workflow Management Coalition, представляет собой формальную модель для описания рабочих процессов, относящихся к любым сферам деятельности [6]. В соответствии с ней каждый поток работ разбивается на следующий набор взаимодействующих между собой компонентов, показанных на рисунке 1.5 [6]:



Рисунок 1.5. Спецификация XPDL

Данная спецификация подразумевает, что процесс можно представить в виде направленного графа, узлами которого являются действия, а гранями – переходы, которые ко всему прочему могут быть условными, между действиями. 

Кроме этого, XPDL является расширяемым стандартом, что позволяет определять набор элементов и атрибутов для конкретной сферы применения [7]. Обширный выбор атрибутов включает в себя такие параметры как назначение исполнителей на действия, условия переходов между действия, время выполнения действия и т.д. [7].

Business Process Modeling Language.

Business Process Modeling Language представляет собой абстрактную модель и XML-язык для описания рабочих процессов различного типа [8].

BPML, в отличие от XPDL, является языком блочной структуры.  Элементарными блоками, из которых строится модель рабочего процесса в BPML, являются «действия» (Activity) [8]. В данной спецификации различается три типа процессов [8]:

Nested Process. Вложенный процесс, как и любое действие, может быть включен в родительский процесс.

Compensation Process. Процесс, обеспечивающий освобождение ресурсов, после завершения других процессов.

Exception Process. Процесс, обрабатывающий исключаемые события.

Аналогом переходам действиям в XPDL является так называемые сообщения и сигналы. Для этого должны быть назначены обработчики сообщений и сигналов.

Важными компонентами BPML являются системные ошибки и расписания. Первый компонент обеспечивает завершение рабочих процессов, а расписания выполняют управленческие функции.

BPEL4WS.

Business Process Execution Language – язык на основе XML для формального описания бизнес-процессов и протоколов их взаимодействия между собой. BPEL расширяет модель взаимодействия веб-служб и включает в эту модель поддержку транзакций.

Появился BPEL4WS путем слияния языков WSFL и XLANG. Эти языки основаны на разных моделях: WSFL базируется на теории графов, XLANG - на иерархии тегов XML [9].

В языке BPEL выделяется два вида процессов: абстрактный и исполняемый. Первый ответственен за протокол обмена сообщениями, а второй содержит в себе функции выполнения «действий», обработку исключений и т.д. «Действия» делятся на примитивные и структурные, которые в свою очередь разделяются на различные типы. BPEL идейный наследник BPML, однако он намного сложнее и обширнее своего предшественника.

Использование одного из этих языков поможет в проектировании системы. WfMS состоит не только из программных средств, но и включает в себя аппаратуру и технический персонал ВУЗа, потому наиболее подходящим языком является XML Process Definition Language. В рамках проводимой работы не требуется углубляться до описания каждого рабочего процесса, тем не менее, основная идея при разработке WfMS заключается в декомпозиции заявок на задачи, которые представляют из себя рабочие процессы. И согласно идеологии XPDL задачи будут определяться как рабочие процессы, включающие в себя участников процесса, задействованные ресурсы и, в случае необходимости, переходы между задачами.

Теоретическое проектирование службы технической поддержки пользователей НИУ ВШЭ - Пермь

В предыдущих параграфах описывалась общая теория относительно службы технической поддержки и системы управления потоками работ, в частности. В качестве общего стандарта, служащего основой при разработке системы был выбран WfRM.

Согласно терминологии ITIL сервис технической поддержки – это единая точка контакта между поставщиком услуг и пользователями. Типичная служба поддержки пользователей управляет инцидентами, запросами на обслуживание, а также осуществляет коммуникации с пользователями [10]. Как было сказано ранее, разрабатываемый сервис технической поддержки университета состоит из двух компонентов. Разбирая определение по ITIL, можно определить, что:

CRM модуль ответственна за: коммуникацию с пользователями и обработку их заявок, первичную поддержку пользователей.

WfMS управляет инцидентами и предотвращает их, следит за ходом выполнения зарегистрированных заявок.

Перед тем, как преступить к созданию службы технической поддержки, важно определить, какие этапы входят в ее создание и что они под собой подразумевают.

Во-первых, должна быть сформирована группа из технических специалистов, ответственных за взаимодействие с клиентами и решение их проблем. Группа может содержать в несколько подгрупп или специалистов, ответственных за конкретные задачи.

Во-вторых, должны быть внедрены два основных процесса: процесс принятия и обработки заявок и процесс их выполнения. От правильности формирования данных процессов может зависеть степень успешности функционирования службы в целом. В качестве вспомогательных инструментов для построения подобных процессов принято использовать содержимое ITIL или стандарта ISO 20 000.

В-третьих, стоит пересмотреть тезис полной ответственности пользователей за их персональные устройства. Как следствие определить правила и процедуры взаимодействия сотрудников службы поддержки и клиентов.

В-четвертых, один из самых важных пунктов: автоматизация деятельности созданного структурного ИТ-подразделения. Этот пункт может включать в себя как программно-аппаратный комплекс, так и простой набор правил действий для сотрудников подразделения.

И как последняя составляющая создания службы технической поддержки – обеспечение контроля деятельности службы.

Существует несколько видов служб технической поддержки:

Централизованная служба поддержки.

Данный вид службы наиболее точно описывается с помощью определения службы технической поддержки по ITIL, которые было дано ранее. Служба поддержки определяется как единая точка для всех пользователей вне зависимости от их расположения. В таком случае служба отвечает за прием и обработку заявок, а та же за мониторинг хода выполнения заявки.

Локальная или распределенная служба технической поддержки.

Такой вид службы подразумевает, что она может состоять из нескольких точек, которые территориально удалены друг от друга. При проектировании такой системы первым делом нужно определить способ сбора заявок:

Центральная точка приема заявок. Подразумевает наличие единой точки приема заявок, которая затем отправляет обработанные заявки по локальным службам поддержки.

Локальные точки приема заявок. Используется в тех случаях, когда локальные службы поддержки имеют свои особенности, например, язык. Для распределенной службы технической поддержки в разных странах рациональней использовать именно такой способ.

Виртуальная служба технической поддержки.

Такая служба разрабатывается в тех случаях, когда ее территориальное положение не имеет значения, так как вся деятельность осуществляется путем использования различных видом коммуникации и сети Интернет.

Проецируя информацию, приведенную в данном параграфе, на разрабатываемый сервис технической поддержки университета можно сформировать следующие выводы:

Система включает в себя две составляющих: модуль CRM, ответственный за прием и обработку заявок, и WfMS, ответственную за управление инцидентами.

Служба помимо программной части будет включать себя сотрудников ИТ подразделения, ответственного за техническую поддержку студентов и сотрудников вуза.

Тип системы представляет собой смесь двух видов: виртуальной службы поддержки и распределенной с центральной точкой приема заявок. В качестве виртуального компонента системы выступает веб-портал, который с помощью разработанного Евгением Кагармановым CRM модуля способен разрешать некоторые инциденты. Также веб-портал выступает в качестве единой точки сбора заявок, которая при их обработке распределяет заявке по территориальным или иным признакам.

Основные особенности и функциональные возможности MS SharePoint 2010

Microsoft SharePoint 2010 – это платформа для совместной работы, обеспечивающая повышение производительности труда и управление контентом в знакомой среде Microsoft Office [11].

Уровни иерархии MS SharePoint представлены на рисунке 1.6 [12] :



Рисунок 1.6. Уровни иерархии MS SharePoint

На самом верхнем уровне находится ферма серверов. Она представляет собой набор серверов, которые способны взаимодействовать друг с другом.

Следующий уровень – веб-приложение. Веб-приложение является IIS-сайтом, выступающим в роли логического звена для создаваемой коллекции сайтов.

Третий слой – коллекция сайтов. Представляет собой «корневой» сайт, для которого могут создаваться дочерние сайты.

Последний уровень – сайт или узел. Это тот портал, который создается с определенными целями. Сайт может представлять собой коллекцию сайтов и не иметь дочерних порталов.

Так, разрабатываемая WfMS является частью из веб-портала службы технической поддержки и важно определить какие инструменты будут полезны при ее разработке:

Списки и библиотеки документов. Данные элементы могут быть рассмотрены по аналогии с таблицами базы данных. Список содержит различные поля и позволяет хранить нужную информацию. Помимо обычного хранения данных, списки и библиотеки могут выступать как инструмент взаимодействия CRM и WfMS. Имея общие списки, системы будут взаимодействовать, с целью передачи друг другу заявок и отчетов.

Обработчики событий, рабочие процессы и таймеры. Дополнительно разрабатываемые обработчики событий позволят обрабатывать данные на портале, генерировать отчеты по заранее заполненным спискам. Рабочие процессы позволят разбить требующие выполнения бизнес-процессы на действия и переходы между ними. Для этого могут использоваться стандарты и методологии, описанные в первой главе. Таймеры направлены на выполнение плановых работ. Создание такого элемента позволит не только производить определенные действия, но проводить мониторинг системы в целом.

Веб-части. Функционал веб-частей похож на работу обработчиков событий, однако он гораздо обширнее. Разработанные веб-части направлены на взаимодействие с пользователями, предоставление необходимых функций и расширение стандартного набора инструментов MS SharePoint.

Веб-формы и формы MS InfoPath. Так как WfMS подразумевает взаимодействие людей с программной частью системы, технология создания веб-форм для удобного и корректного внесения данных является неотъемлемой частью разработки и может осуществляться с помощью MS InfoPath.

Таким образом, SharePoint 2010 предоставляет обширный выбор инструментов для разработки WfMS. Их использование позволит реализовать нужный функционал, создавая при этом нетривиальные решения.

Выводы по изученной теории применительно для проводимой работы

В данной главе был проведен анализ теоретической составляющей работы, приведено обоснование необходимости разработки системы технической поддержки и системы управления потоками работ как одной из ее составляющей, в частности.

Помимо общего обзора сложившейся ситуации в университете и планам по разработке системы технической поддержки, была приведена теоретическая информация относительно WfMS, которая включает в себя международные стандарты, применяемые на практике в данной предметной области. Были рассмотрены и определены требования для разрабатываемой системы, языки описания бизнес-процессов, применяемые для формализации рабочих процессов. По итогам обзора было решено использовать стандарты Workflow Management Coalition, а именно: WfRM, как стандарт, используемый при создании системы управления потоками работ и основные принципы языка XPDL, используемго для описания процессов.

В качестве инструмента разработки была рассмотрена технология MS SharePoint 2010, определены архитектура, функциональные возможности и логика работы платформы. В следующей главе более подробно будут рассмотрены компоненты MS SharePoint 2010, используемые при разработке WfMS.

Вторая глава будет посвящена практической части работы, в ней будут освещены следующие этапы создания WfMS:

рассмотрение особенностей проектирования WfMS;

моделирование основных процессов WfMS;

построение схемы данных;

анализ использования MS SharePoint в рамках создания WfMS;

разработка WfMS, включающая в себя составление документации к системе.


Моделирование и разработка WfMS НИУ ВШЭ - Пермь

Данная глава посвящена практической части работы. Она содержит параграфы, описывающие моделирование основных процессов WfMS, создание схемы данных, особенности проектирования и разработки WfMS, преимущества MS SharePoint в разработке системы.

Использование MS SharePoint 2010 при разработке WfMS НИУ ВШЭ - Пермь

В качестве заказчика на разработку WfMS выступает факультет бизнес-информатики НИУ ВШЭ - Пермь и одним из его требований является разработка системы с помощью MS SharePoint 2010.

SharePoint имеет ряд отличительных черт, которые будут использованы при разработке системы, а именно он позволяет:

создавать порталы, способные хранить и оперировать с данными разных типов;

настраивать сервисы под определенные нужды в рамках исследуемой предметной области;

разрабатывать ряд программных решений и надстроек, позволяющих выполнять нетривиальные операции;

организовывать совместную работу.

Разрабатываемая служба технической поддержки будет представлять собой веб-портал, созданный с помощью MS SharePoint 2010. Основными элементами этого портала будут списки и программные решения, созданные с применением различных технологий и языков программирования, таких как C#, JavaScript, ASP.NET.

Портал можно разделить на две области: область работы с пользователями – CRM модуль и область, отвечающая за выполнение заявок – WfMS. Именно в рамках разработки WfMS проводится исследование данной работы.

WfMS на уровне веб-портала службы технической поддержки будет представлять собой совокупность списков и программных решений, разработанных для выполнения определенных операций.

Таким образом, WfMS невидима для обычного пользователя и будет являться рабочей областью технического персонала. Таким образом, следует определить роли людей внутри системы:

Оператор. Оператору приходят обработанные заявки из CRM системы. Его основными обязанностями являются: определение задач путем декомпозиции заявки, распределение ресурсов на задачи и контроль хода их выполнения.

Дежурный инженер. Член инженерно-технического и исполнительного персонала WfMS, ответственный за выполнение порученных ему задач.

Главным элементом системы будет являться список задач, содержащий в себе информацию о поставленных задачах, полученных путем разбиения заявки на этапы подобно определению рабочего процесса в XPDL. Одной из особенностей списка будут представления. Например, будет реализовано представление, отображающие архивные задачи – те задачи, которые закрыты и помещены в архив.

Таким образом, список задач, в зависимости от представления, отображает:

Актуальные задачи.

Архивные задачи.

Следующим составным элементом является список ресурсов. Он будет содержать в себе перечень ресурсов, которые можно использовать при выполнении задач. Одной из основных целей WfMS является реализация функции распределения ресурсов. Для этого каждый ресурс имеет свои характеристики, которые используются в разрабатываемых средствах анализа, мониторинга и распределения ресурсов.

Третьим списком системы является список назначений ресурсов на задачи. Он содержит в себе подробную информацию о том, какие ресурсы и на какую задачу были назначены. Список необходим для проведения мониторинга и оперативного анализа по текущим задачам и ресурсам. Как в случае со списком задач, назначения могут быть как актуальными, так и архивными.

Звеном взаимодействия CRM и WfMS является список, который будет наполняться данными, посылаемыми обеими системами. CRM модуль должен предоставить заявку, а WfMS удовлетворить ее и подготовить решение, отослав его в общий список.

Кроме того, возможность совместной работы, которую обеспечивает MS SharePoint, предоставляет инженерно-техническому персоналу свободу действий в плане работы на портале, что дает большое преимущество в экономии времени и трудовых ресурсов.

Таким образом, благодаря уже существующим инструментам SharePoint вроде списков, разработка системы упрощается, а время разработки сокращается. Подробнее об особенностях разработки системы будет рассказано в параграфах о моделировании бизнес-процессов и разработке WfMS.

Моделирование основных бизнес-процессов WfMS НИУ ВШЭ - Пермь

Данный параграф содержит описание этапа моделирования WfMS как в целом, так и с учетом конкретных особенностей системы.

Особенности проектирования WfMS НИУ ВШЭ - Пермь

В предыдущем параграфе были описаны преимущества MS SharePoint, используемые при создании системы. Кроме того, там было кратко рассказано о некоторых особенностях WfMS, которым посвящен данный параграф.

С общими требованиями можно ознакомиться в приложении Б, в котором содержится ТЗ на разработку WfMS НИУ ВШЭ - Пермь.

Первым шагом моделирования WfMS стало определение требований. Ниже описаны обобщенные требования, выполнение которых подтверждает, что WfMS достаточна сложна для того, чтобы считаться отдельной системой, существующей в рамках более крупной системы технической поддержки:

Интероперабельность. WfMS должна быть способна к взаимодействию с CRM системой. Системы взаимодействуют путем использования общих списков MS SharePoint на портале службы технической поддержки.

Масштабируемость. НИУ ВШЭ - Пермь реализует стратегию развития до 2020, которая включает в себя увеличение учебных площадей, внедрение новых информационных сервисов и технического оборудования. Потому важно разработать систему таким образом, чтобы в будущем она смогла справиться с увеличивающейся нагрузкой. Отчасти, это свойство достигается тем, что служба технической поддержки представляет собой комбинацию виртуальной службы поддержки и распределенной службы с центральной точкой приема заявок.

Синергичность. В будущем новые идеи и технологии могут быть использованы для улучшения отдельных частей WfMS, поэтому важно, чтобы улучшение отдельных элементов вело к улучшению производительности системы в целом. В качестве примера можно привести время выполнения заявки системой. Если улучшить временной показатель процессов распределение ресурсов и составления отчетности, то время работы системы в целом так же сократится.

Эмерджентность. WfMS представляет собой набор взаимосвязанных процессов, которые по отдельности неспособны дать необходимый результат. Система же объединяет все процессы вместе с целью получения конечного результата.

Наличие средств администрирования и контроля. Крайне обширное и труднореализуемое свойство. Смысл заключается в том, чтобы система всегда содержала инструмент, позволяющий контролировать активности и оценивать эффективность выполняемых действий.

Ранее были описаны роли, исполняемыми людьми в рамках WfMS, однако стоит четко их различать и выделять зоны их ответственности:

Оператор отвечает:

за декомпозицию заявки на задачи;

за назначение ответственного исполнителя (дежурного инженера) на задачу;

за распределение ресурсов на задачи (в зависимости от ситуации – совместно с дежурным инженером);

за архивирование и восстановление задач.



Дежурный инженер ответственен:

за выполнение поставленной оператором задачи;

за заполнение форм отчетности по проделанной работе.

Только люди этих ролей входят в состав WfMS, в то время как обычный пользователь – в состав CRM. Однако в отдельных случаях пользователь может взаимодействовать как с оператором, так и с дежурным инженером.

Оператор отвечает за разбиение заявки на задачи, потому важно определить, что такое задача. В рамках портала задача есть элемент списка задач, имеющий набор полей. В предыдущем параграфе отмечалось, какой статус может иметь задача:

Актуальная – задача находится на стадии выполнения.

Архивная – задача, по тем или иным причинам, отправленная в архив.

Наличие особенности определения задач внутри системы удовлетворяет требованию, описанному в стандарте WfRM, согласно которому WfMS должна включать в свой состав уровень создания и управления рабочих процессов.

Построение моделей основных бизнес-процессов
WfMS НИУ ВШЭ - Пермь

Моделирование как процесс может быть разбит на несколько составляющих: постановка задачи, формализация или создание модели и представление результатов. Правильно составленная модель обеспечит успешное проектирование и разработку системы в целом.

Первым этапом моделирования является постановка задачи. Задача может быть поставлена в любой форме: в виде словесного описания, графического или в виде программного кода. Второй этап – формализация. Он включает в себя создание модели на выбранном формальной языке, опираясь на поставленную задачу. Перед тем как преступить к построению модели важно выбрать инструменты и стандарты. Модель разрабатываемой WfMS может быть построена с помощью различных нотаций, таких как: ARIS, IDEF0/SADT, UML и других.

Было решено, что для построения процессов системы будет использоваться нотация ARIS eEPC. Методология была выбрана благодаря простоте своего освоения и наглядности полученных результатов.

Важнейшей частью при проектировании системы является моделирование процессов этой системы. В приложении А отображены основной бизнес-процесс выполнения заявки и управляющий процесс распределения ресурсов.

В рамках основного бизнес-процесса выполнения заявки отображаются основные процессы, протекающие в WfMS.

Первым этапом процесса является анализ заявки, пришедшей из CRM. Затем происходит декомпозиция заявки на задачи при участии оператора. Следующим важным этапом является процесс распределения ресурсов, схемы алгоритма которого можно посмотреть в приложении Д. После выполнения всех связанных задач, происходит генерация отчета о выполненной работе и его отправка обратно модулю CRM. 

Построение процесса, таким образом, позволяет сократить среднее время выполнения заявки путем: распределения обязанностей между оператором и дежурным инженером; реализацией функций распределения ресурсов по задачам и генерацию отчетов о выполненных работах. В противном случае, все эти действия выполняются вручную и зачастую одним человеком. 

В предыдущей главе рассматривался XPDL – язык моделирования бизнес - процессов. Его основная идея заключалась в разбиении крупных задач на более мелкие. Этот принцип взят за основу при моделировании WfMS: заявка разбивается на задачи, которые в свою очередь могут включать в себя использование материальных, денежных или трудовых ресурсов. Так же между задачами могут существовать переходы в зависимости от конкретной ситуации.

Далее был определен управляющий бизнес-процесс распределения ресурсов на задачи,  модель которого представлена в приложении А.

Выполнение управляющего процесса происходит при участии оператора и программных средств WfMS. Это одна из наиболее важных функций, выполнение которой определяет успешность выполнения главного бизнес-процесса. В рамках проводимой работы по разработке WfMS, данный бизнес-процесс будет реализован на основе списка MS SharePoint и разработанного программного решения в виде обработчиков событий и визуальных веб-частей.

Реализация функционала распределения ресурсов на задачи является наиважнейшей частью WfMS как признак автоматизированной системы. Быстрое и правильное назначение ресурса позволит скоординировать действия КЦ и ВШЭ - Пермь как предприятия вообще.

Было решено классифицировать ресурсы на три вида:

Трудовые ресурсы. Человеческие ресурсы, предполагается, что ресурсами этого вида будут сотрудники КЦ.

Материальные ресурсы. Обычные технические, аппаратные, программные и другие вспомогательные средства. Разделяются на расходные материалы и обычные.

Денежные ресурсы.

Таким образом, после принятия заявки, распределения ресурсов и ее закрытия происходит архивирование связных задач, которые физически она не удаляются, а помещаются в специальный раздел и в случае чего могут быть восстановлены. 

Отчет, составленный по итогам выполнения заявки, представляет собой поле «Описание решения» общего списка модулей, отображающее отчеты по связным задачам.

После разработки основных бизнес-процессов, стоит задуматься о поведении системы в целом. Очень часто при проектировании систем пропускаются важные детали, определяющие характер функционирования системы в определенных ситуациях. Потому была составлена схема прецедентов, показанная на рисунке 2.1.

При разработке диаграммы прецедентов были проанализированы различные случаи, которые могут повлиять на логику работы WfMS. Рассмотрение данных прецедентов позволяет заранее разработать систему с учетом критических ситуаций. Основной причиной неправильного функционирования системы могут стать действия человека. Разработанная диаграмма отражает все возможные действия человека при вмешательстве в работу системы. Кроме сотрудников WfMS была рассмотрена ситуация, когда пользователь отменяет заявку, выполнение которой уже началось.





Рисунок 2.1. Диаграмма прецедентов WfMS

Разработка схемы данных

После моделирования основных процессов необходимо определить структуру данных. Изначально была разработана схема БД для WfMS и CRM. Она была нормализована и приведена к третьей нормальной форме. Реализацию схемы БД можно было осуществить с помощью любой СУБД, например, MySQL, но так как разработка системы ведется с помощью MS SharePoint 2010, то логичней, быстрей и рациональней использовать уже существующий инструментарий хранения информации: списки SharePoint, которые схожи в конструкции с таблицами БД.

Однако изначально схема БД разрабатывалась не под формат списков и библиотек, потому важно было правильно спроецировать составленную схему БД на формат списков SharePoint. На рисунке 2.2 представлена схема классов в формате списков:





Рисунок 2.2. Схема классов сервиса технической поддержки



Как видно из схемы классов, все поля списков имеют те же типы, что доступны и в других видах БД. А преобразование данных к спискам и библиотекам не сказалось на степени нормализации. Таким образом, из приведенной схемы данных к WfMS относятся:

Список задач. Этот список содержит задачи, которые получились путем декомпозиции заявки.

Список ресурсов. Содержит в себе информацию об имеющихся ресурсов КЦ.

Список назначений. Содержит информацию о назначениях ресурсов на задачи.

Общий список модулей. Смежный список, который обеспечивает взаимодействие WfMS и CRM модуля.

ОПИСАНИЕ РАЗРАБОТАННОЙ СИСТЕМЫ

Этап проектирования, включающий в себя создание моделей основных процессов системы, схемы данных, разработку ТЗ на создание системы и определение основных требований к создаваемой системе, послужил основой для дальнейшей разработки.

В данном параграфе рассматриваются общие положения создания системы, ее составляющие, основные функции и принципы действия. Для получения более полной информации о системе следует изучить руководство пользователя и руководство системного программиста, которые находятся в приложениях В и Г соответственно.

Так как объем исходных кодов программных решений системы более 1500 строк, то в приложении Е приведены коды лишь основных методов. 

Разработка осуществлялась с использованием технологий MS SharePoint 2010 и ASP.NET, основным языком программирования был C#. Так же использовался JavaScript для генераций сообщений пользователю.

Таким образом, результатом работы стала разработанная система, которая включает в себя следующие элементы:

Список задач. Хранит в себе информацию о задачах: к какой заявке относится задача, история назначения ресурсов, ответственный исполнитель, описание решения задачи и т.д. Данный список имеет два представления: первое отображает актуальные задачи, а второе – архивные. Архивные задачи получаются путем закрытия заявки, либо ручным редактированием элемента списка.

Список ресурсов. Отображает сведения об имеющихся ресурсах, в том числе тип конкретного ресурса и доступное количество.

Список назначений. Список, элементы которого представляют собой назначения ресурсов на задачи.

Общий список модулей. Область взаимодействия CRM модуля и WfMS. Оператор берет из этого списка информацию о заявках, затем WfMS через элементы этого списка предоставляет отчеты с решениями CRM модулю.

Обработчики событий. Система включает в себя несколько обработчиков событий на добавление и изменения элементов, которые позволяют без участия человека выполнять операции, необходимые для функционирования системы.

Визуальные веб-части. Визуальные веб-части реализованы с помощью технологии создания веб-приложений ASP.NET и выполняют  наиболее крупные задачи системы: распределение ресурсов, закрытие заявок и задач, генерация отчетов.

	Для работы со списками задач, назначений и общего списка модулей следует изучить руководство пользователя системы в приложении В. Заполнение и редактирование элементов этих списков стандартными средствами MS SharePoint может привести к некорректной работе системы.

	Создание и редактирование элементов списка задач должно производиться оператором и дежурным инженером. При создании и редактировании элементов можно изменять только следующие поля:

ИД. Идентификатор задачи.

Название задачи.

Идентификатор заявки. Код заявки, по которой создана задача.

Время закрытия задачи. Заполняется дежурный инженером или оператором по завершению задачи.

Текущее состояние. Может содержать одно из трех значение: «Задача выполняется», «Задача приостановлена» и «Задача завершена». Заявка не может быть закрыта, пока все задачи по ней не будут находиться в состоянии «Задача завершена».

Описание решения задачи. Содержит описание действий дежурного инженера по выполнению задачи.

Архивная. Логическое поле, отображает, является ли задача архивной. В особых случаях значение может задаваться вручную.

Остальные поля заполняются системой автоматически и их ручное редактирование не рекомендуется.

За работу со списком назначений, списком ресурсов и списком задач отвечает разработанное решение «WfMS.WebParts.AllocateResources», включающее в себя веб-части назначения и освобождения ресурсов:

Веб-часть  "GetResourcesWebPart". Визуальная веб-часть, реализует функционал назначения ресурсов на задачи.

Веб-часть "FreeResourcesWebPart". Визуальная веб-часть, реализует функционал освобождения ресурсов.

Ручное добавление, архивирование и редактирование элементов списка назначений не предусматривается.

Список назначений выполняет ряд функций:

Он позволяет проводить анализ и мониторинг доступности ресурсов.

Используется при закрытии заявок: если хоть по одной из задач не освобожденные ресурсы, то связную заявку нельзя будет закрыть.

Позволяет вести историю назначений, путем добавления элементов списка в архив.

Данные общего списка модулей заполняются как WfMS, так и CRM модулем. В область действий WfMS попадают поля:

Необходим работник. Логическое поле, отображает необходимость в дежурном инженере. Заполняется системой автоматически, если на задачу назначен трудовой ресурс.

Решение подготовлено. Логическое поле, отображает, готово ли решение по заявке. Заполняется системой автоматически при заполнении поля "Описание решения".

Описание решения. Поле, в которое заполняется отчет о проделанной работе по заявке. Формируется системой автоматически на основе решений связных задач.

	С общим списком модулей и списком задач работают обработчики событий:

Решение "WfMS.EventReceivers.AddOrderToNewTask". Реализует часть функций декомпозиции заявок и формирования отчетов по заявке.

Решение "WfMS.EventReceivers.WorkerAndSolutionReceiver". Реализует функции закрытия заявок и задач, формирование отчетов по выполнению заявок и обеспечивает взаимодействие с CRM модулем.

	Производить манипуляции над элементами списка ресурсов можно используя формы редактирования MS SharePoint, как показано на рисунке 2.3. При этом заполняются поля:

Название ресурса.

Тип ресурса. Может содержать одно из трех значений: трудовой, материальный и денежный.

Описание. Содержит описание ресурса. Например, трудовой ресурс может содержать описание «Сотрудник КЦ».

Расходный материал. Логическое поле, отображает, является ли ресурс расходным материалом, что влияет на логику работы системы при освобождении ресурсов с задачи.

Доступное количество. Количество ресурса доступное на данный момент. Назначение ресурса на задачу невозможно, если доступное количество равно нулю или меньше назначаемого.



Рисунок 2.3. Пример создания элемента списка ресурсов

Согласно разработанному ТЗ были реализованы основные функции, подробное описание и процесс реализации которых можно посмотреть в приложении В «Руководство пользователя WfMS НИУ ВШЭ  Пермь», приложении Г «Руководства системного программиста WfMS НИУ ВШЭ  Пермь», а так же в рассмотреть схемы основных алгоритмов системы в приложении Д, которые помогут быстрее и лучше понять исходные основных методов коды, находящихся в приложении Е.

Основными функциями WfMS являются:

Декомпозиция заявки на задачи. Оператор является важной частью WfMS НИУ ВШЭ – Пермь, и его основной задачей является работа с заявками, пришедшими из CRM модуля. После получения заявки, оператор разбивает заявку на более мелкие задачи, что позволяет в дальнейшем работать внутри с системы с каждой задачей отдельно. Задачи создаются в виде элементов списка задач.

Распределение ресурсов. Данная функция включает в себя два компонента: функция назначения ресурсов и функция освобождения ресурсов. Данные функции были реализованы  в виде веб-частей. 

Формирование отчета по выполненным заявкам и его передача CRM системе. Как только заявка закрывается, формируется отчет на основе данных, содержащихся в связных элементах списка задач. Данный отчет заносится в поле описания решения заявки в общем списке модулей.

Архивирование задач. Подобно формированию отчетов при инициации закрытия заявки, связные задачи архивируются.

Хранение истории назначений ресурсов на задачи. Система так же позволяет вести статистику назначения ресурсов, которая хранится в списке назначений ресурсов на задачи.

Данные функции системы выполняет оператор и дежурный инженер с помощью разработанных программных решений и стандартных инструментов MS SharePoint 2010. 

Как ранее говорилось в этом параграфе, основной функционал реализован при помощи визуальных веб-частей, каждая из которых располагается на отдельной странице. Исходный код решений писался таким образом, чтобы в будущем решения можно было развернуть на любых порталах и сервисах.

С помощью технологии ASP.NET, языков C# и JavaScript был реализован интуитивно понятный пользовательский интерфейс. В качестве примера на рисунке 2.4 показана форма назначения ресурсов. На странице расположены меню выбора, информативные поля и меню фильтрации.

Помимо формы назначения ресурсов, были созданы формы освобождения ресурсов, закрытия заявок и задач. Список назначений и список задач имеют несколько представлений. Например, оба списка могут содержать архивные данные, которые позволят проводить анализ и планирование действий КЦ.

Далее приведено описание формы назначения ресурсов:



Рисунок 2.4. Форма назначений ресурсов

Для ознакомления с принципами работы системы следует познакомиться с основными алгоритмами, схемы которых находятся в приложении Д. Ниже приведен пример описания схемы алгоритма назначения ресурсов:

Выбрать в соответствующих меню задачу и ресурс.

Считать данные о задаче и ресурсах. Если задача или ресурс не выбраны, то выдать пользователю соответствующее сообщение. Иначе перейти к пункту 3.

Определить тип ресурса. Если он трудовой, то определить, назначен ли на текущую задачу ответственный. Если не назначен, то назначить текущий трудовой ресурс как ответственного исполнителя. Перейти к пункту 7. Если ресурс не трудовой – перейти к пункту 4.

Считать из специального поля количество назначаемого ресурса.

Если назначаемого количество больше доступного, то выдать пользователю соответствующее сообщение. Иначе перейти к пункту 6.

 У соответствующего элемента в списке ресурсов уменьшить значение количества доступного ресурса на величину назначаемого количества.

Найти в списке назначений значение с текущей задачей и ресурсом. Если назначение не найдено, то создать новый элемент списка и перейти к пункту 8. Иначе определить тип ресурса. Если он трудовой создать новый элемент и перейти к пункту 8. Иначе увеличить старое значение назначаемого ресурса и перейти к пункту 8.

Завершить работу алгоритма, вывести пользователю сообщение об успешном назначении ресурса на задачу.

Таким образом, с помощью разработанных программных средств были реализованы алгоритмы и функции, описанные в ТЗ на создание системы. Рисунок 2.5 схематично показывает связи функций и разработанных решений.



Рисунок 2.5. Схема реализации функций по решениям

	Подводя итоги практической части работы, следует выделить полученные результаты:

Составлены основные требования и характеристики WfMS, ТЗ на разработку.

Разработана схема данных.

Смоделированы и описаны основные процессы системы.

На основе технологии MS SharePoint разработана WfMS НИУ ВШЭ – Пермь.

Описаны основные алгоритмы.

Составлено руководство пользователя.

Составлено руководство системного программиста.

Разработана WfMS.




Экономическое описание разработки

Важным этапом любого проектирования и разработки ПО и прикладных систем является их экономическое описание. Оно должно отражать основные затраты, которые получаются путем сложения стоимости инструментов, используемых при разработке, и расчетной стоимости проводимых работ.

Разработка системы проводилась в рамках выпускной квалификационной работы и ее основанием был приказ от 25.11.2013 №8.6.2-06/698 “Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики”. 

Таким образом, инициатором на проведение работ выступает факультет бизнес-информатики и создание системы не подразумевает извлечения коммерческой выгоды или получения экономической прибыли. 

Однако, использование созданной службы поддержки, которая включает в себя WfMS и CRM модуль, позволит автоматизировать некоторые процессы КЦ НИУ ВШЭ – ПЕРМЬ и тем самым сократить некоторые издержки, вроде трудозатрат.

Благодаря подписке факультета бизнес-информатики на продукцию Microsoft, при ведении работ по разработке WfMS было доступно необходимое ПО:

Microsoft SharePoint 2010.

Microsoft Visual Studio 2010.

Microsoft SQL Server 2008.

Windows 7 Professional.

Помимо затрат на ПО необходимо учесть заработную плату сотрудникам КЦ, входящим в состав WfMS. Так, размер затрат этого типа будет определяться степенью привлечения оператора и дежурных инженеров на работу в системе, что в свою очередь будет зависеть от количества заявок, подаваемых в службу технической поддержки. 




Заключение

В процессе выполнения работы были изучены основные сведения о службах технической поддержки и использование в них автоматизированных информационных систем. В рамках исследования был проведен анализ теории, связанной с проектированием и разработкой WfMS, изучена текущая обстановка в НИУ ВШЭ - Пермь на предмет организации службы технической поддержки. 

Проведение анализа ситуации в НИУ ВШЭ - Пермь позволило построить модель «как есть», описывающей процесс выполнения заявок КЦ, и составить ТЗ, которое содержит в себе основные требования, предъявляемые разрабатываемой системе.

Спроектированная служба технической поддержки состоит из модуля CRM, отвечающего за взаимодействие с клиентами, и непосредственно WfMS. В работе было приведено обоснование разработки WfMS как части технической поддержки, отвечающей за выполнение заявок студентов и сотрудников университета.

Кроме того, были изучены и применены в работе стандарты WFMC. Так, например, благодаря использованию XPDL работа WfMS основывается на декомпозиции заявок на задачи. А сама система разрабатывалась согласно требованиям стандарта WfRM.

Благодаря рассмотрению особенностей разрабатываемой системы, были построены модели бизнес-процессов, протекающих в WfMS, в нотации ARIS eEPC. В качестве основного бизнес-процесса выступает процесс выполнения заявки. Так же был выделен управляющий процесс распределения ресурсов.  Помимо всего, была разработана диаграмма прецедентов, рассматривающая все возможные действия человека в рамках функционирования WfMS. Создание этой диаграммы позволит предусмотреть критические ситуации системы в процессе ее разработки.

В качестве инструмента разработки был выбран MS SharePoint 2010 с применением технологии ASP.NET и языков программирования C# и JavaScript. Основными используемыми элементами системы являются списки, выступающие в роли таблиц БД. Схема БД, изначально была спроектирована и приведена к третьей нормальной форме, после чего на ее основе построена схема классов, которая позволяет перенести конструкцию БД на списки SharePoint без нарушения условий нормализации.

Финальным этапом работы стало создание WfMS НИУ ВШЭ - Пермь. Система включает в себя список задач, список ресурсов, список назначений и общий список модулей. В качестве дополнительных программных решений были разработаны обработчики событий и визуальные веб-части, которые реализуют функционал, описываемый в ТЗ на создание системы.

Помимо разработанной системы были составлены руководства пользователя, системного программиста, а так же описание основных алгоритмов системы. Таким образом, результатом работы стала спроектированная и реализованная система управления потоками работ обслуживающей деятельности КЦ НИУ ВШЭ – Пермь по выполнению заявок на техническую помощь, имеющая  собственный пакет документации, необходимый для сопровождения системы.




Библиографический список

Расчет качества службы поддержки // Настольный журнал ИТ-руководителя [Электронный ресурс] [Режим доступа: http://www.osp.ru/cio/2005/06/174035/] [Проверено: 18.03.2014]

Information Technology Infrastructure Library [Электронный ресурс] [Режим доступа: http://www.itil-officialsite.com/] [Проверено: 18.03.2014]

Портал iTeam – Технологии корпоративного управления [Электронный ресурс] [Режим доступа: http://www.iteam.ru/] [Проверено: 18.03.2014]

WfMC Standards Framework // Workflow Management Coalition [Электронный ресурс] [Режим доступа: http://www.wfmc.org/wfmc-standards-framework.html] [Проверено: 18.03.2014].

The Workflow Reference Model // Workflow Management Coalition [Электронный ресурс] [Режим доступа: http://www.wfmc.org/standards/docs/tc003v11.pdf] [Проверено: 18.03.2014].

Нестеренко А.К., Бездушный А.А, Сысоев Т.М., Бездушный А.Н, Серебряков В.А. Служба управления потоками работ по манипулированию ресурсами репозитория // Российская академия наук [Электронный ресурс] [Режим доступа: http://www.ras.ru/ph/0006/0UNYMOJX.html] [Проверено: 18.03.2014].

Workflow Standard Process Definition Interface // Workflow Management Coalition Workflow standart [Электронный ресурс] [Режим доступа: http://www.xpdl.org/standards/xpdl-2.2/XPDL%202.2%20(2012-08-30).pdf] [Проверено: 18.03.2014].

Business Process Modeling Language // Object Management Group [Электронный ресурс] [Режим доступа: http://www.omg.org/bpmn/Documents/BPML-2003.pdf ] [Проверено: 18.03.2014].

Перспективы workflow-систем // Идеи и практики автоматизации [Электронный ресурс] [Режим доступа: http://www.pcweek.ru/idea/article/detail.php?ID=71354] [Проверено: 18.03.2014].

Словарь терминов и аббревиатур ITIL // ITIL [Электронный ресурс] [Режим доступа: http://itsmforum.ru/ZAM-test/Russian_2011_Glossary_v2.0.pdf] [Проверено: 18.03.2014].

SharePoint 2010 // Портал для компаний-разработчиков SharePoint 2010 [Электронный ресурс] [Режим доступа: http://www.microsoft.com/ru/ru/isv/development/sharepoint2010.aspx] [Проверено: 18.03.2014].

Farm topology management (SharePoint Server 2010) // SharePoint for IT pros [Режим доступа: http://technet.microsoft.com/en-us/library/cc262321.aspx] [Проверено: 18.03.2014].




ПРИЛОЖЕНИЕ А. Основные бизнес-процессы WFMS НИУ ВШЭ - ПЕРМЬ



Рисунок А.1. Основный бизнес-процесс выполнения заявки (1)

 Рисунок А.2. Основный бизнес-процесс выполнения заявки (2)








Рисунок А.3. Управляющий процесс распределения ресурсов на задачи


ПРИЛОЖЕНИЕ Б. Техническое задание на создание WFMS НИУ ВШЭ - ПЕРМЬ




Аннотация

Настоящий документ является техническим заданием (ТЗ) на создание системы управления потоками работ вычислительного центра НИУ ВШЭ - Пермь, являющейся подсистемой службы технической поддержки НИУ ВШЭ - Пермь. Система разрабатывается для использования на уровне пермского кампуса НИУ ВШЭ. Одновременно ведется разработка CRM системы.

WfMS НИУ ВШЭ - Пермь предназначена для информационной, технической и программной поддержки студентов и сотрудников НИУ ВШЭ - Пермь при возникновении проблем подобного характера. Так же система учувствует в организации деятельности компьютерного центра НИУ ВШЭ - Пермь.

WfMS будет создана с использованием технологии MS SharePoint 2010.

В данном документе установлены требования к системе WfMS НИУ ВШЭ - Пермь.

Документ разработан в соответствии с ГОСТ 34.602-89 «Информационная технология. Комплекс стандартов на автоматизированные системы. ТЗ на создание автоматизированной системы».







1. Общие сведения

1.1. Полное наименование системы: Система управления потоками работ (Workflow Management system) вычислительного центра НИУ ВШЭ - Пермь.

Условное обозначение: «WfMS НИУ ВШЭ - Пермь».

1.2. Заказчик: НИУ ВШЭ - Пермь, факультет бизнес-информатики, г. Пермь, бульвар Гагарина, 37а.

1.3. Исполнитель – Семушин Дмитрий Вадимович, студент НИУ ВШЭ - Пермь, факультета бизнес-информатики, группы БИ-10-2.

1.4. Система создается на основании приказа от 25.11.2013 №8.6.2-06/698 “Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики”.

1.5. Настоящее ТЗ может уточняться "и дополняться в процессе создания и развития WfMS НИУ ВШЭ - Пермь. Согласование и утверждение дополнений к ТЗ должно проводиться в установленном для ТЗ порядке.




2. Назначение и цели создания

2.1 Назначение системы

WfMS является частью службы технической поддержки НИУ ВШЭ - Пермь и предназначена для информационной, технической и программной поддержки студентов и сотрудников НИУ ВШЭ - Пермь при возникновении проблем технического характера. Так же система учувствует в организации деятельности компьютерного центра НИУ ВШЭ - Пермь.

2.2 Цель создания системы

Целью создания WfMS является информационная и техническая поддержка студентов и сотрудников НИУ ВШЭ, которая достигается путем взаимодействия WfMS и CRM системы, разрабатываемой параллельно.

Данная цель достигается за счет решения следующих задач:

создание портала, хранящего информацию необходимую для обработки в процессе выполнения заявок;

создание списков MS SharePoint, необходимых для работы WfMS;

разработка программных решений на языках C# и JavaScript, обеспечивающих анализ и обработку информации об имеющихся ресурсах компьютерного центра НИУ ВШЭ - Пермь, а также о поданных заявках;

создание форм заполнения отчетностей о проделанной работе;

обеспечение возможности автоматического формирования отчетных  материалов по итогам заполненных выполненных работ;

накопления базы знаний по выполненным задачам и истории назначений ресурсов на задачи;

организация взаимодействия с CRM системой: прием от нее заявок и передача ей решений.




3. Характеристика объекта автоматизации

Объектом автоматизации является бизнес-процесс выполнения заявок, поданных студентами и сотрудниками университета в службу технической поддержки. Декомпозиция бизнес-процесса представлена в таблице Б.1:

Таблица Б.1. Процессы автоматизации




4. Требования к системе

4.1 Требования к системе в целом

WfMS НИУ ВШЭ - Пермь представляет собой систему, состоящую из персонала и комплекса программных средств автоматизации при выполнении заявок, поданных в КЦ НИУ ВШЭ. WfMS ответственна за прием заявок от CRM системы, их обработку и выполнение. Для этого система должна:

декомпозировать заявки на задачи;

распределять ресурсы и персонал по задачам;

следить за ходом выполнения задач;

формировать отчет по выполненным заявкам и передавать его CRM системе;

архивировать закрытые заявки;

хранить историю назначений ресурсов на задачи;

Группы людей, входящие в состав WfMS НИУ-ВШЭ:

клиенты – студенты и сотрудники университета, подающие заявки, их роль в системе ограничивается взаимодействием с инженерно-техническим персоналом в некоторых случаях;

инженерно-технический персонал включает оператора и дежурных инженеров:

оператор – ответственный за формирование задач, распределение ресурсов и назначение дежурных инженеров на задачи;

дежурный инженер – член технического персонала, обязанностью которого является выполнение комплекса мер по устранению проблем, связанных с задачами на которые его назначил оператор.

Программный комплекс должен быть разработан с помощью MS SharePoint 2010 и представлять из себя часть веб-портала, который включает в себя WfMS и CRM систему, содержащий списки, а так же разработанные решения по обработке информации.

Этапы работы системы:

Прием заявки от CRM системы. Заявка должна содержать в себе информацию о месте, времени и характере проблемы. Описание проблемы должно максимально точно соответствовать действительности для правильного анализа и последующих действий внутри WfMS.

Формирование задач на основе заявок. Оператор с помощью разработанных средств должен сформировать задачи.

Учет ресурсов и наличия персонала. WfMS должна обеспечивать автоматизированное обновление и обработку данных по ресурсам и персоналу (их наличие, занятость, свободное время и т.д.).

Назначение ресурсов на задачи. При наличии и доступности персонала и ресурсов оператор распределят их по задачам.

Выполнение задач. Дежурный инженер выполняет задачу, на которую его назначили. При этом могут использоваться дополнительно аппаратные и программные средства.

Заполнение отчетов. После выполнения задачи дежурный инженер должен заполнить форму отчетности.

Формирование отчета. С помощью разработанных компонентов WfMS автоматически формируется отчет по ранее заполненной форме и сохраняется внутри системы.

Архивирование задачи. После закрытия задача отправляется в архив, формируя тем самым базу знаний.

Архивирование назначения ресурсов. После освобождения ресурсов, назначения архивируются.

Передача отчета. Сформированный отчет передается CRM системе.

4.1.1 Требования к структуре системы

4.1.1.1 Структурная декомпозиция системы

В состав WfMS НИУ ВШЭ - Пермь должны выходить:

комплекс задач «Формирование задач внутри WfMS»;

комплекс задач «Анализ и мониторинг наличия ресурсов и персонала»;

комплекс задач «Распределение ресурсов по задачам и их выполнение»;

комплекс задач «Формирование отчетности по выполненным задачам»;

комплекс задач «Архивирование задач»;

комплекс задач «Хранение истории назначений ресурсов на задачи»;

комплекс задач «Обеспечение взаимодействия с CRM системой»;

4.1.1.2 Требования к характеристикам взаимосвязей и способам обмена информацией со смежными системами

В процессе функционирования WfMS должна взаимодействовать с CRM системой. Процесс взаимодействия подразумевает, что системы должны взаимодействовать через общие списки и библиотеки документов. 

Характер взаимодействия WfMS и CRM должен быть таков, что выход из строя одной из систем не должно ввести за собой остановку функционирования другой.

Системы должны взаимодействовать через общий список модулей. Элементами этого списка являются заявки, содержащие поля, заполняемые обеими системами.

4.1.1.3 Требования к режиму функционирования системы

WfMS должна быть доступной и функционировать 24/7.

4.1.2 Требования к производительности системы

Система должна выполнять задачи 1-7 (см. п. 4.1.1.1) без участия человека суммарно не более чем за 10 минут. Это время получено сложением временных требований, приведенных ниже (п. 4.2).

WfMS должна обеспечивать возможность внутрисистемной одновременной работы людей, исполняющих одинаковые роли (оператор, дежурный инженер).

Количество записей различных типов (задачи, ресурсы, архив задач) не должно ограничиваться ничем, кроме объема памяти для хранимой информации или ограничениями MS SharePoint.

4.1.3 Требования к численности и квалификации персонала системы

Описание персонала WfMS:

Инженерно-технический персонал включает оператора и дежурных инженеров:

1.1) Оператор – ответственный за формирование задач, распределение ресурсов и назначение дежурных инженеров на задачи.

1.2) Дежурный инженер – член технического персонала, обязанностью которого является выполнение комплекса мер по устранению проблем, связанных с задачами на которые его назначил оператор.

Число операторов системы: не менее 1 в конкретный момент времени.

Число дежурных инженеров: не менее 1 в конкретный момент времени.

4.1.4 Требования к программному обеспечению

Сервис технической поддержки должен представлять собой портал, созданный с помощью MS SharePoint 2010. Основные программные решения должны дорабатываться в среде MS Visual Studio на языках C# и JavaScript. Помимо прочего могут использоваться другие технологии разработок решений для MS SharePoint в зависимости от потребностей. По возможности, используемые продукты должны быть известны широкому кругу разработчиков.

Данные портала должны храниться в виде элементов списков.

4.1.5 Требования к информационному обеспечению

В рамках WfMS должны быть созданы списки:

Список задач. Содержит в себе основные данные о задачах.

Список ресурсов. Содержит перечень ресурсов и информацию об их доступности.

Список назначений. Содержит информацию о назначениях ресурсов на задачи.

WfMS является смежной по отношению к CRM модулю, разрабатываемому параллельно Кагармановым Евгением. Данные компоненты должны взаимодействовать путем работы с общим списком модулей. 

Со стороны WfMS в общий список должны заноситься следующие данные:

Описание решения.

Требуется работник.

4.1.6 Требования к лингвистическому обеспечению

Интерфейс системы должен быть написан на русском языке. В дальнейшем возможна доработка на другие языки.

4.1.7 Требования к техническому обеспечению

Со стороны системы, рабочий сервер должен удовлетворять следующим требованиям:

64-разрядный четырехъядерный процессор;

8 гб ОЗУ;

жесткий диск 120 гб.

Со стороны клиента:

современный браузер типа Internet Explorer 7, Google Chrome и т.п.

4.2 Требования к функциям, выполняемыми системой

4.2.1 Требования к комплексу задач «Формирование задач»

Формирование задач внутри WfMS отвечает за декомпозицию заявки на задачи, выполнение которых должно привести к удовлетворению заявки.

Задача определяется двумя типами:

Актуальная;

Архивная.

Время выполнения комплекса системой (без участия человека): до 40 секунд.

Должен быть реализован механизм создания периодических задач.

Помимо программной части WfMS к этому комплексу задач подключается оператор, использующий средства системы для формирования задач на основе заявок.

4.2.2 Требования к комплексу задач «Анализ и мониторинг наличия ресурсов и персонала»

Данный комплекс задач предполагает реализацию функционала, позволяющего обеспечить целостность данных, хранящих информацию о ресурсах системы.

Время выполнения комплекса системой (без участия человека): до 50 секунд.

Периодичность выполнения: каждый раз после записи данных.

Данный комплекс задач выполняется без участия человека.

4.2.3 Требования к комплексу задач «Распределение ресурсов по задачам и их выполнение»

Комплекс задач «Распределение ресурсов по задачам и их выполнение» направлен на распределение необходимых ресурсов для выполнения задач и их последующее выполнение.

Выполнение комплекса подразумевает участие человека (оператора и/или дежурного инженера).

Выполнение распределения ресурсов включает в себя комплекс задач «Анализ и мониторинг наличия ресурсов и персонала» (п. 4.2.2).

Время выполнения комплекса системой (без участия человека): до 1 минуты 50 секунд.

4.2.4 Требования к комплексу задач «Формирование отчетности по выполненным задачам»

Комплекс задач «Формирование отчетности по выполненным задачам» выполняется программной частью системы и человеком. 

Дежурный инженер должен составить отчет в виде заполненного элемента списка. WfMS должна сгенерировать отчет в виде элемента общего списка модулей.

Время выполнения комплекса системой (без участия человека): до 50 секунд.

4.2.5 Требования к комплексу задач «Архивирование задач»

Комплекс задач отвечает за помещение заявки в архив после ее закрытия. Выполняется автоматически, без участия человека. 

Время выполнения комплекса системой (без участия человека): до 50 секунд.

4.2.6 Требования к комплексу задач «Обеспечение взаимодействия с CRM системой»

Взаимодействие между WfMS и CRM системой должно достигаться путем создания и использования общих списков и библиотек SharePoint. Под взаимодействием подразумевается:

прием от CRM системы формализованных заявок;

передачу CRM системе данных о выполнении задач;

действия каскадного типа между связанными заявками и задачами.

Суммарное время выполнения комплекса системой (без участия человека): до 2 минут.

4.2.7 Требования к комплексу задач «Хранение истории назначений ресурсов на задачи»

Список назначений должен хранить историю назначений ресурсов на задачи.

Суммарное время выполнения комплекса системой (без участия человека): до 1 минуты.






ТРЕБОВАНИЯ К ДОКУМЕНТИРОВАНИЮ

По завершению проекта исполнитель обязан предоставить следующий набор документов:

Исходный текст кода основных методов системы.

Техническое задание.

Описание основных алгоритмов.

Руководство пользователя.

Руководство системного программиста.




ПРИЛОЖЕНИЕ В. Руководство пользователя WFMS НИУ ВШЭ - ПЕРМЬ

Аннотация

Настоящий документ описывает общие принципы работы пользователя в WfMS НИУ ВШЭ - Пермь. В документе содержатся инструкции по применению,  сообщения пользователю и другая информация.

WfMS и данный документы разработаны в рамках выпускной квалификационной работы студента факультета бизнес-информатики Семушина Дмитрия Вадимовича.

WfMS реализована с применением технологии MS SharePoint 2010.

Основанием для разработки WfMS является техническим заданием (ТЗ) на создание системы управления потоками работ вычислительного центра НИУ ВШЭ - Пермь, являющейся подсистемой службы технической поддержки НИУ ВШЭ - Пермь.

Работа проводится на основании приказа от 25.11.2013 №8.6.2-06/698 “Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики”.

Документ "Руководство пользователя WfMS НИУ ВШЭ - Пермь" разработан на основании методических указаний РД 50-34.698-90.





ВВЕДЕНИЕ

Область применения

Данный документ должен быть изучен людьми, приступающим к работе с WfMS НИУ ВШЭ – Пермь. Документ описывает порядок и логику работы в системе на всех этапах жизнедеятельности заявки.

Пользователями системы являются инженерно-техническим персонал: оператор и дежурный инженер. Определение этих ролей можно посмотреть в ТЗ на создание системы управления потоками работ вычислительного центра НИУ ВШЭ - Пермь, являющейся подсистемой службы технической поддержки НИУ ВШЭ – Пермь, в приложении Б.

Краткое описание возможностей

WfMS является частью службы технической поддержки НИУ ВШЭ - Пермь и предназначена для информационной, технической и программной поддержки студентов и сотрудников НИУ ВШЭ - Пермь при возникновении проблем технического характера. Так же система учувствует в организации деятельности компьютерного центра НИУ ВШЭ - Пермь.

При участии человека WfMS позволяет:

Разбивать заявки на задачи.

Назначать и освобождать ресурсы с задач.

Накапливать данные о задачах и их решениях.

Хранить историю назначений ресурсов на задачи.

Уровень подготовки пользователя

Пользователь WfMS должен уметь работать с ПО Internet Explorer, Chrome и другими браузерами. Кроме того, пользователь  должен иметь опыт работы в среде MS SharePoint, знать его основы и уметь выполнять простейшие действия, такие как:

Добавление/Удаление/Редактирование элементов списков.

Работать со стандартными средствами MS SharePoint вроде настройки представлений и списков.


2. Назначение и условия применения WfMS НИУ ВШЭ - ПЕРМЬ

Целью создания WfMS является информационная и техническая поддержка студентов и сотрудников НИУ ВШЭ, которая достигается путем взаимодействия WfMS и CRM системы, разрабатываемой параллельно.

WfMS позволяет разбивать заявки на задачи, назначать на них ответственных, распределять ресурсы и вести мониторинг их наличия, хранить историю решений задач и назначений ресурсов.

	Работа с WfMS в составе службы технической поддержки доступна всегда, когда есть необходимость в ее функциях, а так же доступность использования системы достигается назначением необходимых прав доступа.




3. ОПИСАНИЕ ОПЕРАЦИЙ

	WfMS решает задачи, описанные в таблице ниже:

Таблица В.1. Задачи, выполняемы WfMS

3.1 Описание операций технологического процесса обработки данных, необходимых для выполнения задач

3.1.1 Задача принятия заявки на исполнение

Данная задача выполняется оператором WfMS.

	Операция 1:

	Посмотреть в общем списке модулей заявку, изучить по ней необходимую информацию: идентификатор и описание проблемы, как показано на рисунке В.1:



Рисунок В.1. Заявка в общем списке модулей

	Операция 2:

	Создать задачу по заявке, заполнив только следующие поля (рисунок В.2):

Название задачи

Идентификатор заявки.

Текущее состояние.

При создании задачи заполнять нужно лишь указанные поля, заполнение других полей может привести к некорректной работе системы.



Рисунок В.2. Создание задачи по заявке

	На выполнении этих операций процесс принятия заявки на исполнение завершается.

3.1.2 Задача распределения ресурсов на задачи

Задача может выполняться как оператором, так и дежурным инженером. Первым этапом выполнения задачи является проверка наличия записей о нужных ресурсах в соответствующем списке (рисунок В.3). Все действия следует производить именно таким образом, как это описано в текущем руководстве. Ручное добавление, изменение и удаление записей приведет к неправильной работе системы.



Рисунок В.3. Список ресурсов

	Операция 1:

	Перейти на одну из страниц распределения ресурсов путем нажатия кнопки, как показано на рисунке В.4, находящейся в одном из списков (список ресурсов, список задач и список назначений):



Рисунок В.4. Кнопки переходов на страницы манипулирования ресурсами.

	Операция 2:

	В зависимости от выбора операции (назначение или освобождение ресурсов) откроется новая страница, которая содержит в себе инструменты распределения ресурсов. На рисунке В.5 показан пример назначения ресурса на задачу:



Рисунок В.5. Процесс назначения ресурса на задачу

	Ниже приведено описание каждого элемента:

Код задачи. Меню выбора, в котором необходимо выбрать задачу, на которую назначаются ресурсы. Архивные задачи не отображаются.

Уже назначенные ресурсы на задачу. Информативное поле, отображающее какие ресурсы уже были задействованы на задач или задействованы на текущий момент.

Меню фильтрации ресурсов. Позволяет выбрать тип ресурсов, необходимых для отображения. Если трудовой ресурс назначается на задачу, на которую еще не были назначены люди, то первый назначенный сотрудник автоматически становится ответственным исполнителем. Чтобы переопределить ответственного, достаточно назначить нового человека, поставив предварительно галочку напротив соответствующего поля. Для остальных ресурсов можно указать назначаемое количество.

	На рисунке В.6 показан список назначений, который может отображать как текущие назначения ресурсов, так и архивные:



Рисунок В.6. Список назначений

	Вторым видом распределения ресурсов является их освобождение. На рисунке В.7 показана форма освобождения ресурсов:



Рисунок В.7. Форма освобождения ресурсов.

	Форма содержит несколько уровней меню фильтрации:

Все задачи без фильтрации. Отображается все задачи.

Задачи с фильтрацией по ответственному исполнителю. Позволяет находить задачи по их ответственному.

Задачи с фильтрацией по ресурсам. Позволяет находить задачи, на которые назначены:

Трудовые ресурсы.

Материальные ресурсы.

Денежные ресурсы.

Конкретный ресурс.

	После нахождения необходимой задачи можно автоматически освободить все ресурсы. При этом логика работы системы такова, что расходные материалы не возвращаются и все назначенные ресурсы освобождаются, и соответствующие записи в списке назначений отправляются в архив.

	В случае, когда нужно освободить какой-то конкретный ресурс или вернуть расходный материал, следует нажать кнопку освобождения конкретного ресурса, как показано на рисунке В.8:



Рисунок В.8. Процесс освобождения конкретного ресурса.

3.1.3 Задачи формирования отчета, закрытия задач и взаимодействия с CRM системой

Задачи формирования отчета, закрытия задач и взаимодействия WfMS и CRM являются смежными, и их выполнение обеспечивается одними и теми же действиями.

Операция 1:

Дежурный инженер должен отредактировать элемент списка задач, изменив поля "Время закрытия задачи", "Описание решения задачи" и перевести текущее состояние задачи к значению "Задача завершена".

Операция 2:

	Закрытие задачи происходит в тот самый момент, как закрывается смежная заявка из общего списка модулей. При закрытии заявки происходит формирование отчета, а само закрытие инициирует передачу информации в CRM систему.

	Для закрытия заявки должны быть удовлетворены следующие требования:

Все задачи по заявки должны находиться в стадии "Задача завершена".

Все ресурсы, назначенные на связные задачи, должны быть освобождены.

	Таким образом, на странице общего списка модулей следует выбрать нужную заявку и нажать кнопку закрытия задач по заявке, как показано на рисунке В.9:



Рисунок В.9. Закрытая заявка в общем списке модулей.

	При закрытии задач происходят следующие действия:

Все связные задачи по заявке помещаются в архив.

В качестве отчета заполняется поле "Описание решение", которое содержит поэтапное решение проблемы.

После заполнения поля решения WfMS отправляет его CRM модулю.


4. Аварийные ситуации

	В таблице В.2 приведен перечень возможных ошибок, которые могут возникнуть в случае несоблюдения технологического процесса, действия по их устранению и описание аварийный ситуаций при других обстоятельствах.

Таблица В.2. Аварийные ситуации WfMS




ПРИЛОЖЕНИЕ Г. Руководство системного программиста WFMS НИУ ВШЭ - ПЕРМЬ

Аннотация

Настоящий документ описывает общие принципы работы WfMS НИУ ВШЭ - Пермь. В документе содержатся информация по назначению, составу и принципу действия системы, описание программных решений.

WfMS разработана в рамках выпускной квалификационной работы студента факультета бизнес-информатики Семушина Дмитрия Вадимовича.

WfMS реализована с применением технологии MS SharePoint 2010.

Основанием для разработки WfMS является техническим заданием (ТЗ) на создание системы управления потоками работ вычислительного центра НИУ ВШЭ - Пермь, являющейся подсистемой службы технической поддержки НИУ ВШЭ - Пермь.

Работа проводится на основании приказа от 25.11.2013 №8.6.2-06/698 “Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики”.

	Документ «Руководство системного программиста WfMS НИУ ВШЭ – Пермь» разработан на основании методических указаний ГОСТ 19.503-79.

	Перед изучением данного документа рекомендуется изучить «Руководство пользователя WfMS НИУ ВШЭ – Пермь»







1. Общие сведения о системе

WfMS является частью службы технической поддержки НИУ ВШЭ - Пермь и предназначена для информационной, технической и программной поддержки студентов и сотрудников НИУ ВШЭ - Пермь при возникновении проблем технического характера. Второй составляющей службы технической поддержки является CRM модуль, ответственный за принятие заявок и работу с пользователями службы. 

При участии человека WfMS позволяет:

Разбивать заявки на задачи.

Назначать и освобождать ресурсы с задач.

Накапливать данные о задачах и их решениях.

Хранить историю назначений ресурсов на задачи.

WfMS реализована с применением технологии MS SharePoint 2010. Помимо прочего использовалась технология создания веб-приложений ASP.NET, а так же языки программирования C # и JavaScript.

Для работы с системной необходим браузер типа Internet Explorer 7 и выше, Google Chrome, Opera, Safari и т.п.




2. Структура и настройка системы

В таблице Г.1 приведен список разработанных решений и компонентов, устанавливаемых на веб-портал MS SharePoint:

Таблица Г.1. Решения, входящие в состав WfMS НИУ ВШЭ - Пермь

2.1 Описание списков системы

Для функционирования системы каждый список должен иметь определенные поля. Ниже приведены перечни полей для каждого из списков, которые используются в разработках обработчиков событий и веб-частей. Названия полей могут меняться, а изменения вноситься в исходные коды решений, представленных в таблице Г.1.

Поля списка задач:

ИД. Идентификатор задачи.

Название задачи.

Идентификатор заявки. Код заявки по которой создана задача.

Время закрытия задачи. Заполняется дежурный инженером или оператором по завершению задачи.

Ответственный исполнитель. Поле подстановки из списка ресурсов.

Текущее состояние. Может содержать одно из трех значение: "Задача выполняется", "Задача приостановлена" и "Задача завершена".

Описание решения задачи.

Задействованные ресурсы. Перечень ресурсов, используемых при выполнении задачи.

Архивная. Логическое поле, отображает, является ли задача архивной.

Порядковый номер. Содержит порядковый номер задачи по заявке.

Поля списка ресурсов:

ИД. Идентификатор ресурса.

Название ресурса.

Тип ресурса. Может содержать одно из трех значений: трудовой, материальный и денежный.

Описание.

Расходный материал. Логическое поле, отображает, является ли ресурс расходным материалом, что влияет на логику работы системы при освобождении ресурсов с задачи.

Доступное количество.

Поля списка назначений:

Идентификатор ресурса. Поле подстановки из списка ресурсов.

Название ресурса. Поле подстановки из списка ресурсов.

Общее количество. Поле подстановки из списка ресурсов.

Идентификатор задачи. Поле подстановки из списка задач.

Название задачи. Поле подстановки из списка задач.

Назначенное количество. Количество назначенного ресурса на задачу.

Поля общего списка модулей:

Идентификатор заявки.

Название. Название заявки.

Необходим работник. Логическое поле, отображает необходимость в дежурном инженере.

Решение подготовлено. Логическое поле, отображает, готово ли решение по заявке.

Описание решения. Поле, куда заполняется отчет о проделанной работе по заявке.

	Переменные, содержащие названия полей, следует изменять, если таковые были отредактированы в настройках списка. 

2.2 Описание разработанных решений системы

	Порядок действий, логика работы и возможные ошибки описаны в руководстве пользователя, которое следует изучить системному программисту. Листинги основных методов программ приведены в приложении Е выпускной квалификационной работы. Для лучшего понимания исходных кодов следует изучить основные алгоритмы, которые приведены в приложении Д.

	Ниже приведены описания и пояснения разработанных решений системы

Решение «WfMS.EventReceivers.AddOrderToNewTask». 

Включает в себя «NewTaskAddedEventReceiver» - обработчик асинхронного события добавления записи в список задач.

Связь «NewTaskAddedEventReceiver» с окружением:

Читает данные из элементов списка задач.

Вносит изменения в элементы общего списка модулей.

Решение «WfMS.EventReceivers.WorkerAndSolutionReceiver».

Включает в себя «WorkerAndSolutionReceiver» - обработчик асинхронных событий добавления и изменения записи в списке задач и общем списке модулей.

Связь «WorkerAndSolutionReceiver» с окружением:

Читает данные из элементов списка задач и общего списка модулей.

 Вносит изменения в элементы общего списка модулей.

Решение «WfMS.WebParts.AllocateResources».

Включает в себя:

«AllocateResourcesWebPart» - визуальная веб-часть, реализующая переход на страницы распределения ресурсов.

«GetResourcesWebPart» - визуальная веб-часть, отвечающая за реализацию функционала назначения ресурсов на задачи.

Связь «GetResourcesWebPart» с окружением:

Читает данные из элементов списка задач, списка ресурсов.

Вносит изменения в элементы списка задача, списка ресурсов, списка назначений.

«FreeResourcesWebPart» - визульная веб-часть, реализующая функционал освобождения ресурсов.

Связь «FreeResourcesWebPart» с окружением:

Читает данные из элементов списка задач, списка ресурсов.

Вносит изменения в элементы списка ресурсов, списка назначений.

Решение «WfMS.WebParts.CompleteApp».

Включает в  себя «CompleteAppWebPart» - визуальная веб-часть, которая отвечает за реализацию функций архивирования задач, закрытия заявок, формирования отчетности и передачи решений CRM модулю.

Связь «CompleteAppWebPart» с окружением:

Читает данные из элементов списка задач, общего списка модулей.

Вносит изменения в элементы списка задач, общего списка модулей.




3. Проверка системы

	Для проверки правильной работы системы необходимо создать элемент в списках задач, ресурсов и общем списке модулей. В таблице Г.2 приведено описание действий, необходимых для проверки корректности выполнения функций системы.

Таблица Г.2. Способы проверки функций системы






ПРИЛОЖЕНИЕ Д. Схемы основных алгоритмов



Рисунок Д.1. Схема алгоритма назначения ресурса на задачу

Рисунок Д.2. Схема алгоритма освобождения ресурсов с задачи






Рисунок Д.3. Схема алгоритма закрытия заявки


ПРИЛОЖЕНИЕ Е. исходные коды основных методов

Листинг Е.1. Метод назначения ресурсов на задачи

        protected void getResourcebtn_Click(object sender, EventArgs e)

        {

            try

            {

                using (SPSite site = new SPSite(_SITE_GUID))

                {

                    using (SPWeb web = site.OpenWeb(_WEB_GUID))

                    {

                       int resAmount = 0,

                            resID=0,

                            taskID=0;

                       SPList taskList = web.GetListFromUrl(_TASK_LIST_URL),

                            resourcesList = web.GetListFromUrl(_RESOURCE_LIST_URL),

                            settingList=web.GetListFromUrl(_SET_RES_LIST_URL);

                       SPItem curResItem=null,

                           curTaskItem = null;

                       if (resAmounrtb.Text != String.Empty)

                       {

                            resAmount = Int32.Parse(resAmounrtb.Text);

                            getResourcebtn.Enabled = true;

                       }

                        Int32.TryParse(resourcesDDL.SelectedItem.Value, out resID);

                        Int32.TryParse(taskIDDropDL.SelectedItem.Value, out taskID);

                        bool checkStep = false;

                        try

                        {

                            curResItem = resourcesList.GetItemById(resID);

                            curTaskItem = taskList.GetItemById(taskID);

                            checkStep = true;



                        }

                        catch

                        {

                            Controls.Add(new LiteralControl("оставлено "));

                        }

                        if (checkStep)

                        {

                            int curAmount = 0;

                            Int32.TryParse(curResItem[_RESOURCE_LIST_AMOUNTFIELD].ToString(), out curAmount);

                            if (curAmount < resAmount && resourcesrbl.SelectedItem.Value != _SHOW_HUMANS

                                    && resourcesList.GetItemById(resID)[_RES_LIST_TYPERESFIELD].ToString() != _GET_HUMANS) Controls.Add(new LiteralControl("<script> alert('Нужное количество ресурса недоступно')</script>"));

                            else

                            {

                                if (resourcesrbl.SelectedItem.Value == _SHOW_HUMANS

                                    || resourcesList.GetItemById(resID)[_RES_LIST_TYPERESFIELD].ToString() == _GET_HUMANS)

                                {

                                    resAmount = 1;

                                    if (setResponsiblecb.Checked || curTaskItem[_TASK_LIST_RESPFIELD]==null)

                                    {

                                        int lookupID = 0;

                                        SPFieldLookupValue setResponsible;

                                        Int32.TryParse(resourcesDDL.SelectedItem.Value, out lookupID);

                                        if (lookupID != 0)

                                        {

                                            setResponsible = new SPFieldLookupValue(lookupID, resourcesDDL.SelectedItem.Text);

                                            curTaskItem[_TASK_LIST_RESPFIELD] = setResponsible;

                                            curTaskItem.Update();

                                        }

                                    }

                                }

                                else

                                {

                                    curResItem[_RESOURCE_LIST_AMOUNTFIELD] = curAmount - resAmount;

                                    curResItem.Update();

                                }

                                //Првоерка на архивное назначение

                                SPFieldLookupValueCollection curTaskRes = new SPFieldLookupValueCollection(curTaskItem[_TASK_LIST_RESOURCEFIELD].ToString());

                                curTaskRes.Add(new SPFieldLookupValue(resID, resourcesDDL.SelectedItem.Text));

                                curTaskItem[_TASK_LIST_RESOURCEFIELD] = curTaskRes;

                                curTaskItem.Update();

                                bool createItem = true;

                                foreach (SPListItem item in settingList.Items)

                                {

                                    SPFieldLookupValue setResID = new SPFieldLookupValue(item[_SET_LIST_RESIDFIELD].ToString()),

                                        setTaskID = new SPFieldLookupValue(item[_SET_LIST_TASKIDFIELD].ToString());

                                    bool checkArchivebool = false;

                                    if (item[_SETING_LIST_ARCHIVEFIELD] != null)

                                    {

                                        SPFieldBoolean checkArchive = item.Fields.GetField(_SETING_LIST_ARCHIVEFIELD) as SPFieldBoolean;

                                        checkArchivebool = (bool)checkArchive.GetFieldValue(item[_SETING_LIST_ARCHIVEFIELD].ToString());

                                    }

                                    if (setResID.LookupValue.ToString() == resID.ToString() && setTaskID.LookupValue.ToString() == taskID.ToString()&&!checkArchivebool)

                                    {

                                        if (resourcesList.GetItemById(resID)[_RES_LIST_TYPERESFIELD].ToString() != _GET_HUMANS)

                                        {

                                            int i = 0;

                                            Int32.TryParse(item[_SET_LIST_AMOUNTFIELD].ToString(), out i);

                                            i += resAmount;

                                            item[_SET_LIST_AMOUNTFIELD] = i;

                                            item.Update();

                                        }

                                        createItem = false;

                                    }

                                }

                                if (createItem)

                                {

                                    SPListItem setResItem = settingList.AddItem();

                                    setResItem[_SET_LIST_RESIDFIELD] = new SPFieldLookupValue(resID, resourcesDDL.SelectedItem.Text);

                                    setResItem[_SET_LIST_TASKIDFIELD] = new SPFieldLookupValue(taskID, taskIDDropDL.SelectedItem.Value);

                                    setResItem[_SET_LIST_AMOUNTFIELD] = resAmount;

                                    setResItem.Update();

                                }

                                resourceslb.Items.Clear();

                                GetResourceList();

                                Controls.Add(new LiteralControl("<script> alert('Ресурс успешно назначен')</script>"));

                            }

                        }

                    }

                }

                

            }

            catch(Exception ex)

            {

                throw new Exception(ex.Message);

            }



        }

Листинг Е.2. Метод автоматического освобождения ресурсов с задачи

        protected void autoFreebtn_Click(object sender, EventArgs e)

        {

            GenerateView();            

            try

            {

                using (SPSite site = new SPSite(_SITE_GUID))

                {

                    using (SPWeb web = site.OpenWeb(_WEB_GUID))

                    {

                        int taskID = 0;

                        SPList resourcesList = web.GetListFromUrl(_RESOURCE_LIST_URL),

                             settingList = web.GetListFromUrl(_SETTING_RES_LIST_URL);

                        Int32.TryParse(showTasksDDL.SelectedItem.Value.ToString(), out taskID);

                        if (showTasksDDL.SelectedItem.Text != _CHOICE_MENU_ITEM && showTasksDDL.SelectedItem.Text!=_NOT_FOUND)

                        {

                            foreach (SPListItem item in settingList.Items)

                            {

                                bool checkArchivebool = false;

                                if (item[_SETING_LIST_ARCHIVEFIELD] != null)

                                {

                                    SPFieldBoolean checkArchive = item.Fields.GetField(_SETING_LIST_ARCHIVEFIELD) as SPFieldBoolean;

                                    checkArchivebool = (bool)checkArchive.GetFieldValue(item[_SETING_LIST_ARCHIVEFIELD].ToString());

                                }

                                if (item[_SETTING_LIST_RES_ID] != null && item[_SETTING_LIST_TASK_ID] != null && !checkArchivebool)

                                {

                                    SPFieldLookupValue taskItemID = new SPFieldLookupValue(item[_SETTING_LIST_TASK_ID].ToString());

                                    SPFieldLookupValue resItemID = new SPFieldLookupValue(item[_SETTING_LIST_RES_ID].ToString());

                                    int tmpRes = 0,

                                        tmpTask = 0;

                                    Int32.TryParse(taskItemID.LookupValue, out tmpTask);

                                    Int32.TryParse(resItemID.LookupValue, out tmpRes);

                                    if (tmpTask == taskID && taskID != 0 && tmpRes != 0)

                                    {

                                        int freeAmount = 0,

                                            curAmount = 0;

                                        SPListItem curResItem = resourcesList.GetItemById(tmpRes);

                                        SPFieldBoolean check = curResItem.Fields.GetField(_RESOURCE_LIST_ENDINGRES_FIELD) as SPFieldBoolean;

                                        bool checkEnding=(bool)check.GetFieldValue(curResItem[_RESOURCE_LIST_ENDINGRES_FIELD].ToString());

                                        if (!checkEnding && curResItem[_RES_LIST_TYPERESFIELD] != null && curResItem[_RES_LIST_TYPERESFIELD].ToString()!=_GET_HUMANS)

                                        {

                                            Int32.TryParse(item[_SETING_LIST_AMOUNTFIELD].ToString(), out freeAmount);

                                            Int32.TryParse(curResItem[_RESOURCE_LIST_AMOUNTFIELD].ToString(), out curAmount);

                                            curAmount += freeAmount;

                                            curResItem[_RESOURCE_LIST_AMOUNTFIELD] = curAmount;

                                            curResItem.Update();

                                            item[_SETING_LIST_AMOUNTFIELD] = 0;

                                        }

                                        item[_SETING_LIST_ARCHIVEFIELD] = 1;

                                        item.Update();

                                    }

                                }

                            }

                            Controls.Add(new LiteralControl("<script>alert('ОПЕРАЦИЯ ВЫПОЛНЕНА')</script>"));

                        }

                        else Controls.Add(new LiteralControl("<script>alert('ВЫБЕРИТЕ ЗАДАЧУ ИЗ СПИСКА')</script>"));



                    }

                }

            }

            catch

            {

            }

        }

Листинг Е.3. Метод освобождения конкретного ресурса с задачи

        protected void freebtn_Click(object sender, EventArgs e)

        {

            GenerateWideView();

            try

            {

                using (SPSite site = new SPSite(_SITE_GUID))

                {

                    using (SPWeb web = site.OpenWeb(_WEB_GUID))

                    {

                        if (showResourcesDDL.SelectedItem.Text != _CHOICE_MENU_ITEM && showResourcesDDL.SelectedItem.Text != _NOT_FOUND)

                        {

                            SPList resourcesList = web.GetListFromUrl(_RESOURCE_LIST_URL),

                                settingList = web.GetListFromUrl(_SETTING_RES_LIST_URL);

                            int resID = 0,

                                curTaskID=0;

                            Int32.TryParse(showResourcesDDL.SelectedItem.Value, out resID);

                            Int32.TryParse(showTasksDDL.SelectedItem.Value, out curTaskID);

                            SPListItem curResItem = resourcesList.GetItemById(resID);

                            foreach (SPListItem item in settingList.Items)

                            {

                                int tmpUsinResID = 0,

                                    tmpTaskID = 0;

                                SPFieldLookupValue IDs = new SPFieldLookupValue();

                                if (item[_SETTING_LIST_TASK_ID] != null)

                                {

                                    IDs=new SPFieldLookupValue(item[_SETTING_LIST_TASK_ID].ToString());

                                    Int32.TryParse(IDs.LookupValue, out tmpTaskID);

                                }                                

                                if (item[_SETTING_LIST_RES_ID] != null)

                                {

                                    IDs = new SPFieldLookupValue(item[_SETTING_LIST_RES_ID].ToString());

                                    Int32.TryParse(IDs.LookupValue, out tmpUsinResID);

                                }

                                if (item[_SETING_LIST_AMOUNTFIELD] != null && tmpTaskID == curTaskID && tmpUsinResID == resID)

                                {

                                    int resAmount = 0,

                                        curFreeAmount = 0;

                                    Int32.TryParse(freeAmounttb.Text, out curFreeAmount);

                                    Int32.TryParse(item[_SETING_LIST_AMOUNTFIELD].ToString(), out resAmount);

                                    if (resAmount < curFreeAmount)

                                    {

                                        Controls.Add(new LiteralControl("<script>alert('ВВЕДЕННОЕ КОЛИЧЕСТВО БОЛЬШЕ ЗАНЯТОГО')</script>"));

                                    }

                                    else

                                    {

                                        if (curResItem[_RES_LIST_TYPERESFIELD].ToString() != _GET_HUMANS)

                                        {

                                            int commonAmount = 0;

                                            Int32.TryParse(curResItem[_RESOURCE_LIST_AMOUNTFIELD].ToString(), out commonAmount);

                                            commonAmount += curFreeAmount;

                                            resAmount -= curFreeAmount;

                                            curResItem[_RESOURCE_LIST_AMOUNTFIELD] = commonAmount;

                                            item[_SETING_LIST_AMOUNTFIELD] = resAmount;

                                            curResItem.Update();

                                            item.Update();

                                        }

                                        else

                                        {

                                            item[_SETING_LIST_ARCHIVEFIELD] = 1;

                                            item.Update();

                                        }

                                        Controls.Add(new LiteralControl("<script>alert('ОПЕРАЦИЯ ВЫПОЛНЕНА')</script>"));

                                    }

                                }

                            }

                        }

                        else Controls.Add(new LiteralControl("<script>alert('ВЫБЕРИТЕ РЕСУРС ИЗ СПИСКА')</script>"));

                    }

                }

            }

            catch

            {

            }

        }

Листинг Е.4. Метод закрытия заявки, связных задачи и формирования отчета

        protected void closeTasksbtn_Click(object sender, EventArgs e)

        {

            try

            {

                using (SPSite site=new SPSite(_SITE_ID))

                {

                    using (SPWeb web=site.OpenWeb(_WEB_ID))

                    {

                        SPList taskList = web.GetListFromUrl(_TASK_LIST_URL),

                            commonList = web.GetListFromUrl(_COMMON_LIST_URL);

                        int curReqID = 0,

                            curReqIDInTaskList=0;

                        bool alertCheck = false;

                        if (AppDDL.SelectedItem.Text != _CHOICE_MENU_ITEM && AppDDL.SelectedItem.Text != _NOT_FOUND)

                        {

                            Int32.TryParse(AppDDL.SelectedItem.Value, out curReqID);

                            if (curReqID != 0)

                            {

                                SPListItem reqItem = commonList.GetItemById(curReqID);

                                if (reqItem[_COMMON_LIST_REQID_FIELD].ToString() != String.Empty)

                                {

                                    SortedDictionary<int, string> commonSolution = new SortedDictionary<int, string>();

                                    Int32.TryParse(reqItem[_COMMON_LIST_REQID_FIELD].ToString(), out curReqIDInTaskList);

                                    bool check = true;

                                    foreach (SPListItem taskItem in taskList.Items)

                                    {

                                        bool checkSet = true;

                                        SPFieldLookupValue value=new SPFieldLookupValue(taskItem[_TASK_LIST_REQID_FIELD].ToString());

                                        int tmpReqID = ParseLookupID(value.LookupValue);

                                        if (tmpReqID == curReqIDInTaskList && taskItem[_TASK_LIST_CURRENTSTAGE_FIELD]!=null && taskItem[_TASK_LIST_CURRENTSTAGE_FIELD].ToString() != String.Empty

                                            && taskItem[_TASK_LIST_ORDER_FIELD]!=null && taskItem[_TASK_LIST_ORDER_FIELD].ToString() != String.Empty)

                                        {

                                            string stageField = taskItem[_TASK_LIST_CURRENTSTAGE_FIELD].ToString();

                                            if (stageField.Contains(_TASK_COMPLETE_STAGE_VALUE)&&check)

                                            {

                                                SPList setList=web.GetListFromUrl(_SETTING_LIST_URL);

                                                foreach (SPListItem setItem in setList.Items)

                                                {

                                                    

                                                    SPFieldLookupValue tmpTaskIDValue=null;

                                                    int tmpTaskID=0;

                                                    Int32.TryParse(taskItem["ID"].ToString(), out tmpTaskID);

                                                    if (setItem[_SETTING_LIST_TASKID_FIELD]!=null) tmpTaskIDValue=new SPFieldLookupValue(setItem[_SETTING_LIST_TASKID_FIELD].ToString());

                                                    int taskIDinSetList=ParseLookupID(tmpTaskIDValue.LookupValue);

                                                    if (tmpTaskID == taskIDinSetList)

                                                    {

                                                        bool checkArchiveSet=false;

                                                        if (setItem[_SETTING_LIST_ARCHIVE_FIELD]!=null)

                                                        {

                                                            SPFieldBoolean checkArchive = setItem.Fields.GetField(_SETTING_LIST_ARCHIVE_FIELD) as SPFieldBoolean;

                                                            checkArchiveSet = (bool)checkArchive.GetFieldValue(setItem[_SETTING_LIST_ARCHIVE_FIELD].ToString());

                                                        }

                                                        if (!checkArchiveSet)

                                                        {

                                                            checkSet = false;

                                                            break;

                                                        }

                                                    }

                                                }

                                                if (!checkSet)

                                                {

                                                    Controls.Add(new LiteralControl("<script>alert('Не все ресурсы по задачам освобождены. Закрытие заявки невозможно.')</script>"));

                                                    alertCheck = true;

                                                    check = true;

                                                    break;

                                                }

                                                else

                                                    {

                                                        int order = 0;

                                                        string solution="";

                                                        if (taskItem[_TASK_LIST_SOLUTION_FIELD]!=null) solution = taskItem[_TASK_LIST_SOLUTION_FIELD].ToString();

                                                        Int32.TryParse(taskItem[_TASK_LIST_ORDER_FIELD].ToString(), out order);

                                                        commonSolution.Add(order, solution);

                                                        taskItem[_TASK_LIST_ARCHIVE_FIELD] = 1;

                                                        taskItem.Update();

                                                    }

                                            }

                                            else

                                            {                                                

                                                check = false;

                                                break;

                                            }

                                        }

                                    }

                                    if (!check)

                                    {

                                        Controls.Add(new LiteralControl("<script>alert('Не все задачи по заявки закончены. Закрытие заявки невозможно.')</script>"));

                                        alertCheck = true;

                                    }

                                    else

                                    {

                                        /////////Заполнить в общий список по порядку задач решение, заархивировать задачи (если не все есурсы освобождены - сказать об этом) 

                                        string finalSolution = "";

                                        foreach (int key in commonSolution.Keys)

                                        {

                                            string tmpSol = key + " этап: " + commonSolution[key];

                                            finalSolution += tmpSol;

                                        }

                                        reqItem[_COMMON_LIST_SOLUTION_FIELD] = finalSolution;

                                        reqItem.Update();

                                        if (!alertCheck) Controls.Add(new LiteralControl("<script>alert('ОПЕРАЦИЯ ВЫПОЛНЕНА')</script>"));

                                    }

                                }

                            }

                        }

                        else Controls.Add(new LiteralControl("<script>alert('Выберите заявку в выпадающем списке')</script>")); 

                    }

                }

            }

            catch

            {

            }

        }