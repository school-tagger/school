Список терминов и сокращений

В работе встречаются следующие термины и сокращения, требующие разъяснения:

CRM – система управления взаимоотношениями с клиентами. В контексте данной работы - модуль системы технической поддержки, отвечающий за взаимодействие с пользователями.

WfMS – система управления потоками работ. В контексте данной работы - модуль системы технической поддержки, отвечающий за разработку решений по проблемам пользователей и назначение дежурных инженеров на задачи.

LMS – система управления обучением.

ИС – информационная система.

ARIS – методология проектирования бизнес-процессов.

Введение

В последнее время во многих предприятиях происходит внедрение различных информационных систем, обеспечивающих увеличение конкурентоспособности на рынке за счет роста эффективности работы персонала, его производительности. То есть, данные системы предназначены, в первую очередь, для улучшения рыночных показателей различных компаний.

Руководство пермского кампуса НИУ ВШЭ также всегда стремилось увеличить свои показатели, а именно - качество обучения студентов и работы преподавательского состава, предоставить им все возможности для комфортной деятельности в стенах университета. Именно поэтому происходит постоянное обновление технической аппаратуры кампусов, внедрение новых информационных систем, таких как LMS. Однако ряд проблем всё ещё остаётся актуальным для университета, и они могут быть решены путем внедрения новой информационной системы.

Дело в том, что многие студенты и сотрудники университета время от времени сталкивались с рядом технических проблем, например, трудности при установке и эксплуатации той или иной программы, нужной при работе или учебе. И зачастую, в решении таких проблем, они начинают искать тех, кто может им помочь, а это может занять много времени. 

Конечно, для удовлетворения потребностей в обслуживании кампусов, в каждом корпусе имеется инженерно-технический персонал. Однако заявки на проведение работ по техническому обслуживанию принимаются только от сотрудников университета. От студентов любых форм обучения заявки не принимаются, тем не менее, они поступают. Основными причинами отказа служат юридические и организационные факторы: личная форма собственности технических средств и нехватка времени для проведения работ. 

Таким образом, централизованный сервис технической поддержки является качественным решением данной проблемы. Рассматриваемый сервис технической поддержки разбивается на два модуля: CRM модуль, ответственный за прием и обработку заявок пользователей, и WfMS модуль, основными задачами которого являются разработка решения проблемы пользователя и назначение ресурсов на задачи.

В контексте данной работы будет рассмотрен CRM модуль приема и обработки заявок пользователей с их техническими проблемами в пределах НИУ ВШЭ - Пермь с целью создания единой системы технической поддержки для учащихся и преподавателей. 

Одной из основных задач данного модуля также является осуществление обратной связи с пользователями, то есть они имеют возможность оценивать работу системы и инженерно-технического персонала. Таким образом, пользователи способны оказывать влияние на развитие данной системы.

Следует отметить, что аналогов такой системы для работы с учащимися не существует как в НИУ ВШЭ - Пермь, так и в других университетах города. 

CRM модуль проектировался и создавался с оглядкой на то, что параллельно разрабатывается WfMS модуль, ответственный за разработку решения проблемы клиента, и данные системы не могут функционировать порознь.

Объектом исследования является организация работы CRM систем.

Предметом исследования являются функциональные возможности MS Sharepoint 2010 для создания CRM модуля приема и обработки заявок.

Целью работы является проектирование и разработка CRM модуля приема и обработки заявок сотрудников и учащихся НИУ ВШЭ - Пермь как части системы технической поддержки ВУЗа.

Для достижения цели должны быть решены следующие задачи:

Анализ предметной области, включающий изучение основных теоретических понятий, связанных с разрабатываемым программным продуктом.

Изучение функциональных возможностей MS SharePoint 2010.

Уточнение требований к CRM модулю приема и обработки заявок.

Описание компонентов модуля и создание его схемы данных.

Создание моделей "как есть" для текущего процесса оказания технического обслуживания и "как должно быть" для разрабатываемого модуля в нотации ARIS.

Написание технического задания к разрабатываемому модулю.

Разработка модуля с использованием инструментов платформы MS Sharepoint 2010.

Создание описания решения и его программных компонентов.

Создание экономического описания разработанного решения.




Глава 1. Основные сведения о разрабатываемой 

информационной системе

Основная задача данной работы заключается в создании CRM модуля приема и обработки заявок как части информационной системы технической поддержки НИУ ВШЭ - Пермь. В сервис технической поддержки также входит модуль WfMS, ответственный за создание решений по проблемам пользователей. Описание проектирования и разработки данного модуля представлено в работе «Управление потоками работ вычислительного центра ВУЗа» [1]. 

В результате исследования, проведенного в 2013 году в рамках курсовой работы факультета бизнес-информатики, было обнаружено, что больше 60% студентов постоянно сталкиваются с различными проблемами при работе с учебными программами, и, помимо этого, сотрудники ВУЗа регулярно оставляют заявки на проведение различных внеплановых работ по техническому обслуживанию.

Решением данной проблемы может быть создание веб-портала с системой технической поддержки, в рамках которого будут функционировать две подсистемы: CRM и WfMS. Веб-портал было решено создавать на платформе MS Sharepoint 2010, так как данная платформа является лидирующей в области создания различных корпоративных сайтов.

В первую очередь необходимо подробнее изучить основные теоретические понятия работы. Таким образом, для создания веб-портала CRM модуля сервиса технической поддержки НИУ ВШЭ - Пермь необходимо четко понимать, что из себя представляют информационные системы, CRM системы и веб-порталы, а также сопоставить данные понятия с разрабатываемой системой.

1.1 Взаимосвязь системы с информационными системами

Организации различных типов: большие и малые, частные и некоммерческие, стали полагаться на информационные системы, которые повсеместно используются в различных ежедневных операциях, а также в процессах планирования и принятия решений. Эффективное использование информационных технологий стало основным фактором успеха в современном обществе. Так, в контексте данной работы будет рассмотрена система технического обслуживания студентов и преподавателей НИУ ВШЭ - Пермь, способная решать их технические проблемы в режиме реального времени, что обеспечивает увеличение эффективности учебного и рабочего процесса.

Система технической поддержки НИУ ВШЭ - Пермь разбивается на два модуля, ответственных за выполнение определенных задач. К этим модулям относятся: CRM модуль, ответственный за работу с клиентами, и WfMS модуль, занимающийся разработкой решения технических проблем пользователя. В контексте данной работы будет рассмотрена часть проектирования и разработки CRM модуля.

В целом, процесс создания и развертывания информационной системы разбивается на количество четко определенных взаимосвязанных процессов. Они обычно включают в себя планирование, выявление требований, анализ, спецификацию, проектирование, внедрение, поддержку, техническое обслуживание и развитие информационной системы. Верификация и валидация, включая тестирование, также должны быть проведены параллельно с основными производственными процессами [2]. Некоторые из процессов жизненного цикла включают участие пользователей. Например, в случае данной работы, таким процессом будет являться прием заявок пользователей. 

Информационная система – это взаимосвязанная совокупность средств, методов и персонала, используемых для хранения, обработки и выдачи информации в интересах достижения поставленной цели [3]. 

Признаки такой системы:

Элементы системы взаимосвязаны и взаимодействуют в рамках системы.

Каждый элемент системы может в свою очередь рассматриваться как самостоятельная система, но он выполняет только часть функций системы.

Система как целое выполняет определенную функцию, которая не может быть сведена к функциям отдельно взятого элемента.

Подсистемы могут взаимодействовать как между собой, так и с внешней средой и изменять при этом свое содержание или внутреннее строение [4].

Исходя из данного определения, можно утверждать, что сервис технической поддержки НИУ ВШЭ - Пермь является информационной системой, отвечающей всем вышеупомянутым признакам. То есть система включает в себя две подсистемы (CRM и WfMS), каждая из которых решает свои задачи и может рассматриваться как самостоятельная система, но при этом они постоянно взаимодействуют, так, CRM модуль направляет формализованные заявки в WfMS, которая в свою очередь предоставляет в обратном направлении решения технической проблемы. Таким образом, для более глубокого анализа данной конкретной системы необходимо подробней рассмотреть понятие информационной системы.

Успешное применение ИС требует понимания бизнеса и его внешней среды. Например, чтобы построить ИС, которая поддерживает заключение сделок на Нью-Йоркской фондовой бирже, необходимо понять процедуры, связанные с покупкой и продажей акций, облигаций, опционов, и так далее, а также учитывать то, как все они связаны государственными законами. Так, для успешного внедрения такой системы в НИУ ВШЭ - Пермь необходимо четко понимать все бизнес-процессы, протекающие внутри университета.

Также необходимо понимать разницу между компьютерами и информационными системами. Компьютеры, оснащенные специализированными программными средствами, являются технической базой и инструментом для информационных систем. Информационная система, в свою очередь, немыслима без персонала, взаимодействующего с компьютерами и телекоммуникациями. Так и сервис технической поддержки НИУ ВШЭ - Пермь обязательно требует наличия дежурных инженеров, ответственных за разработку решений и их предоставление пользователям в некоторых случаях.

Информационная система может быть определена с двух точек зрения: одна из них касается её функций, а другая относится к ее структуре. С функциональной точки зрения; информационная система является технологически реализованным средством записи, хранения и распространения языковых выражений, а также для поддержки вывода решений. Со структурной точки зрения; информационная система состоит из набора людей, процессов, данных, моделей, технологий и частично формализованного языка, образуя сплоченную структуру, которая служит некоторым организационным целям или функциям [5]. 

Функциональное определение основывается на том, какие действия выполняют пользователи с информационной системой при ее использовании. Структурное определение дает понять, что ИС являются социально-технической системой, т.е. системой, состоящие из людей, правил поведения и схематических и технических рабочих продуктов.

Таким образом, с функциональной точки зрения, сервис технической поддержки НИУ ВШЭ - Пермь будет определен через бизнес-процессы, протекающие внутри него и всего университета, данные бизнес-процессы рассмотрены в соответствующей главе. Структуру данной системы с точки зрения части CRM также можно посмотреть в этой главе на диаграмме ARIS.

Информационная система может быть определена технически как набор взаимосвязанных компонентов, которые собирают (или получают), обрабатывают, хранят и распространяют информацию для поддержки принятия решений и контроля в организации [5]. В дополнение к поддержке принятия решений, координации и контролю, информационные системы могут также помочь руководителям и работникам анализировать проблемы, визуализировать сложные темы, а также создавать новые продукты.

Три операции в информационной системе производят информацию, которая необходима организациям для процессов принятия решений, управления, анализа проблем и создания новых продуктов или услуг. Этими операциями являются ввод данных, их обработка и вывод [3, 5, 6]. Блок ввода данных собирает исходные данные из организации или ее внешней среды. Блок обработки преобразует входную необработанную информацию в более значимую, содержательную форму. Блок вывода данных передает обработанную информацию людям, которые будут работать с ней, или другим операциям системы, в которых она будет использоваться. Информационные системы также требуют определенных операций по обеспечению обратной связи, предусматривающей вывод соответствующей информации о системе от пользователей к работникам компании с целью улучшения системы и устранения ошибок внутри неё. Взаимосвязь рассмотренных операций представлена на рисунке ниже:



Рисунок 1.1. Основные операции, протекающие в информационных системах

Все эти операции имеют место быть как для сервиса технической поддержки, так и отдельно для её CRM модуля. Рассмотрим вкратце выполнение данных операций внутри модуля. 

Ввод данных подразумевает прием заявки от пользователя, обработка подразумевает набор определенных действий в зависимости от типа заявки, вывод включает перенаправление заявки в WfMS модуль либо отправку решения проблемы, если похожая проблема была найдена в базе данных портала, обратная связь также позволяет связаться с клиентом после выполнения заявки для определения его уровня удовлетворенности сервисом. Подробнее данные операции рассмотрены в главе бизнес процессов.

Основные компоненты CRM модуля сервиса технической поддержки НИУ ВШЭ - Пермь представлены ниже:

Человеческие ресурсы: клиенты (студенты, преподаватели, сотрудники университета), дежурный инженер, ответственный за предоставление решения пользователю в случаях, когда этого требует решение проблемы.

Оборудование: физическое компьютерное оборудование, устройства связи, носители информации.

Программное обеспечение: необходимые для работы программы и процедуры.

Данные: внешняя база данных технических проблем и их решений.

Телекоммуникации: средства связи (веб-портал).

1.2 Взаимосвязь системы с веб-порталами

CRM модуль сервиса технической поддержки НИУ ВШЭ - Пермь представляет собой веб-портал, на котором пользователи могут оставлять заявки со своими техническими проблемами и следить за ходом их выполнения. 

Для более точного определения необходимо подробней остановиться на определении, типах и назначении веб-порталов.

Веб-портал для пользователей — сайт в компьютерной сети, который предоставляет пользователю различные интерактивные сервисы, которые работают в рамках этого сайта, такие как поиск информации, чаты, блоги, новостные ленты и т.д. Веб-портал может состоять из нескольких сайтов, если они объединены под одним доменным именем [7, 8]. 

Также порталы функционируют как точки доступа к информации в Интернете или сайты, которые помогают пользователям в поиске нужной информации через Интернет. Такие порталы представляют информацию из различных источников в единообразном виде, их также называют навигационными сайтами [8].

По специализации информации порталы разделяют на горизонтальные и вертикальные.

Горизонтальный портал — портал, охватывающий множество тематик, представляющий набор сервисов (обслуживающих, по возможности, все темы) и ориентирован на максимально широкую аудиторию, на максимальный охват ее интересов. Такие порталы, как правило, сочетают в себе разнообразные функции, предлагают разноплановый контент и различные сервисы (новостные, финансовые, развлекательные, игровые и т.д.).

Вертикальный портал — портал узкой тематической направленности, предоставляющий различные сервисы для пользователей сети по определенным интересам и ориентированный на полный охват тематики или области деятельности [7, 8]. 

По направленности на пользователя порталы разделяют на публичные и корпоративные.

Корпоративный портал — совокупность информационных систем и баз данных предприятия, организации или учреждения, представленных в сети Интернет. Корпоративный портал предоставляет сотрудникам компании (или её постоянным партнерам) строго персонифицированный вход в её автоматизированную систему управления (информационную систему подготовки принятия решений, экспертную систему, систему совместной работы, систему управления бизнес-процессами и т.д.) [7, 8].

Публичный портал — является диаметральной противоположностью корпоративного портала. Публичный портал предоставляет любому посетителю любую информацию и любые сервисы [7].

Таким образом, можно сказать, что веб-портал CRM модуля системы технической поддержки НИУ ВШЭ - Пермь будет являться корпоративным и вертикальным порталом, то есть он обладает узкой направленностью на техническое обслуживание пользователей и является точкой доступа лишь для учащихся и сотрудников университета. 

1.3 Взаимосвязь разрабатываемого модуля с CRM системами

Для корректного понимания процесса взаимодействия разрабатываемой системы с пользователями необходимо подробно рассмотреть назначение, особенности и принципы организации CRM систем.

В настоящее время не существует единого правильного определения CRM систем, более того, с постоянным развитием подобных систем границы их определения также растут. CRM можно рассматривать как с точки зрения непосредственно информационной системы, так и как процесс, стратегию развития компании или функциональный подход. Рассмотрим наиболее распространенные определения.

CRM – это процесс управления всеми видами взаимодействия компании со своими клиентами, включающий поиск новых клиентов, а также процессы продаж и обслуживания [9]. Приложения CRM предназначены для более глубокого понимания и улучшения взаимоотношений компаний с клиентами, объединив все возможные виды взаимодействия с клиентами воедино.

CRM является комплексным подходом к выявлению, привлечению и удержанию клиентов. Позволяя организациям управлять и координировать отношения с клиентами по нескольким каналам, департаментам и направлениям бизнеса. Таким образом, CRM, как подход к пониманию бизнеса, помогает организациям получить максимальную отдачу от работы с каждым клиентом и, тем самым, увеличить эффективность работы самой компании.

CRM система является интегрированной информационной системой, которая используется для планирования и контроля предпродажных и постпродажных операций в организации [9]. CRM охватывает все разновидности работы с потенциальными и реальными клиентами, включая работу телефонного информационного центра, специалистов по продажам, отдела маркетинга, технической поддержки, а также обслуживание клиентов на местах продаж [9]. Основной целью CRM систем является увеличение темпов роста компании в долгосрочной перспективе и её прибыльности за счет улучшения понимания поведения клиентов, максимизирую их уровень удовлетворенности [9].

Таким образом, центром каждой CRM системы являются клиенты, и основная цель внедрения подобного рода систем включает максимизацию уровня их удовлетворенности и приверженности услугами и продуктами компании [10]. Программные продукты CRM решений предоставляют все необходимые инструменты для автоматизации управления взаимодействием с клиентами. Однако следует понимать, что CRM система не является просто программой, ведь даже наиболее крупные системы являются лишь отдельными элементами в процессах, направленных на удержание старых клиентов и поиск новых.

Можно выделить ряд принципиально разных по назначению и функциональным возможностям CRM систем, однако в контексте данной работы будет рассмотрен лишь один тип, связанный с обслуживанием клиентов и являющийся непосредственным аналогом систем типа Service Desk. Данный тип является одним из видов операционных CRM систем, основной частью которых является взаимодействие с клиентами посредством веб-порталов, телефонных центров и т.д.  

Система обслуживания клиентов позволяет компаниям управлять операциями по обслуживанию, независимо от того, осуществляются ли они через телефонные информационные центры, контактные центры, посредством веб-портала или при личном контакте работника с клиентом. Такие CRM системы позволяют компаниям обрабатывать входящие и исходящие сообщения по предоставлению услуг по всем возможным каналам взаимодействия с клиентом. Данный тип систем позволяет компаниям увеличить эффективность работы за счёт снижения затрат на обслуживание, улучшение качества обслуживания, увеличения производительности труда и повышения удовлетворенности клиентов [11]. 

Телефонные информационные центры и веб-порталы являются первоочередными инструментами в предоставлении обслуживания клиента. Эти каналы взаимодействия позволяют определять проблемы клиента и пути их решения в режиме реального. 

В условиях работы с большим количеством технологического оборудования компании и технических проблем, связанных с его использованием, организация работы системы обслуживания является иной. Как правило, она включает в себя операции по определению и решению проблем, которые должны быть проведены по месту нахождения оборудования. В этих случаях, система обслуживания может предусматривать наличие сервисного специалиста, которому предоставляется информация о проблеме, руководство по ремонту и другая полезная информация по оборудованию [12]. 

Следовательно, служба технической поддержки позволяет сократить время простоя работы из-за технических проблем, не только обеспечивая их скорейшее решение, но и предоставляя информацию о них пользователям, что может значительно снизить вероятность наступления или повторения подобных проблем.

Таким образом, разрабатываемый CRM модуль должен осуществлять взаимодействие сотрудников компьютерного центра с пользователями (студентами и сотрудниками университета) при помощи веб-портала. На основе вышеупомянутых особенностей систем взаимодействия с клиентами, разрабатываемый CRM модуль системы технической поддержки НИУ ВШЭ  Пермь должен осуществлять следующие функции по работе с пользователями:

Сбор информации о технических проблемах пользователей через веб-портал.

Предоставление пользователям решений по их техническим проблемам.

Сбор информации об оценках пользователями работы системы для дальнейших улучшений в данной системе.

Подробнее данные задачи рассмотрены в главе с описанием бизнес-процессов, протекающих внутри системы.


Глава 2. Разработка CRM модуля приема и обработки заявок

2.1 Особенности разработки системы с точки зрения платформы 
MS Sharepoint 2010

Основная задача данной работы состоит в проектировании и разработке веб-портала CRM модуля системы технической поддержки НИУ ВШЭ - Пермь, поэтому важным аспектом работы является выбор средства разработки данного портала. В качестве такого средства был выбран инструмент MS Sharepoint 2010, который позволяет создавать корпоративные порталы и организовывать на них рабочие процессы различной сложности в зависимости от протекающих в системе бизнес-процессов.

В общем Microsoft Sharepoint 2010 может быть использован для создания сайтов, предоставляющих пользователям возможность для совместной работы. Создаваемые на платформе Sharepoint сайты могут быть использованы в качестве хранилища различной информации, документов, а также как вики страницы или блоги. 

2.1.1 Архитектура MS Sharepoint 2010

Иерархия решений на SharePoint выглядит следующим образом (см. рис. 2.1 [13]):



Рисунок 2.1. Иерархия решения в среде MS Sharepoint 2010

Ферма серверов – элемент верхнего уровня логической архитектуры. По размерам делятся на малые (2 веб-сервера и сервер баз данных), средние (2 веб-сервера, 2 сервера приложений и несколько серверов баз данных) и крупные. По топологии – одноуровневые (SharePoint и сервер баз данных на одном компьютере), двухуровневые (SharePoint и сервер баз данных на разных серверах) и трехуровневые (веб-серверы, серверы приложений и сервера баз данных на разных уровнях).

Веб-приложение – вебсайт служб IIS, который используется SharePoint.

Семейство сайтов – набор вебсайтов с одним владельцем и общими параметрами администрирования.

Сайт – одна или несколько связанных веб-страниц и других элементов, которые хранятся внутри семейства сайтов.

Список – предоставляют возможности удобного хранения необходимой информации, организации процессов документооборота внутри организации и т.д. Они являются основной частью платформы SharePoint.

Библиотека – частный вид списка для хранения документов [13]. 

Данная иерархия должна наблюдаться и для разрабатываемой системы технической поддержки.

2.1.2 Основные возможности MS Sharepoint 2010, полезные для создания CRM модуля 

Рассмотрим возможности Sharepoint 2010, которые используются для реализации CRM модуля системы технической поддержки университета.

Данная среда предоставляет возможности для решения следующих задач:

Автоматизация бизнес-процессов.

Совместная работа.

Дополнительные разработки.

Рассмотрим подробней то, как данные возможности Sharepoint 2010 могут помочь при реализации CRM модуля.





Автоматизация бизнес-процессов

В SharePoint автоматизация бизнес-процессов подразумевает создание так называемых рабочих процессов портала, которые создаются как автоматизированный набор действий и операций для участников заданного процесса.

Таким образом, Sharepoint 2010 предоставляет инструменты для автоматизации основных бизнес-процессов разрабатываемого CRM модуля, включающих, например, обработку заявок пользователей.

Совместная работа

При работе с заявкой пользователя может возникнуть потребность в совместной работе нескольких сотрудников компьютерного центра. При помощи инструментов SharePoint 2010 можно организовать одновременную работу нескольких пользователей с одним элементом портала. В случае разрабатываемого модуля, это может быть один элемент списка заявок портала.

Также Sharepoint 2010 предоставляет механизм разграничения прав доступа, позволяющий достичь максимальной эффективности при совместной работе. Помимо этого можно задавать права доступа не только на сайты, но также и на документы [13]. Таким образом, для разрабатываемого портала можно установить различные права доступа для дежурных инженеров компьютерного центра и для обычных пользователей системы.

Дополнительные разработки

Часть бизнес-процессов и интерфейса портала может быть реализована при помощи средства разработки MS Visual Studio. Решения, созданные с использованием данного инструмента, легко разворачиваются на портале в виде конструктивных элементов, таймеров, обработчиков событий, веб-частей и других. Эти элементы необходимы для автоматизации сложных бизнес-процессов, организации сбора данных с разных частей портала, а также для создания удобного пользовательского интерфейса.

2.1.3 Особенности разработки рассматриваемой системы

Основным элементом портала разрабатываемого CRM модуля являются списки Sharepoint, в один из которых пользователи могут добавлять описание своих технических проблем. Таким образом пользователи создают элемент списка, для которого затем автоматически запускается процесс обработки и формализации данной заявки. Обработка подразумевает определенный набор действий в зависимости от типа заявки. 

Интерфейс портала реализуется с помощью различного набора представлений списка заявок пользователей по его полям, а также с помощью веб-частей, необходимых для взаимодействия самого портала непосредственно с пользователем. Так, например, к представлениям списка заявок должны относиться:

Завершенные заявки.

Актуальные заявки.

Многоразовые заявки.

Заявки текущего пользователя.

Подробнее принцип работы портала рассмотрен в разделах описания компонентов модуля, бизнес-процессов, протекающих в нем, и требований к разрабатываемому программному продукту.

2.2 Описание бизнес-процессов CRM модуля 

В данной части работы будут рассмотрены основные бизнес-процессы протекающие в модуле приема и обработки заявок, а также его компоненты и агенты, взаимодействующие с ним и между собой. Для отображения данных бизнес-процессов были построены диаграммы в нотации ARIS. 

2.2.1 Модель технической поддержки «как есть»

Как уже было отмечено в начале работы, в НИУ ВШЭ - Пермь на сегодняшний момент существует определенный протокол действий по обеспечению технической поддержки студентов и сотрудников университета, который представлен на рисунке ниже:



Рисунок 2.2. Модель технического обслуживания «как есть»

Ни один из этапов технического обслуживания на сегодняшний момент не автоматизирован, все действия сотрудники компьютерного центра и пользователи услуги должны выполнять вручную. Более того, зачастую у сотрудников компьютерного центра нет времени, чтобы заниматься всеми техническими проблемами студентов, поэтому чаще всего они игнорируются. Также пользователям услуги зачастую сложно найти свободного инженера компьютерного центра. 

В результате, данный процесс занимает большое количество времени и, что более важно, далеко не всегда приводит к успешному результату. Поэтому, в данном случае, внедрение единой системы технической поддержки может значительно уменьшить время, требуемое для приема и обработки заявок пользователей, а также для поиска решений по ним.

Далее будет рассмотрена модель разрабатываемого CRM модуля приема и обработки заявок пользователей.

2.2.2 Основные компоненты разрабатываемого CRM модуля 

В первую очередь необходимо определить агентов системы. То есть это те, кто принимает непосредственное участие в работе системы приема и обработки заявок. Ниже приводится описание агентов системы и то, как они участвуют в работе системы:

Пользователь – студент или сотрудник НИУ ВШЭ - Пермь, направляющий заявку со своей проблемой системе.

Дежурный инженер – работник сервиса технической поддержки НИУ ВШЭ - Пермь, отвечающий за работу с клиентом. Его основной задачей в рамках рассматриваемого модуля является выявление дублирующих заявок и составление списка многоразовых заявок.

Эти агенты будут взаимодействовать с различными модулями системы в той или иной степени. 

Перед описанием бизнес-процессов необходимо также подробно рассмотреть сущность заявки, включая её состояния и типы.

Заявка может находиться в следующих состояниях:

Активная – по данной заявке выполняется работа.

Дублирующая – такая заявка уже есть в «активных», обработка по ней не ведется, но решение предоставляется её инициатору после того, как оно будет готово для другой такой же заявки.

Отмененная – пользователь сам решил проблему и отменил свою заявку, в данном случае она помещается в архив с пометкой «Отменено» для учета статистики.

Завершенная – работа по заявке завершена, решение по проблеме предоставлено пользователю, сама заявка помещается в архив портала.

Все заявки можно разделить на три следующих типа, обработка каждого из которых происходит по-разному:

Одноразовые – вводятся пользователем самостоятельно на соответствующей странице портала.

Многоразовые (постоянные) – заявки такого типа постоянно на протяжении определенного периода времени находятся в статусе актуальных, их описание, включая решение, заполняется дежурными инженерами на основе наиболее часто встречающихся проблем. Пользователи могут подписаться на выполнение такой заявки для себя, так, например, постоянной может быть заявка на установку определенного программного продукта, то есть пользователь добавляет своё имя в соответствующее поле данной заявки, после чего начинается работа по его проблеме. Это позволяет пользователю не вводить информацию о заявке, а лишь подписаться на её выполнение для себя, что экономит его время и время работы системы по обработке заявок.

Периодичные – набор заявок, которые необходимо выполнять с определенной периодичностью. Решение по таким заявкам подразумевает участие дежурного инженера, например, замена картриджей в принтере, либо отправку определенной информации, например, кодов активации какой-либо программы.

Основным внешним компонентом рассматриваемой системы является база данных, в которой хранятся все уникальных технические проблемы и их решения. Эта база данных не реализуется в контексте данной работы, однако в ней описан основной интерфейс взаимодействия рассматриваемых компонентов, что позволит в дальнейшем разработать необходимую базу данных.

Она связана с CRM модулем через общую папку в сети Интернет, представляющую собой библиотеку документов Sharepoint, куда из CRM модуля после добавления пользователем одноразовой заявки поступает текстовый файл с описанием проблемы пользователя, по которой в базе данных производится поиск возможного решения. Результаты поиска после этого отправляются в виде текстового файла в общую папку. При разработке нового решения WfMS модулем, данное решение вместе с соответствующей технической проблемой также заносятся в базу данных через интерфейс общей папки. 

Следует отметить, что файл для поиска возможного решения отправляется в базу данных лишь для одноразовых заявок, так как периодические и многоразовые заявки по своему определению подразумевают наличие какого-либо готового решения.

Таким образом, существует определенный формат передаваемых в общую папку файлов. Так, CRM модуль может передавать файлы следующего содержания:

"0|Идентификатор заявки|Описание технической проблемы".

"1|Описание технической проблемы пользователя|Решение технической проблемы пользователя|0 или 1".

Первая цифра определяет операцию, которую база данных должна будет выполнить. То есть, "0" подразумевает операцию поиска возможного решения по проблеме, а "1" - добавление новой записи в базу данных. При этом, в первом случае файл будет называться "Search" + "Идентификатор заявки", а во втором - "AddToDB" + "Идентификатор заявки". Во втором случае последним элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

База данных после проведения операции поиска возможного решения может передавать в общую файлы следующего содержания:

"Идентификатор заявки|1".

"Идентификатор заявки|0|0 или 1|Решение технической проблемы пользователя".

В данном случае, вторая цифра определяет, найдено ли какое-либо решение по заданной технической проблеме, "0" означает, что решение найдено, "1" - что оно не найдено. Во втором случае третьим элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

В контексте разрабатываемого CRM модуля приема и обработки заявок хранение и организация данных в самой системе осуществляются средствами списков MS Sharepoint. Таким образом, структура данных была спроектирована и нормализована до третьей нормальной формы, после чего все списки Sharepoint создавались на её основе. Структура данных представлена на рисунке ниже, красным цветом на ней выделены компоненты, относящиеся к CRM модулю:



Рисунок 2.3. Структура данных системы

Так, основным списком CRM модуля, в рамках которого происходит обработка пользовательских данных, является список заявок. Списки задач, ресурсов и назначений являются списками WfMS модуля, который не рассматривается в рамках данной работы и отвечает за разработку решений технических проблем пользователя. 

На рисунке ниже представлена укрупненная структура данных CRM модуля:



Рисунок 2.4. Укрупненная структура данных CRM модуля

Общий список модулей обеспечивает взаимодействие двух модулей системы технической поддержки. Так, модуль CRM помещает в него информацию о проблеме пользователя, а модуль WfMS отправляет в него решение заданной технической проблемы.

Архив заявок является одним из представления списка заявок, где отображаются все завершенные заявки пользователей. Таким образом, данное представление является синтетической сущностью. На схему данных было вынесено лишь это представление, так как его основной задачей является непосредственно работа с данными, а не организация пользовательского интерфейса, как в случаях с другими представлениями списка.

База данных заявок является отдельным компонентом CRM модуля, представляющим собой внешнюю базу данных, которая, как уже говорилось раньше, не разрабатывается в рамках данной работы. Она связана с CRM модулем через общую папку в сети Интернет, являющуюся библиотекой документов Sharepoint, поэтому на структуре данных она представляет собой таблицу без связи.

Для того, чтобы наглядно изобразить структуру разрабатываемой системы, была создана её схема, на которой отображены все компоненты и связи портала. Данная схема представлена на рисунке ниже:



Рисунок 2.5. Схема разрабатываемого портала

Так, из схемы видно, что конкретно к CRM модулю приема и обработки заявок относится список заявок и библиотека документов, представляющая собой общую папку в сети Интернет. При этом общий список модулей доступен обоим модулям системы и обеспечивает их взаимодействие. Внешняя база данных не входит напрямую в интерфейс портала, при этом она является внешним компонентом CRM модуля приема и обработки заявок. При этом программное расширение Sharepoint, обеспечивающее взаимодействие с базой данных, является обработчиком событий, созданным в среде Visual Studio на языке C#. Подробно разработанные компоненты системы рассмотрены в разделе 2.4 "Описание решения".

Рассмотренная информация по компонентам системы и типам заявок представлена на диаграмме прецедентов на рисунке ниже:



Рисунок 2.6. Диаграмма прецедентов

Диаграмма прецедентов вводилась с целью показать, что были учтены все возможные операции, происходящие на портале, а также чтобы систематизировать их последовательность выполнения. 

2.2.3 Описание бизнес-процессов CRM модуля

Рассмотрим основные бизнес-процессы модуля. Можно выделить четыре основных процесса, протекающих во время работы по каждой заявке:

Прием заявки – пользователь одним из способов, в зависимости от типа заявки, добавляет свою заявку с технической проблемой на веб-портал, где, с его разрешения, данная заявка может высвечиваться на главной странице до тех пор, пока не будет выполнена.

Подготовка решения по заявке – для одноразовых заявок производится поиск возможного решения в базе данных, если оно было найдено, то выполняется процесс предоставления решения пользователю, а если нет либо если заявка является новой периодической или восстановленной пользователем, то она перенаправляется в модуль WfMS для разработки нового решения.

Предоставление решения пользователю – пользователю высылается уведомление о том, что по его заявке было подготовлено решение, после чего он должен указать, помогло ли ему данное решение и если нет, то процесс подготовки решения выполняется заново.

Завершение работы по заявке – если заявка является одноразовой, то её решение фиксируется во внешней базе данных CRM модуля для дальнейшего возможного использования. Все заявки при этом помещается в архив портала, также клиенту предлагается оценить работу системы обслуживания. Если заявка клиента была размещена на главной странице портала, то она удаляется.

Бизнес-процессы модуля приема и обработки заявок можно посмотреть на диаграммах в нотации ARIS в приложении А. На рисунке А.1 в приложении А представлен процесс работы системы по одной заявке, включающий различные входные и выходные параметры, а также различных агентов, участвующих в процессе работы CRM модуля.

Данный уровень диаграммы включает основные бизнес-процессы, описанные ранее, то есть, прием заявки, подготовку решения по ней, предоставление решения пользователю и завершение работы по заявке. Для каждого из этих процессов предусмотрена более глубокая детализация. Процесс работы WfMS модуля не конкретизируется, так как принципы его действия рассмотрены в другой работе.

Рассмотрим детально основные процессы, описанные в системе.

Прием заявки (см. рис. А.2 в приложении А).

Входными данными для данного процесса служит техническая проблема пользователя, выходными – полученная от него заявка. По своему характеру заявки делятся на три типа, описанные ранее - одноразовые, многоразовые и периодические. Для каждого типа заявки существуют различные механизмы добавления технической проблемы на портал. 

Так, для одноразовых заявок, пользователь должен заполнить все поля элемента списка, включая краткое наименование и описание проблемы, пользователь также может отметить данную заявку как периодическую, это означает, что впоследствии работы по данной заявке будут выполняться для пользователя с определенной периодичностью. В случае, если добавленная заявка уже есть в списке "актуальных", среди находящихся на выполнении, то заявка пользователя помечается как "дублирующая" и направляется в архив, а ему самому приходит сообщение с объяснением ситуации и ссылкой на идентичную заявку. Проверку на идентичность осуществляют дежурные инженеры компьютерного центра, данный процесс не автоматизируется в рамках рассматриваемого модуля. 

Также может возникнуть ситуация, когда пользователь заново столкнулся с определенной технической проблемой, то есть проблема повторилась через какой-то промежуток времени, это означает, что ранее разработанное решение по проблеме оказалось неверным.  В данном случае пользователь восстанавливает свою старую заявку на соответствующей странице, после чего система начинает разработку нового решения для неё.

В случае многоразовых заявок пользователь подписывается на выполнение для него выбранной заявки на соответствующей странице. Многоразовые заявки добавляются дежурными инженерами системы на основании информации о наиболее часто встречающихся проблемах. В них описывается определенная проблема и её решение, таким образом пользователи, столкнувшиеся с данной проблемой, могут добавить себя в соответствующее поле заявки, что будет означать, что им будет выслано решение либо для них будут выполнены определенные работы по данной заявке.

Все периодические заявки выполняются в соответствии с временным промежутком, указанным пользователем (день, неделя, месяц, квартал, полугодие).

Пользователь также может дать согласие на то, чтобы его заявка размещалась на главной странице веб-портала сервиса технической поддержки. Это нужно, чтобы остальные пользователи могли видеть актуальные проблемы и то, как быстро заявки выполняются и на какой стадии выполнения они находится, то есть, это может способствовать контролю работы дежурных инженеров WfMS модуля. 





Подготовка решения по заявке (см. рис. А.3 в приложении А).

Входными данными является полученная заявка пользователя либо заявка, предыдущее решение по которой не помогло пользователю решить его проблему, выходными – возможное решение технической проблемы пользователя. 

В случае одноразовых заявок данный процесс включает получение информации о технической проблеме пользователя из соответствующей заявки, которая впоследствии добавляется в текстовый файл и отправляется в общую папку, к которой также имеет доступ внешняя база данных всех уникальных технических проблем и их решений. В базе данных организуется поиск по заданной проблеме и, если он успешен, формируется файл с возможным решением, которое высылается пользователю. В данном случае, если решение требует участия дежурного инженера, то отправляется уведомление в WfMS модуль для назначения инженера на задачу. Интерфейс взаимодействия с базой данных более подробно был описан ранее в разделе описания компонентов модуля.

Если в процессе поиска в базе данных похожих проблем не было найдено, то заявка перенаправляется в WfMS модуль для разработки нового решения. 

Также в том случае, когда заявка была восстановлена пользователем, потому что предыдущее решение ему не помогло, либо была добавлена новая периодическая заявка, не выполняется поиск в базе данных, заявка сразу же направляется в WfMS модуль для разработки нового решения. 

Предоставление решения (см. рис. А.4 в приложении А).

Входными данными является возможное решение заявки пользователя, выходными – уведомление от пользователя о том, помогло ли ему данное решение или нет. 

В данном случае пользователю высылается уведомление о том, что по его заявке было подготовлено решение. Если решение не требует участия дежурного инженера, то оно высылается пользователю, а если участие требуется, то в модуль WfMS отправляется уведомление о выделении дежурного инженера на задачу. После этого пользователь должен указать помогло ли ему данное решение, если нет, то заявка вновь пересылается в WfMS модуль для разработки нового решения, если да, то выполняется процесс завершения работы по заявке.

Завершение работы по заявке (см. рис. А.5 в приложении А).

Входными данными является решенная заявка пользователя, выходными – завершение работы системы по заявке. 

В том случае, если заявка является одноразовой и для её решения был задействован WfMS модуль, то по информации из заявки формируется текстовый файл, который отправляется в базу данных, куда заносятся данные о технической проблеме и её решении. При этом все заявки помещается в архив портала. Также пользователю отправляется запрос с целью проведения оценки качества работы системы, после чего он сам решает, оценивать её или нет. Последнее, что делает модуль в ходе работы с одним клиентом - удаляет данные о его заявке с главной страницы веб-портала, если он давал согласие на её размещение там.

Также следует отметить, что пользователь в любой момент может отменить свою заявку, если сам справился с проблемой либо если он хочет прекратить периодические работы по ней. В данном случае, если заявка является периодической, то она помещается в архив с пометкой "отменено пользователем", работа системы по отмененной заявке прекращается.

Помимо основных бизнес-процессов системы также необходимо рассмотреть вспомогательные процессы, обеспечивающие работу отдельных частей системы. 

Так, вспомогательный процесс, представленный на рисунке А.6 в приложении А, отражает последовательность действий при создании многоразовых заявок. Пользуясь информацией, получаемой из архива портала, дежурные инженеры выявляют наиболее часто встречающиеся технические проблемы, после чего, на основании данной информации, они создают многоразовые заявки, на выполнение которых может подписаться любой пользователь.

Таким образом, была рассмотрена модель модуля приема и обработки заявок пользователей, разработанная в нотации ARIS. 

2.3 Основные требования к модулю приема и обработки заявок 

В данной главе рассмотрены основные требования к разрабатываемому модулю и его ключевые особенностям. Информация, представленная в рассматриваемой главе, является частью технического задания, в полном объеме представленном в Приложении Б.

Применение CRM модуля осуществляется для автоматизации процессов взаимодействия между работниками компьютерного центра со студентами и сотрудниками университета. Данный модуль является частью системы технической поддержки университета, которая также включает модуль разработки решений по техническим проблемам пользователей, описание которого представлено в работе «Управление потоками работ вычислительного центра ВУЗа».

Система представляет собой веб-портал, созданный в среде MS Sharepoint 2010. Модуль предназначен для автоматизации получения и обработки заявок пользователей с их техническими проблемами. Пользователями данной системы являются студенты и сотрудники НИУ ВШЭ - Пермь.

Для осуществления взаимодействия CRM и WfMS модулей системы технической поддержки НИУ ВШЭ - Пермь, необходимо, чтобы они были реализованы в пределах одной фермы MS Sharepoint 2010 с использованием программных доработок на языках С# и Javascript. 

Взаимодействие CRM и WfMS модулей осуществляется через общий список, куда первый модуль заносит данные о проблеме, а второй - о конечном решении технической проблемы. 

Одним из компонентов модуля CRM является внешняя база данных, в которой хранится информация о всех уникальных технических проблемах и их решениях. Она необходима для быстрого поиска информации о возможном решении текущей проблемы пользователя. Взаимодействие данных компонентов осуществляется через общую папку в сети Интернет, представляющую собой библиотеку документов Sharepoint. 

В данную папку из CRM модуля после добавления пользователем одноразовой заявки поступает текстовый файл с описанием проблемы пользователя, по которой в базе данных будет производиться поиск возможного решения. Результаты поиска после этого отправляются в виде текстового файла в общую папку. При разработке нового решения WfMS модулем, данное решение вместе с соответствующей технической проблемой также заносятся в базу данных через интерфейс общей папки. 

Файл для поиска возможного решения отправляется в базу данных лишь для одноразовых заявок, так как периодические и многоразовые заявки по своему определению подразумевают наличие какого-либо готового решения.

Существует определенный формат передаваемых в общую папку файлов. Так, CRM модуль должен передавать файлы следующего содержания:

"0|Идентификатор заявки|Описание технической проблемы".

"1|Описание технической проблемы пользователя|Решение технической проблемы пользователя|0 или 1".

Первая цифра определяет операцию, которую база данных должна будет выполнить. То есть, "0" подразумевает операцию поиска возможного решения по проблеме, а "1" - добавление новой записи в базу данных. При этом, в первом случае файл будет называться "Search" + "Идентификатор заявки", а во втором - "AddToDB" + "Идентификатор заявки". Во втором случае последним элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

База данных после проведения операции поиска возможного решения должна передавать в общую файлы следующего содержания:

"Идентификатор заявки|1".

"Идентификатор заявки|0|0 или 1|Решение технической проблемы пользователя".

В данном случае, вторая цифра определяет, найдено ли какое-либо решение по заданной технической проблеме, "0" означает, что решение найдено, "1" - что оно не найдено. Во втором случае третьим элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

Разрабатываемый модуль системы должен включать в себя реализацию следующих функций:

Аутентификация должна производиться средствами Active Directory операционной системы.

На портале должен быть создан список заявок со следующим набором представлений: актуальные заявки, многоразовые заявки, заявки текущего пользователя, завершенные заявки. 

На главной странице портала пользователь должен иметь возможность посмотреть список актуальных на данный момент заявок, а также информацию по каждой проблеме в выбранной им заявке.

На портале должны быть предусмотрены механизмы обработки различных типов заявок: одноразовых (вводятся пользователем единовременно и выполняются для него один раз), периодические (подразумевают выполнение определенной задачи для пользователя с заданной периодичностью), многоразовые (создаются дежурными инженерами, несколько пользователей могут подписаться на выполнение таких заявок для себя).

На главной странице портала пользователю должен быть доступен список многоразовых заявок, где пользователь может подписаться на выполнение для него выбранной заявки. Готовое решение должно быть выслано пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер.

В случае если заявка пользователя является периодической, то она должна выполняться с определенной периодичностью. Готовое решение должно быть выслано пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер.

В случае, если ранее решенная техническая проблема пользователя вновь появилась у него, он должен иметь возможность поставить нужную завершенную заявку на выполнение в представлении «Заявки текущего пользователя». В данном случае заявка должна быть перенаправлена в модуль WfMS для разработки нового решения.

На главной странице портала пользователь должен иметь возможность перейти к представлению «Заявки текущего пользователя» для регистрации своей проблемы, в данном представлении пользователь должен иметь возможность создавать элемент с описанием его текущей проблемы, указывая при этом краткое наименование проблемы, её описание, а также будет ли его заявка отображаться на главной странице портала как актуальная на данный момент. Помимо этого пользователь может поставить для заявки маркер периодической, добавив информацию о том, с какой периодичностью для него необходимо выполнять данную заявку (ежедневная, еженедельная, ежемесячная, ежеквартальная, полугодовая, годичная).

После добавления одноразовой заявки на портал система должна формировать файл с описанием технической проблемы пользователя и отправлять его в общую папку, которая является интерфейсом взаимодействия с базой данных, где производится поиск решений по заданной проблеме. В обратном направлении из базы данных в общую папку отправляется файл с результатами поиска. Если решение найдено в базе данных, то оно высылается пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер. Если найденное решение не помогло пользователю решить его техническую проблему либо никаких решений не было найдено, то модуль CRM запускает триггер (изменение поля элемента общего списка систем), по которому начинает свою работу WfMS модуль, ответственный за разработку решения. Описание данной системы представлено в работе «Управление потоками работ вычислительного центра ВУЗа». 

В результате работы WfMS модуля в общий список модулей системы добавляется решение текущей проблемы пользователя, которое впоследствии высылается пользователю. 

На форме с высылаемым пользователю решением должны быть реализованы кнопки "Решение помогло" и "Решение не помогло", при нажатии на первую кнопку работа по заявке завершается, при нажатии на вторую - заявка вновь пересылается в WfMS модуль для разработки нового решения. Помимо этого, форма должна содержать поле, куда пользователь при желании может написать свое впечатление о работе с системой.

 Для одноразовых заявок, решение по которым было получено из WfMS модуля, разработанное решение вместе с описанием проблемы пересылается в общую папку, к которой имеет доступ база данных, куда данное решение впоследствии заносится.

В любой момент времени пользователь должен иметь возможность остановить работу по своей заявке по нажатии на соответствующую кнопку. При этом работа системы по ней прекращается, а сама заявка помещается в список архива с пометкой «Отменено пользователем».

2.4 Описание созданного решения

На основе построенных бизнес-процессов и структуры данных был создан портал в среде MS Sharepoint 2010, включающий в себя два списка и их представления, библиотеку документов, набор рабочих процессов Sharepoint, а также обработчики событий, веб-часть и таймер, созданные в среде Visual Studio на языке C#. Исходный код данных программных доработок можно посмотреть в Приложении В.

Следующее описание решения может быть использовано в дальнейшем как руководство для разработчиков и пользователей системы.

Для работы с заявками пользователей на портале были созданы два списка: список заявок, где хранится информация обо всех текущих и завершенных заявках, и общий список модулей системы, который обеспечивает связь модулей системы технической поддержки.

Таким образом, в списке заявок хранится вся информация о текущих и завершенных заявках пользователей. К полям списка относятся:

id – поле, недоступное для пользователей, содержит идентификатор заявки.

Наименование проблемы – внутреннее имя "Title", краткое наименование технической проблемы пользователя.

Описание решений – внутреннее имя "ProblemDescription", описание технической проблемы пользователя.

Решение – внутреннее имя "Solution", описание решения по технической проблеме пользователя.

Тип заявки – внутреннее имя "RequestType", тип заявки пользователя - многоразовая, одноразовая или периодическая.

Период выполнения заявки – внутреннее имя "Period", период, с которым периодическая заявка должна выполняться для пользователя.

PeriodDate – поле, недоступное для пользователей, содержит дату начала работ по периодическим заявкам.

Статус заявки – внутреннее имя "RequestStatus", общий статус заявки - актуальная, завершенная или отмененная.

Текущий статус – внутреннее имя "CurrentStatus", текущее статус работы по заявке.

Подписка на заявку – внутреннее имя "RequestFrom", имя пользователя, для которого заявка выполняется.

RequestFromConstant – поле, недоступное для пользователей, содержит имя пользователя, для которого должна выполняться многоразовая заявка, необходимо для корректной обработки многоразовых заявок.

На главную страницу – внутреннее имя "AddAtHome", поле условного типа, показывает нужно ли отображать заявку пользователя на главной странице или нет.

Обратная связь – внутреннее имя "Feedback", комментарий пользователя о работе системы по его заявке.

Статус решения – внутреннее имя "SolvedUserReaction", показывает статус текущего решения по заявке: в разработке, помогло пользователю или не помогло пользователю.

Отменить заявку – внутреннее имя "Cancel", поле условного типа, показывает нужно ли отменить выбранную заявку или нет.

SendNotificationToUser – поле условного типа, недоступное для пользователей, показывает нужно ли отправлять пользователю уведомление о том, что по его заявке было подготовлено решение.

ProblemSolved – поле условного типа, недоступное для пользователей, показывает решена техническая проблема пользователя или нет.

NeedWorker – поле условного типа, недоступное для пользователей, показывает требуется ли участие дежурного инженера для предоставления решения по заявке пользователю.

sendToWfms – поле условного типа, недоступное для пользователей, показывает нужно ли перенаправить заявку в WfMS модуль для разработки нового решения или выделения дежурного инженера для предоставления решения пользователю.

sendToExchange – поле условного типа, недоступное для пользователей, показывает нужно ли отправлять файл в общую с базой данных папку.

Для данного списка созданы настраиваемые формы добавления, редактирования и просмотра, в которых, в зависимости от типа текущего пользователя, ряд полей недоступны либо доступны только для просмотра. Так, все дежурные инженеры компьютерного центра на портале должны быть добавлены в группу “Help Desk”, а студенты и сотрудники ВУЗа – в группу “Common Users”.

Также для данного списка были созданы следующие представления:

Заявки текущего пользователя - все заявки, поле "Подписка" которых соответствуют имени текущего пользователя портала.

Многоразовые заявки - все заявки, поле "Тип" которых принимает значение "Многоразовые", и поле "Подписка" не содержит данных.

Актуальные заявки - все заявки, находящиеся в статусе "Актуальная", и для которых поле "На главную страницу" принимает значение "true".

Завершенные заявки - все заявки, для которых поле "ProblemSolved" принимает значение "true".

В общем списке модулей хранится информация о заявках, которые находятся в обработке WfMS модуля. К полям списка относятся:

Идентификатор заявки – внутреннее имя "request_id", идентификатор заявки из списка заявок.

Заявка – внутреннее имя "Request", поле подстановки, по нажатии на которое откроется соответствующая заявка.

Описание проблемы – внутреннее имя "ProblemDescription", описание технической проблемы пользователя.

Решение – внутреннее имя "Solution", описание решения по технической проблеме пользователя.

Решение подготовлено – внутреннее имя "SolutionPrepared", поле условного типа, показывает завершена ли работа WfMS модуля по данной заявке.

Требуется инженер – внутреннее имя "NeedWorker", поле условного типа, показывает требуется ли участие дежурного инженера для предоставления решения по данной заявке пользователю.

Для данного списка никаких представлений не предусмотрено.

Разработанный CRM модуль приема и обработки заявок представляет собой набор отдельных подсистем с настроенными библиотеками, списками и рабочими процессами Sharepoint для организации процесса сбора и обработки информации по заявкам пользователей.  Общая структура и взаимосвязь подсистем модуля схематично отображены на рисунке ниже:



Рисунок 2.6. Общая структура и взаимосвязь подсистем Сервиса

Подсистема добавления заявок представляет собой рабочий процесс Sharepoint, в котором выставляются все начальные значения столбцов списка заявок. Подсистема предназначена для того, чтобы исключить ошибки пользователей при вводе информации, а также, чтобы процесс обработки данных проходил в правильном порядке и без ошибок.

Подсистема обработки заявок представляет собой набор рабочих процессов Sharepoint, а также обработчиков событий и таймера, созданных в среде Visual Studio на языке C#. В совокупности они позволяют организовать процесс обработки заявок различных типов.

Подсистема хранения заявок представляет собой набор настраиваемых списков SharePoint и их представлений, необходимых для хранения и предоставления информации обо всех заявках пользователей.

Подсистема отправки уведомлений пользователям представляет собой рабочий процесс Sharepoint, предназначенный для отправки пользователю уведомлений на портале и по электронной почте о том, что по его заявке было подготовлено решение. Пользователю также высылается ссылка на форму, где по нажатию на соответствующую кнопку пользователь указывает, помогло ли ему данное решение или нет. Помимо этого, пользователь может добавить на форме свой комментарий о работе системы.

Подсистема перенаправления пользователей представляет собой набор пользовательских форм и настраиваемую веб-часть, созданную в среде Visual Studio на языке C#. Данная веб-часть находится на стандартных формах создания и редактирования элементов. Она осуществляет проверку, является ли текущий пользователь дежурным инженером, и, в зависимости от результата, перенаправляет его на соответствующую форму.

Интерфейс взаимодействия модуля CRM с базой данных представляет собой библиотеку документов, представляющую собой общую папку, и набор обработчиков событий, созданных в среде Visual Studio на языке C#. Данный интерфейс позволяет автоматически создавать файлы с описанием технической проблемы или полной информацией по заявке и отправлять их в общую папку, также интерфейс подразумевает обработку поступающих из базы данных в общую папку файлов. Формат файлов описан в техническом задании к разрабатываемому модулю в Приложении Б.

Интерфейс взаимодействия модуля CRM с модулем WfMS представляет собой общий список данных модулей, включащий набор рабочих процессов Sharepoint и обработчиков событий, созданных в среде Visual Studio на языке C#, которые в совокупности позволяют на разных этапах обработки заявки, в зависимости от её текущего состояния, создавать элемент в данном списке, что само по себе является триггером для начала работы WfMS модуля. 

Подсистемы модуля состоят из набора компонент, взаимодействующих между собой. Схема взаимодействия компонентов данных подсистем представлена на рисунке ниже:

Рисунок 2.7. Схема взаимодействия компонентов подсистем модуля



В таблице ниже представлено описание разработанных компонентов подсистем модуля:

Таблица 2.1. Описание компонентов подсистем модуля

Далее рассмотрен процесс работы пользователей на портале.

В первую очередь необходимо отметить, что на портале были созданы две группы пользователей: обычные пользователи системы (студенты и сотрудники НИУ ВШЭ - Пермь) и дежурные инженеры компьютерного центра. Так, все дежурные инженеры компьютерного центра на портале должны быть добавлены в группу “Help Desk”, а студенты и сотрудники ВУЗа – в группу “Common Users”. Для каждой из этих групп существуют свои ограничения при работе с заявками, поэтому для них были созданы разные формы редактирования и добавления заявок. Так, обычные пользователи не могут напрямую указывать тип заявки, это сделано для того, чтобы исключить возможность создания ими многоразовых заявок. Таким образом, каждая создаваемая ими заявка изначально будет считаться одноразовой, но если при этом пользователь укажет период выполнения работ по ней, то она уже будет являться периодической. Помимо этого, дежурным инженерам, в отличие от обычных пользователей, доступны поля решения технической проблемы и статуса, где они могут указать, что выбранная заявка является дублирующей, но при этом они не могут редактировать поля периода выполнения заявки и обратной связи.

На рисунке ниже представлены формы добавления заявки для обоих видов пользователей системы, для дежурных инженеров - слева, для обычных пользователей - справа:



	(а)       	(б)                       

Рисунок 2.8. Формы добавления заявок для разных типов пользователей: (а) – для дежурных инженеров, (б) – для обычных пользователей.

На рисунке ниже представлены формы редактирования заявки для обоих видов пользователей системы, для дежурных инженеров - слева, для обычных пользователей - справа:



	(а)       	(б)                       

Рисунок 2.9. Формы редактирования заявок для разных типов пользователей: (а) – для дежурных инженеров, (б) – для обычных пользователей.

Таким образом, дежурным инженерам, в отличие от обычных пользователей, на формах создания и редактирования заявок доступны все основные поля созданного списка.

Далее рассмотрен процесс работы студентов и сотрудников НИУ ВШЭ - Пермь на портале с учетом различных типов заявок.

На главной странице портала пользователю доступны представления "Многоразовые заявки", где он может подписаться на выбранную заявку, и "Актуальные заявки", где он может посмотреть все текущие заявки, их описание и стадии выполнения. Помимо этого, в левой части экрана пользователю доступна ссылка на представление "Мои заявки", где он может посмотреть все свои завершенные и текущие заявки, а также добавить новые. Скриншот главной страницы портала представлен на рисунке ниже:



Рисунок 2.10. Главная страница портала

Так, если пользователь нашел интересующую его техническую проблему в представлении многоразовых заявок на главной странице портала, то он должен выбрать соответствующий элемент и открыть его на редактирование, после чего в поле "Подписка" он может добавить свое имя (Рис. 2.11), тем самым запустив данную заявку на выполнение для себя. 



Рисунок 2.11. Форма редактирования, подписка на многоразовую заявку

После того, как пользователь подписался на многоразовую заявку, модуль автоматически определяет, требуется ли для выполнения решения по ней участие дежурного инженера и если да, то заявка перенаправляется в общий список модулей для выделения сотрудника на задачу (Рис. 2.12). 



Рисунок 2.12. Общий список модулей

Если участие не требуется либо дежурный инженер выполнил поставленную задачу, то пользователю высылается форма с описанием решения, где по нажатию на соответствующую кнопку он должен указать помогло ли ему данное решение или нет. Помимо этого он может оставить свой комментарий о работе системы в соответствующем поле. Данная форма представлена на рисунке ниже:



Рисунок 2.13. Форма уведомления о решении

При нажатии на кнопку "Решение помогло" работа по заявке завершается, и она помещается в архив портала, при нажатии на кнопку "Решение не помогло" заявка вновь перенаправляется в общий список модулей системы для разработки нового решения.

У пользователя есть возможность перейти к представлению «Мои заявки» в меню слева, в данном представлении он может посмотреть список всех своих заявок, а также добавить новые. Скриншот представления можно увидеть ниже:

 Рисунок 2.14. Представление «Мои заявки»

Создавая новую заявку, пользователь должен указать поля наименования и описания проблемы, а также период её выполнения для периодических заявок, помимо этого он может указать, что его заявка может быть добавлена в список актуальных на главной странице. Форма добавления заявки представлена на рисунке ниже:



Рисунок 2.15. Создание новой одноразовой заявки

После добавления одноразовой заявки формируется файл с описанием технической проблемы. Он отправляется в общую папку с базой данных для поиска возможного решения по проблеме. Формат пересылаемых файлов описан в техническом задании к разрабатываемому модулю в Приложении Б. Как только из базы данных приходит файл с результатом поиска, модуль автоматически обрабатывает его и, если решение было найдено, то оно отправляется пользователю с использованием того же механизма, что был описан ранее для многоразовых заявок (Рис. 2.13). Помимо этого, если найденное решение требует участия дежурного инженера, то в WfMS модуль отправляется уведомление для выделения его на задачу. 

Если решение не было найдено, либо оно не помогло пользователю решить проблему, то в общем списке модулей системы создается элемент с описанием проблемы для разработки решения по нему.

После того, как решение будет подготовлено, оно будет выслано пользователю с использованием формы, описанной ранее и представленной на рисунке 2.13. После того, как пользователь указал, что проблема решена, автоматически создается файл с описанием проблемы и решения, который отправляется в общую папку для последующего занесения в базу данных.

При добавлении заявки пользователь может обозначить её как периодическую, при этом выбрав период её выполнения (рис 2.16): 



Рисунок 2.16. Добавление периодической заявки

В данном случае заявка будет перенаправлена в общий список модулей, где по ней будет подготовлено решение и выслано пользователю. Впоследствии работа по данной заявке будет выполняться с заданной пользователем периодичностью. При этом в случае, если найденное решение не помогло пользователю, либо оно требует участия дежурного инженера, то заявка перенаправляется в WfMS модуль для разработки нового решения или выделения сотрудника на задачу. 

Пользователь также в любой момент может отменить свою заявку, открыв выбранный элемент на редактирование и отметив поле "Отменить заявку". После этого одноразовые заявки помещаются в архив с пометкой "Отменено пользователем", а периодические помечаются как завершенные, и работы по ним впоследствии не выполняются.

Также в случае, когда заявка помечается дежурным инженером как дублирующая, то он должен занести в поле «Решение» ссылку на идентичную заявку, после чего пользователю автоматически будет отправлено уведомление со ссылкой на данную заявку.

Все заявки после осуществления работ по ним помещаются в архив портала. Ниже представлен скриншот архива портала:



Рисунок 2.17. Архив портала

Может также возникнуть ситуация, когда техническая проблема вновь появилась у пользователя через какое-то время. В данном случае в представлении «Мои заявки» пользователь должен открыть на редактирование соответствующую заявку и изменить поле «Статус решения» на «Проблема не решена» (рис. 2.18). В данном случае заявка будет перенаправлена в общий список модулей системы для разработки нового решения по ней.



Рисунок 2.18. Восстановление старой заявки

2.5. Экономическое описание решения

В данной главе будут рассмотрены затраты на внедрение и поддержку разрабатываемой системы технической поддержки университета.

Основной целью создания данной системы является не получение экономической прибыли, а увеличение эффективности технического обслуживания и, как следствие, степени удовлетворенности студентов и сотрудников университета. 

Высшая школа экономики уже владеет необходимым серверным оборудованием, которое может быть использовано для развертывания на нем разработанной системы технической поддержки, поэтому привлечения дополнительных средств для приобретения данного оборудования не планируется.

Разработка системы велась бесплатно в рамках выпускной квалификационной работы. Для её создания использовалось программное обеспечение, входящее в академическую подписку факультета бизнес-информатики на продукты компании Microsoft. Стоимость данной подписки составляет 35 тысяч рублей в год. Используемое по ней программное обеспечение включает:

Microsoft Sharepoint 2010;

Microsoft Visual Studio 2010;

Microsoft SQL Server 2008;

Microsoft Windows Server 2008 R2.

Помимо этого, для создания системы использовался Sharepoint Designer 2010, который распространяется компанией Microsoft бесплатно. 

Таким образом, стоимость внедрения системы будет составлять часть стоимости академической подписки факультета на продукты компании Microsoft.

Помимо этого, после внедрения системы необходимо будет регулярно выделять дежурного инженера компьютерного центра ВУЗа для осуществления её поддержки и сопровождения. 

Процесс сопровождения модуля приема и обработки заявок подразумевает выполнение следующих задач:

Проверка и исправление контента портала. Трудозатраты составляют 1 чел./ч. в день.

Проверка актуальных заявок на наличие дублирующих. Трудозатраты составляют 0.5 чел./ч. в день. 

Анализ архива портала, выявление наиболее часто встречающихся проблем пользователей и создание многоразовых заявок по ним. Трудозатраты составляют 1 чел./ч. в день.

Так, трудозатраты по сопровождению системы составляют 2.5 чел./ч. в день. Исходя из расчета, что количество рабочих дней в месяц в среднем составляет 22 дня, то предполагаемые временные затраты на сопровождение системы составляют около 55 чел./ч. () в месяц. Таким образом, стоимость сопровождения системы должна будет высчитываться на основе месячной зарплаты выделяемого на задачу работника компьютерного центра.








Заключение

В результате выполнения выпускной квалификационной работы были рассмотрены основные теоретические понятия, связанные с разрабатываемым модулем приема и обработки заявок системы технической поддержки университета, включающие в себя такие понятия как информационная система, CRM система и веб-портал. С точки зрения данных понятий было доказано, что разрабатываемый модуль является подсистемой сервиса технической поддержки, которая отвечает всем требованиям CRM систем. Было решено, что данный модуль должен быть реализован через корпоративный и вертикальный портал, который обладает узкой направленностью на техническое обслуживание пользователей и является точкой доступа лишь для учащихся и сотрудников университета.

Помимо этого была рассмотрена текущая модель оказания технического обслуживания студентам и сотрудникам НИУ ВШЭ - Пермь, были выявлены её недостатки. После чего в нотации ARIS была построена модель бизнес-процессов, протекающих внутри разрабатываемого модуля.

На основе выявленных компонентов системы была построена диаграмма прецедентов, отражающая основные действия с заявками внутри модуля.  

Для разрабатываемого модуля хранение и организацию данных было решено осуществлять средствами списков MS Sharepoint. Таким образом, структура данных была спроектирована и нормализована до третьей нормальной формы, и, с учетом инструмента разработки, она была перенесена на диаграмму классов, после чего все списки Sharepoint создавались на основе созданной структуры данных.

Также было создано техническое задания для разрабатываемого модуля, где отражены все основные требования к нему, включая интерфейсы взаимодействия с WfMS модулем, ответственным за разработку решений по заявкам пользователей, а также с внешней базой данных, используемой для поиска возможных решений по заданным техническим проблемам.

Спроектированный портал был создан в среде MS Sharepoint 2010. На данный портал были добавлены соответствующие списки и их представления. При помощи рабочих процессов Sharepoint, а также обработчиков событий и таймера, созданных в среде Visual Studio на языке C#, был организован процесс приема и обработки заявок пользователей системы. При помощи набора созданных форм для разных типов пользователей, стандартных веб-частей Sharepoint и настраиваемой веб-части, разработанной в среде Visual Studio на языке C#, был реализован пользовательский интерфейс портала.

Для созданного портала было написано подробное описание решения, которое может быть использовано как начальное руководство для разработчиков и пользователей системы.

Помимо этого, приведено экономическое описание данного решения, где рассчитана стоимость внедрения системы и её дальнейшего сопровождения.

Таким образом, был спроектирован и разработан модуль приема и обработки заявок пользователей системы технической поддержки университета.




Библиографический список

Семушин Д.В. Выпускная квалификационная работа бакалавра на тему “Управление потоками работ вычислительного центра ВУЗа”. Пермь, НИУ ВШЭ - Пермь, 2014 г.

Yu E. “Information Systems (in the Internet Age)” Practical Handbook of Internet Computing, M.P. Singh (ed.) CRC Press 2004. pp. 33: 1 - 19. 

Ефремов О.В., Беляев П.С. "Информационные системы в науке, образовании и бизнесе". Тамбов: Издательство тамбовского государственного университета, 2006 г. 

Информационные процессы, информационные системы // Неофициальный сайт Барановичского Государственного Университета [Электронный ресурс] [Режим доступа: http://bargu.by/2511-informacionnye-processy-informacionnye-sistemy.html] [Проверено: 01.06.2014]. 

"What is an information system?" Management Information Systems (MIS) 2011/2012. Lecture 3. 

Тельнов Ю.Ф. "Интеллектуальные информационные системы (Учебное пособие)". Московский международный институт эконометрики, информатики, финансов и права, 2002 г. 

Pienaar H. "Design and development of an academic portal". Academic Information Service, University of Pretoria, South Africa. Libri, 2003, vol. 53, pp. 118–129.

Интернет-портал // Уникальный портал its-my-site.ru [Электронный ресурс] [Режим доступа: http://its-my-site.ru/ripavleoklivl18/Интернет-портал] [Проверено: 01.06.2014]. 

"Critical steps to successful CRM". Staffware eCRM, 2000. 

"Introduction to CRM". [Электронный ресурс] [Режим доступа: http://dl.sugarforge.org/training/training/IntroductiontoCRM/CRM_Fundamentals.pdf] [Проверено: 01.06.2014].

 "Introduction to Customer Relationship Management". Chapter 1. // Francis Buttle & associates: experts in customer management [Электронный ресурс] [Режим доступа: http://buttleassociates.com/doc/Chapter1CRMbook2e.pdf] [Проверено: 01.06.2014].

 Sharma P. Building a winning Service Desk, QAI India Ltd, 2010. 

 Rizzo T., Fried J., Hillier S., Schaefer K., Swider P., Alirezaei R. Professinal Sharepoint 2010 Development, 2nd ed. Indianapolis: John Wiley & Sons, Inc., 2012. 






Приложение А. Описание бизнес-процессов CRM модуля приема и обработки заявок



Рисунок А.1. Основной бизнес-процесс



Рисунок А.2. Прием заявки



Рисунок А.3. Подготовка решения по заявке



Рисунок А.4. Предоставление решения пользователю



Рисунок А.5. Завершение работы по заявке









Рисунок А.6. Вспомогательный процесс добавления многоразовых заявок








Приложение Б. Техническое задание

Настоящее техническое задание определяет форму и содержание работ по разработке модуля системы технической поддержки НИУ ВШЭ - Пермь, отвечающего за взаимодействие работников компьютерного центра со студентами и сотрудниками университета. Данный модуль является частью системы технической поддержки университета, которая также включает модуль разработки решений по техническим проблемам пользователей, описание которого представлено в работе «Управление потоками работ вычислительного центра ВУЗа».

Общие сведения

Полное наименование модуля и его условное обозначение

Наименование модуля системы – «CRM модуль приема и обработки заявок с техническими проблемами студентов и сотрудников НИУ ВШЭ - Пермь».

Шифр темы

Настоящее Техническое задание разработано в рамках выполнения выпускной квалификационной работы студентов факультета бизнес-информатики, направления 080500.62 Бизнес-информатика.

Перечень документов, на основании которых создается система, кем и когда утверждены эти документы

Работа выполняется на основании учебного плана и темы выпускной квалификационной работы, определенной научным руководителем и утвержденной приказом от 25.11.2013 №8.2.6.2-06/698 «Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики».

Плановые сроки начала и окончания работы по созданию модуля

Плановые сроки начала работ по проектированию разработке системы установлены на сентябрь 2013 года. Сдача проекта должна быть осуществлена до 20 мая 2014 года. 

Назначение и цели создания модуля

Назначение модуля

Применение модуля системы осуществляется для автоматизации процессов взаимодействия между работниками компьютерного центра со студентами и сотрудниками университета. Реализация модуля выполняется в интересах университета. Модуль предназначен для автоматизации получения и обработки заявок пользователей с их техническими проблемами.

Цель создания модуля

Модуль системы разрабатывается для повышения качества взаимодействия между работниками компьютерного центра со студентами и сотрудниками университета, что должно выражаться в увеличении качества технического обслуживания пользователей системы, а также уменьшении времени, требуемого для предоставления технического обслуживания.

Характеристика объектов автоматизации

В рамках данного модуля автоматизируются процессы получения и обработки заявок с техническими проблемами студентов и сотрудников НИУ ВШЭ  Пермь.

Требования к модулю

Общие требования к модулю

Требования к структуре и функционированию модуля

Модуль должен включать следующие подсистемы: 

Подсистема приема и обработки заявок пользователя.

Подсистема поиска возможных решений технических проблем в базе данных.

Подсистема приема и обработки заявок представляет собой веб-портал, куда пользователи могут добавить свои заявки с техническими проблемами. Подробнее с её задачами и функциями можно ознакомиться в разделе 4.2.

Подсистема поиска возможных решений технических проблем представляет собой базу данных со всеми уникальными заявками системы технической поддержки и их решениями, она предназначена для поиска возможных решений по заданным проблемам, описание взаимодействия данных подсистем описано в разделе 4.3. 

Требования к численности и квалификации персонала системы

Для эксплуатации и поддержания модуля системы определены следующие роли: 

Системный администратор.

Дежурный инженер.

Пользователи системы (студенты, сотрудники кафедр).

Роли системного администратора и дежурного инженера могут быть совмещены. Количество штатных единиц определяется в соответствии с количеством пользователей системы. 

Требования к численным показателям модуля

Время хранения данных определяется внутренними нормативными документами. Доступ к модулю системы должен быть предоставлен всем студентам Пермского кампуса НИУ ВШЭ.

Пики посещения сайта ожидаются в начале учебного года и во время технического переоснащения кампусов университета. Единовременно работать с системой могут до 1000 пользователей, что ограничено ресурсами фермы серверов.

При проектировании модуля необходимо также учесть дальнейшее повышение производительности и возможности масштабирования без внесения изменений в программное обеспечение, а посредством усовершенствования технических средств. 

Требования к временным показателям модуля

Ниже представлен набор процессов с их допустимым временем выполнения без учета времени работы пользователя по каждому процессу. 

Добавление заявки на портал – не более 1 минуты 30 секунд. Включает загрузку введенной пользователем информации в элемент списка портала.

Обработка заявки – не более 2 минут. Включает отправку файла в общую папку для поиска решения по заданной проблеме во внешней базе данных.

Поиск возможного решения – не более 10 минут. Включает поиск возможных решений по заданной проблеме в базе данных, а также отправку результатов поиска обратно в модуль CRM.

Просмотр заявки – не более 1 минуты. Включает загрузку информации по выбранной заявке на форму.

Оформление отчета о работе – не более 2 минут. Включает сбор основной информации по заявке, формирование по ней файла MS Word и его сохранение в соответствующей папке библиотеки.

Требования к надежности

Модуль должен функционировать 24 часа в день, 7 дней в неделю.

Заявка пользователя должна добавляться на портал и обрабатываться без ошибок и преждевременных завершений.

В случае, если решение текущей проблемы по заявке есть в базе знаний портала, система должна находить его в 80% случаев.

Отчет должен оформляться по каждой заявке после завершения работы системы с ней.

Требования к защите информации от несанкционированного доступа.

Для сайта должны существовать 2 группы пользователей с различными правами доступа - студенты и сотрудники НИУ ВШЭ - Пермь, а также работники компьютерного центра университета.

Для обеспечения защиты данных пользователя должна быть предусмотрена аутентификация пользователей на основе средств Active Directory операционной системы.

Должны быть предусмотрены механизмы защиты сведений персонального характера пользователей от несанкционированного доступа к ним других пользователей системы. 

Для первой группы пользователей действия на сайте должны быть ограничены, включая невозможность редактировать чужие заявки, вносить изменения в структуру списков, их полей и представлений, а также изменять интерфейс портала.

4.2. Требования к функциям, выполняемым модулем

На создаваемом портале CRM модуля приема и обработки заявок должны быть реализованы следующие функции:

Аутентификация должна производиться средствами Active Directory операционной системы.

На портале должен быть создан список заявок со следующим набором представлений: актуальные заявки, многоразовые заявки, заявки текущего пользователя, завершенные заявки. 

На главной странице портала пользователь должен иметь возможность посмотреть список актуальных на данный момент заявок, а также информацию по каждой проблеме в выбранной им заявке.

На портале должны быть предусмотрены механизмы обработки различных типов заявок: одноразовых (вводятся пользователем единовременно и выполняются для него один раз), периодические (подразумевают выполнение определенной задачи для пользователя с заданной периодичностью), многоразовые (создаются дежурными инженерами, несколько пользователей могут подписаться на выполнение таких заявок для себя).

На главной странице портала пользователю должен быть доступен список многоразовых заявок, где пользователь может подписаться на выполнение для него выбранной заявки. Готовое решение должно быть выслано пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер.

В случае если заявка пользователя является периодической, то она должна выполняться с определенной периодичностью. Готовое решение должно быть выслано пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер.

В случае, если ранее решенная техническая проблема пользователя вновь появилась у него, он должен иметь возможность поставить нужную завершенную заявку на выполнение в представлении «Заявки текущего пользователя». В данном случае заявка должна быть перенаправлена в WfMS модуль для разработки нового решения.

На главной странице портала пользователь должен иметь возможность перейти к представлению «Заявки текущего пользователя» для регистрации своей проблемы, в данном представлении пользователь должен иметь возможность создавать элемент с описанием его текущей проблемы, указывая при этом краткое наименование проблемы, её описание, а также будет ли его заявка отображаться на главной странице портала как актуальная на данный момент. Помимо этого пользователь может поставить для заявки маркер периодической, добавив информацию о том, с какой периодичностью для него необходимо выполнять данную заявку (ежедневная, еженедельная, ежемесячная, ежеквартальная, полугодовая, годичная).

После добавления одноразовой заявки на портал система должна формировать файл с описанием технической проблемы пользователя и отправлять его в общую папку, которая является интерфейсом взаимодействия с базой данных, где производится поиск решений по заданной проблеме. В обратном направлении из базы данных в общую папку отправляется файл с результатами поиска. Если решение найдено в базе данных, то оно высылается пользователю, при необходимости на работу по заявке должен быть выделен дежурный инженер. Если найденное решение не помогло пользователю решить его техническую проблему либо никаких решений не было найдено, то модуль CRM запускает триггер (изменение поля элемента общего списка систем), по которому начинает свою работу WfMS модуль, ответственный за разработку решения. Описание данной системы представлено в работе «Управление потоками работ вычислительного центра ВУЗа». 

В результате работы WfMS модуля в общий список модулей системы добавляется решение текущей проблемы пользователя, которое впоследствии высылается пользователю. 

На форме с высылаемым пользователю решением должны быть реализованы кнопки "Решение помогло" и "Решение не помогло", при нажатии на первую кнопку работа по заявке завершается, при нажатии на вторую - заявка вновь пересылается в WfMS модуль для разработки нового решения. Помимо этого, форма должна содержать поле, куда пользователь при желании может написать свое впечатление о работе с системой.

 Для одноразовых заявок, решение по которым было получено из WfMS модуля, разработанное решение вместе с описанием проблемы пересылается в общую папку, к которой имеет доступ база данных, куда данное решение впоследствии заносится.

В любой момент времени пользователь должен иметь возможность остановить работу по своей заявке по нажатии на соответствующую кнопку. При этом работа системы по ней прекращается, а сама заявка помещается в список архива с пометкой «Отменено пользователем».

4.3. Требования к программной и информационной совместимости

Для осуществления взаимодействия CRM и WfMS модулей системы технической поддержки НИУ ВШЭ - Пермь, необходимо, чтобы они были реализованы в пределах одной фермы MS Sharepoint 2010 с использованием программных доработок на языках С# и Javascript. 

Взаимодействие CRM и WfMS модулей осуществляется через общий список, куда первый модуль заносит данные о проблеме, а второй - о конечном решении технической проблемы. 

Одним из компонентов модуля CRM является внешняя база данных, в которой хранится информация о всех уникальных технических проблемах и их решениях. Она необходима для быстрого поиска информации о возможном решении текущей проблемы пользователя. Взаимодействие данных компонентов осуществляется через общую папку в сети Интернет, представляющую собой библиотеку документов Sharepoint. 

В данную папку из CRM модуля после добавления пользователем одноразовой заявки поступает текстовый файл с описанием проблемы пользователя, по которой в базе данных будет производиться поиск возможного решения. Результаты поиска после этого отправляются в виде текстового файла в общую папку. При разработке нового решения WfMS модулем, данное решение вместе с соответствующей технической проблемой также заносятся в базу данных через интерфейс общей папки. 

Файл для поиска возможного решения отправляется в базу данных лишь для одноразовых заявок, так как периодические и многоразовые заявки по своему определению подразумевают наличие какого-либо готового решения.

Существует определенный формат передаваемых в общую папку файлов. Так, CRM модуль должен передавать файлы следующего содержания:

"0|Идентификатор заявки|Описание технической проблемы".

"1|Описание технической проблемы пользователя|Решение технической проблемы пользователя|0 или 1".

Первая цифра определяет операцию, которую база данных должна будет выполнить. То есть, "0" подразумевает операцию поиска возможного решения по проблеме, а "1" - добавление новой записи в базу данных. При этом, в первом случае файл будет называться "Search" + "Идентификатор заявки", а во втором - "AddToDB" + "Идентификатор заявки". Во втором случае последним элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

База данных после проведения операции поиска возможного решения должна передавать в общую папку файлы следующего содержания:

"Идентификатор заявки|1".

"Идентификатор заявки|0|0 или 1|Решение технической проблемы пользователя".

В данном случае, вторая цифра определяет, найдено ли какое-либо решение по заданной технической проблеме, "0" означает, что решение найдено, "1" - что оно не найдено. Во втором случае третьим элементом строки файла может быть либо "0" либо "1", "0" означает, что для данного решения требуется участие дежурного инженера, а "1" - что оно не требуется.

4.4. Требования к обеспечению







Требования к информационному обеспечению модуля

Хранение и организация данных в модуле должны осуществляться средствами списков MS Sharepoint и MS SQL Server. Обеспечение целостности данных должно быть достигнуто за счет встроенных средств Sharepoint.

Доступ к данным должен предоставляться только авторизованным пользователям с учетом их роли в системе.

Требования к лингвистическому обеспечению модуля

Пользовательский интерфейс модуля должен быть реализован на русском языке. При составлении технической документации возможно использование англоязычных терминов и понятий.

Требования к программному обеспечению системы

Основной средой разработки должна быть платформа MS Sharepoint 2010. Дополнительно для разработки могут быть использованы средства платформ MS Visual Studio 2010 и MS Sharepoint Designer 2010. Для создания форм кроме стандартных средств MS Sharepoint 2010 можно использовать MS Infopath 2010.

При этом не должно использоваться никаких компонентов, требующих дополнительной установки программного обеспечения у пользователя.

Пользователи системы должны иметь доступ к ней с совместимых браузеров согласно перечню производителя.

Требования к техническому обеспечению

Для ведения разработки и поддержки системы должны быть доступны следующие сервера:

Web-сервер, отвечающий за взаимодействие с веб-приложениями и информационными ресурсами в сети Интернет.

Сервер приложений.

Сервер баз данных.

Минимальные требования к техническим характеристикам односерверной фермы:

Процессор – 2 х 3 ГГц.

Объем оперативной памяти – не менее 2 Гб.

Объем жесткого диска – не менее 120 Гб.

Сетевая карта – с поддержкой скорости не менее 1 Гбит/сек.

Возможны различные варианты конечного развертывания системы, начиная от использования односерверной фермы, где один сервер выполняет все роли, до использования многосерверной фермы, где каждый сервер в ферме выполняет соответствующую роль.

Минимальные требования к техническим характеристикам пользовательского компьютера:

Наличие браузера, совместимого с MS Sharepoint 2010 согласно перечню производителя.

Требования к документации

Для модуля должна быть сформирована следующая документация:

Описание работы системы.

Руководство пользователя.

Руководство дежурного инженера.

Руководство разработчика.




Приложение В. Исходные коды

Листинг B.1. Обработчик событий Sharepoint: ItemAddedReceiver

public class ItemAddedReceiver : SPItemEventReceiver

    {

       public override void ItemAdded(SPItemEventProperties properties)

       {

           base.ItemAdded(properties);

           base.EventFiringEnabled = false;

           if (properties.List.ToString() == "Список заявок")

           {

               SPListItem item = properties.ListItem;

               if (Convert.ToString(item["Period"]) != "Нет")

               {

                   item["RequestType"] = "Периодическая";

                   item["PeriodDate"] = DateTime.Today;

                   item["sendToWfms"] = true;

                   base.EventFiringEnabled = true;

                   item.Update();

                   System.Threading.Thread.Sleep(10000);

                   base.EventFiringEnabled = false;                   

                   var go = Convert.ToDateTime(item["PeriodDate"]);

                   var frequency = Convert.ToString(item["Period"]);

                   switch (frequency)

                   {

                       case "День":

                           item["PeriodDate"] = go.AddDays(1);

                           item.Update();

                           break;

                       case "Неделя":

                           item["PeriodDate"] = go.AddDays(7);

                           item.Update();

                           break;

                       case "Месяц":

                           item["PeriodDate"] = go.AddMonths(1);

                           item.Update();

                           break;

                       case "Квартал":

                           item["PeriodDate"] = go.AddMonths(3);

                           item.Update();

                           break;

                       case "Полугодие":

                           item["PeriodDate"] = go.AddMonths(6);

                           item.Update();

                           break;

                       case "Год":

                           item["PeriodDate"] = go.AddYears(1);

                           item.Update();

                           break;

                   }

               }

               if ((Convert.ToString(item["RequestType"]) == "Многоразовая") && (Convert.ToString(item["RequestFromConstant"]) == ""))

               {

                   item["SolvedUserReaction"] = "Проблема решена";

                   item["CurrentStat"] = "Готово дежурное решение";

                   item.Update();

               }

           }

           base.EventFiringEnabled = true; 

       }

    }





Листинг B.2. Обработчик событий Sharepoint: ItemUpdatedReceiver

public class ItemUpdatedReceiver : SPItemEventReceiver

    {

        public void exchange(string fileContents, SPWeb web, SPListItem request)

        {

            MemoryStream ms = new MemoryStream();

            SPList docLib = web.Lists["Exchange"];

            SPListItem docDestination = null;

            for (int i = 0; i < docLib.Folders.Count; i++)

                if (docLib.Folders[i].Folder.Name == "Export")

                    docDestination = docLib.Folders[i];



            SPFolder destRoot = web.GetFolder(docDestination.Folder.ServerRelativeUrl);

            SPFileCollection flColl = destRoot.Files;



            string destFile = null;

            string path = null;

            if (fileContents[0] == '0')

            {

                destFile = flColl.Folder.Url + "/Search" + request["id"].ToString() + ".txt";

                path = @"//kafitb-09$\Exchange\Export\Search" + request["id"].ToString() + ".txt";

            }

            else

            {

                destFile = flColl.Folder.Url + "/AddToDB" + request["id"].ToString() + ".txt";

                path = @"//kafitb-09$\Exchange\Export\AddToDB" + request["id"].ToString() + ".txt";

            }

            StreamWriter w;

            w = File.CreateText(path);

            w.WriteLine(fileContents);

            w.Flush();

            w.Close();

            request["sendToExchange"] = false;

            request.Update();

        }



       public override void ItemUpdated(SPItemEventProperties properties)

       {

           base.ItemUpdated(properties);

           base.EventFiringEnabled = false;

           SPList list = properties.List;

           if (properties.List.ToString() == "Список заявок")

           {

               SPListItem request = properties.ListItem;

               SPSite site = properties.OpenSite();

               SPWeb web = site.OpenWeb();

               bool sendToExchange = Convert.ToBoolean(request["sendToExchange"]);

               bool problemSolved = Convert.ToBoolean(request["ProblemSolved"]);

               if ((sendToExchange) && (!problemSolved))

               {

                   string fileContents = "0|" + request["id"].ToString() +

                       "|" + request["ProblemDescription"].ToString();

                   exchange(fileContents, web, request);

               }

               if ((sendToExchange) && (problemSolved))

               {

                   string needWorker = null;

                   if (Convert.ToBoolean(request["NeedWorker"])) needWorker = "0";

                   else needWorker = "1";

                   string fileContents = "1|" + request["ProblemDescription"].ToString() + "|"

                       + request["Solution"].ToString() + "|" + needWorker;

                   exchange(fileContents, web, request);

               }

               string reqType = Convert.ToString(request["RequestType"]);

               string reqFromConst = Convert.ToString(request["RequestFromConstant"]);

               string reqFrom = Convert.ToString(request["RequestFrom"]);

               if ((reqType == "Многоразовая") && (reqFromConst == "") && (reqFrom != ""))

               {

                   SPListItem newItem = list.Items.Add();

                   newItem["Title"] = request["Title"];

                   newItem["SolvedUserReaction"] = "В разработке";

                   newItem["ProblemDescription"] = request["ProblemDescription"];

                   newItem["Solution"] = request["Solution"];

                   newItem["NeedWorker"] = request["NeedWorker"];

                   newItem["RequestType"] = request["RequestType"];

                   newItem["RequestStatus"] = "Актуальная";

                   newItem["RequestFrom"] = request["RequestFrom"];

                   newItem["RequestFromConstant"] = request["RequestFrom"];

                   newItem["CurrentStat"] = request["CurrentStat"];

                   //newItem["id"] = newItem["ID"]; //НЕ ПРИСВАИВАЕТ АЙДИШНИК!!

                   base.EventFiringEnabled = true;

                   newItem.Update();

                   System.Threading.Thread.Sleep(10000);

                   base.EventFiringEnabled = false;

                   if (Convert.ToBoolean(request["NeedWorker"]))

                   {

                       SPList wfm = web.Lists["Общий список модулей"];

                       SPListItem newComItem = wfm.Items.Add();

                       newComItem["Название"] = "РАБОТАЙ";

                       newComItem["ProblemDescription"] = request["ProblemDescription"];

                       newComItem["Request"] = newItem["id"];

                       newComItem["request_id"] = newItem["id"];

                       newComItem["Solution"] = request["Solution"];

                       newComItem["NeedWorker"] = request["NeedWorker"];

                       newComItem.Update();

                   }

                   else

                   {

                       newItem["SendNotificationToUser"] = true;

                       base.EventFiringEnabled = true;

                       newItem.Update();

                       base.EventFiringEnabled = false;

                   }

                   request["RequestFrom"] = null;

                   request.Update();

               }

           }

           base.EventFiringEnabled = true;           

       }

    }

Листинг B.3. Обработчик событий Sharepoint: AddedImportFile

public class AddedImportFile : SPItemEventReceiver

    {

       public override void ItemAdded(SPItemEventProperties properties)

       {

           base.ItemAdded(properties);

           base.EventFiringEnabled = false;

           SPListItem listItem = properties.ListItem;

           SPSite site = properties.OpenSite();

           SPWeb web = site.OpenWeb();

           SPFolder docFolder = web.GetFolder(listItem.Url).ParentFolder;

           if (docFolder.Name == "Import")

           {               

               string path = @"//kafitb-09\Exchange\Import\" + listItem.Name;

               string contents = File.ReadAllText(path); 

               string[] strArr = contents.Split('|');

               int id = 0;

               bool buf = Int32.TryParse(strArr[0], out id);

               int solPrep = 0;

               buf = Int32.TryParse(strArr[1], out solPrep); //0-есть решение, 1-нет решения

               SPList requests = web.Lists["Список заявок"];

               SPListItemCollection requestsCollection = requests.Items;

var selectRequest = requestsCollection.Cast<SPListItem>().Where(                        x =>                                                                      (Convert.ToInt32(x["id"]) == 1)).ToList();

               SPListItem request = selectRequest.First();

               if (solPrep == 1)

               {

                   request["sendToWfms"] = true;

                   request["SendNotificationToUser"] = false;

                   base.EventFiringEnabled = true;

                   request.Update();

                   System.Threading.Thread.Sleep(10000);

                   base.EventFiringEnabled = false;

               }

               if (solPrep == 0)

               {

                   if (strArr[2] == "1") request["NeedWorker"] = false;

                   else

                   {

                       request["NeedWorker"] = true;                       

                       SPList comModules = web.Lists["Общий список модулей"];

                       SPListItem newItem = comModules.Items.Add();

                       newItem["request_id"] = id;

                       newItem["Solution"] = strArr[3];

                       newItem["NeedWorker"] = true;

                       newItem["Request"] = request;

                       newItem.Update();

                   }

                   request["Solution"] = strArr[3];

                   request["SendNotificationToUser"] = true;

                   base.EventFiringEnabled = true;

                   request.Update();

                   System.Threading.Thread.Sleep(10000);

                   base.EventFiringEnabled = false;                   

               }

               listItem.Delete();

           }

           base.EventFiringEnabled = true; 

       }

    }

Листинг B.4. Таймер Sharepoint: ListTimerJob

class ListTimerJob : SPJobDefinition

    {

        public ListTimerJob()

        {



        }

        public ListTimerJob(string jobName, SPService service, SPServer server, SPJobLockType targetType) : base(jobName, service, server, targetType)

        {        }



        public ListTimerJob(string jobName, SPWebApplication webApplication)

            : base(jobName, webApplication, null, SPJobLockType.Job)

        {

            Title = jobName;

        }



        public override void Execute(Guid contentDbId)

        {

            SPWebApplication webapp = this.Parent as SPWebApplication;

            if (!Properties.Contains("ursSiteUrl")) throw new ApplicationException("Site url not found in properties.");

            string siteUrl = this.Properties["ursSiteUrl"].ToString();            

            SPSite site = new SPSite(siteUrl);

            SPWeb web = site.OpenWeb();

            SPList requests = web.Lists["Список заявок"];

            SPListItemCollection requestsCollection = requests.Items;            

            var PeriodicRequests = requestsCollection.Cast<SPListItem>().Where(x =>((Convert.ToString(x["RequestType"]) == "Периодическая"))).ToList();

            foreach (SPListItem item in PeriodicRequests)

            {

                var go = Convert.ToDateTime(item["PeriodDate"]);

                bool cancel = Convert.ToBoolean(item["Cancel"]);

                if ((go == DateTime.Today)&&(cancel==false))

                {

                    item["SolvedUserReaction"] = "В разработке";

                    item["ProblemSolved"] = false;

                    item["RequestStatus"] = "Актуальная";

                    item["CurrentStatus"] = "В обработке";

                    item.Update();

                    var frequency = Convert.ToString(item["Period"]);

                    switch (frequency)

                    {

                        case "День":

                            item["PeriodDate"] = go.AddDays(1);

                            item.Update();

                            break;

                        case "Неделя":

                            item["PeriodDate"] = go.AddDays(7);

                            item.Update();

                            break;

                        case "Месяц":

                            item["PeriodDate"] = go.AddMonths(1);

                            item.Update();

                            break;

                        case "Квартал":

                            item["PeriodDate"] = go.AddMonths(3);

                            item.Update();

                            break;

                        case "Полугодие":

                            item["PeriodDate"] = go.AddMonths(6);

                            item.Update();

                            break;

                        case "Год":

                            item["PeriodDate"] = go.AddYears(1);

                            item.Update();

                            break;

                    }

                    if (Convert.ToBoolean(item["NeedWorker"]))

                    {

                        SPList wfm = web.Lists["Общий список модулей"];

                        SPListItem newItem = wfm.Items.Add();

                        newItem["Название"] = "РАБОТАЙ";

                        newItem["ProblemDescription"] = item["ProblemDescription"];

                        newItem["Request"] = item["id"];

                        newItem["request_id"] = item["id"];

                        newItem["Solution"] = item["Solution"];

                        newItem["NeedWorker"] = item["NeedWorker"];

                        newItem.Update();

                    }

                    else

                    {

                        item["SendNotificationToUser"] = true;                        

                        item.Update();

                        SPWorkflowAssociation workflowAssociation = requests.WorkflowAssociations.GetAssociationByName("Изменение элемента списка заявок",

                               System.Threading.Thread.CurrentThread.CurrentCulture);

                        item.Web.Site.WorkflowManager.StartWorkflow(item, workflowAssociation, workflowAssociation.AssociationData);                     

                    }}

            }}

    }

Листинг B.5. Обработчик событий таймера Sharepoint: JobDefinition.EventReceiver

public class JobDefinitionEventReceiver : SPFeatureReceiver

    {

        private const string ListJobName = "CRM daily";

        public override void FeatureActivated(SPFeatureReceiverProperties properties)

        {

            SPSecurity.RunWithElevatedPrivileges(delegate()

            {

                var web = properties.Feature.Parent as SPWebApplication;                

                DeleteJob(web);                

                var timerJob = new ListTimerJob(ListJobName, web);

                timerJob.Properties.Add("ursSiteUrl", web.Sites[0].Url);

                timerJob.Schedule = new SPDailySchedule { BeginHour = 5, BeginMinute = 0, EndHour = 5, EndMinute = 59 };

                timerJob.Update();

            });

        }

        public override void FeatureDeactivating(SPFeatureReceiverProperties properties)

        {

            var web = properties.Feature.Parent as SPWebApplication;

            DeleteJob(web);

        }

        private static void DeleteJob(SPWebApplication web)

        {

            foreach (var job in web.JobDefinitions.Where(job => job.Name == ListJobName))

            {

                job.Delete();

            }

        }

    }

Листинг B.6. Веб часть Sharepoint: UserRedirect

namespace CRM_module.UserRedirect

{

    [ToolboxItemAttribute(false)]

    public class UserRedirect : WebPart

    {

    private const string allowedGroup = "Help Desk";

    private const string redirectRelativeUrl = "/Lists/List/HelpDeskNewForm.aspx";  



    [Category("Настройки")]

    [WebBrowsable(true)]

    [WebDisplayName("Список групп пользователей с доступом")]

    [WebDescription("Введите имена групп")]

    [Personalizable(PersonalizationScope.Shared)]

    public string AllowedGroup

    { get; set; }



    [Category("Настройки")]

    [WebBrowsable(true)]

    [WebDisplayName("Ссылка редиректа")]

    [WebDescription("Введите относительную ссылку страницы")]

    [Personalizable(PersonalizationScope.Shared)]

    public string RedirectRelativeUrl

    { get; set; }

   

    protected override void CreateChildControls() 

    {

      base.CreateChildControls();

    }



    protected override void OnLoad (EventArgs e) 

    {

      base.OnLoad(e);        

      if (String.IsNullOrEmpty(this.AllowedGroup)) this.AllowedGroup = allowedGroup;

      if (String.IsNullOrEmpty(this.RedirectRelativeUrl)) this.RedirectRelativeUrl = redirectRelativeUrl;

      SPWeb web = SPContext.Current.Web;         

      if (IsUserMemberOfGroup(web.CurrentUser, this.AllowedGroup))

      {

          string url = this.RedirectRelativeUrl;

          string edit = this.RedirectRelativeUrl.Split('/')[3].Split('.')[0];

          if(edit.Contains("Edit"))

          {

              string id = SPContext.Current.ListItem["id"].ToString();

              url = this.RedirectRelativeUrl + "?ID=" + id + "&IsDlg=1";

          }

          SPUtility.Redirect(url, SPRedirectFlags.Default, HttpContext.Current);

      }

    }

    

    public static bool IsUserMemberOfGroup(SPUser user, string groupName)

        {

            bool result = false;

            if (!String.IsNullOrEmpty(groupName) && user != null)

            {

                foreach (SPGroup group in user.Groups)

                {

                    if (group.Name == groupName)

                    {

                        // found it

                        result = true;

                        break;

                    }

                }

            } 

            return result;

        }

  }

}

