Правительство Российской Федерации



Федеральное государственное автономное образовательное учреждение 

высшего профессионального образования



«Национальный исследовательский университет 
«Высшая школа экономики»





Московский институт электроники и математики Национального 

исследовательского университета "Высшая школа экономики"



Факультет электроники и телекоммуникаций

Кафедра Радиоэлектроника и телекоммуникации







ВЫПУСКНАЯ КВАЛИФИКАЦИОННАЯ РАБОТА





На тему: Разработка конфигурации ПЛИС для ячейки информационного обмена











Студент группы № Р-101

Адам Дарья Ивановна



Руководитель ВКР:

ст. преподаватель Крючков Н.М. (МИЭМ НИУ ВШЭ)    



Консультанты:

к.т.н.,  доцент Захарова С.С.  (МИЭМ НИУ ВШЭ) 



ведущий инженер Ксендзов О.В. 

(ОАО НПК НИИДАР)











Москва, 2013

Правительство Российской Федерации



Федеральное государственное автономное образовательное учреждение высшего профессионального образования 
"Национальный исследовательский университет 
"Высшая школа экономики"



Московский институт электроники и математики Национального 

исследовательского университета "Высшая школа экономики"



Факультет электроники и телекоммуникаций





Кафедра Радиоэлектроника и телекоммуникации

  

УТВЕРЖДАЮ

 Заведующий кафедрой



______________ / С.У.Увайсов/

«___» ____________ 2013 г.

ЗАДАНИЕ

НА ВЫПУСКНУЮ КВАЛИФИКАЦИОННУЮ РАБОТУ (ВКР)

студенту 5 курса группы Р-101 Адам Дарье Ивановне

(ФИО)

1 .Тема «Разработка конфигурации ПЛИС  для ячейки информационного обмена» 



(Утверждена приказом от _________________ № _____________)



Срок сдачи ВКР руководителю: 27.05.2013

Срок сдачи ВКР на выпускающую кафедру: 10.06.2013

3. Техническое задание. Разработать программу на языке VHDL для интерфейса PIOX.



4. Содержание расчетно-пояснительной записки.



A. Специальная часть.

1 ПЛИС

1.1 Общие сведения

1.2 ПЛИС семейства FLEX10K  

1.3 Quartus II – система проектирования ПЛИС

1.4 Вычислительный комплекс «Эльбрус-90микро» в конструктиве cPCI в настольном исполнении



2 Ячейка информационного обмена и устройства, частью которых она является

2.1 Радиолокационная станция

2.2 Радиоэлектронное устройство, в состав которого входит ячейка информационного обмена

2.3 Технические требования к ячейке информационного обмена 

2.4 Назначение ячейки информационного обмена

2.5 Интерфейс PIOX

3. Язык описания аппаратуры цифровых систем VHDL

3.1 Описание языка

3.2 Описание разработанной программы

4 Расчёт надёжности ячейки



Б. Экологическая часть.

5 Экологическая оценка компьютеризации общества



B. Раздел по БЖД.

6 Безопасность жизнедеятельности

6.1 Анализ вредных факторов при длительных статических нагрузках на пользователя

6.2 Организация рабочего места



Г. Экономическая часть.

7 Организационно-экономический раздел

7.1 Планирование разработки ПО с построением графика

7.2 Расчет затрат на разработку ПО

7.3 Расчет основных технико-экономических показателей использования программного продукта



Д. Решение задач на ЭВМ.

1 Microsoft Word 2007

2 Quartus II

3 АСРН (Автоматизированная система расчета надежности)

4  2007



5. Перечень графического материала

1 Структурная схема ячейки информационного обмена

2 Презентация к защите дипломной работы















6. Консультант по ВКР.



Консультант ________________________   /Захарова С.С./

(подпись) 	(ФИО)





Консультант ________________________   /Ксендзов О.В./

(подпись) 	(ФИО)





7. Дата выдачи задания «___» ______________ 2013 г. 



Руководитель ВКР ________________________   /Крючков Н.М./

	(подпись) 	(ФИО)



Задание принято к исполнению _____________________   /Адам Д.И./

	(подпись)	(ФИО)

 «___» ______________ 2013 г.

















































Примечание.

Задание оформляется в двух экземплярах и сдается на кафедру. После утверждения один экземпляр задания выдается на руки студенту. Экземпляр задания вшивается в пояснительную записку.







Оглавление





















































































































Аннотация

В настоящее время на территории РФ находятся на боевом дежурстве несколько радиолокационных станций РЛС раннего предупреждения о ракетном нападении.

В состав рассматриваемой РЛС входит вычислительный комплекс (ВК), предназначенный для приема информации технического и функционального контроля, поступающей в реальном масштабе времени от других устройств станции, отображения результатов обработки на элементах индикации и формирования команд технического и функционального управления устройствами станции.

Частью ВК является ячейка информационного обмена.

Обмен данными ЭВМ осуществляет вычислительного комплекса с ячейкой осуществляет по специальному параллельному интерфейсу. Обмен информацией технического и функционального управления и контроля, с устройствами РЛС, производится при помощи интерфейсов, реализованных в ячейке:

- четыре интерфейса с самосинхронизирующимся кодом;

- два интерфейса RS-485;

- один интерфейс RS-232.

Основной объем схемотехнических решений реализован на ПЛИС (программируемая логическая интегральная схема) семейства FLEX10K фирмы Altera.

Программа конфигурации ПЛИС разработана в среде проектирования Quartus II. Узел специального параллельного интерфейса разработан на  схем  VHDL, остальные узлы ПЛИС разработаны с помощью графического редактора САПР Quartus II.

В дипломе рассмотрены тенденции развития ПЛИС, сравнительный анализ применяемых современных программируемых интегральных схем, а ПЛИС из семейства FLEX10K рассмотрены более подробно.

Также в работе был произведен расчет надежности ячейки в автоматизированной системе расчета надежности (АСРН). АСРН была разработана в ОАО «Российский научно-исследовательский институт «ЭЛЕКТРОНСТАНДАРТ» на базе справочника «Надежность электрорадиоизделий».

	

































































Перечень сокращений

АЛУ - арифметико-логическое устройство;

АЦП - аналого-цифровой преобразователь;

АФУ - антенно-фидерное устройство;

ВКЛ - включено;

ВП - военное представительство;

ОТКЛ - выключено;

ЗИП-О - запасное имущество и принадлежности, одиночный;

ИБП - источник бесперебойного питания;

ИО - инженерное оборудование;

КД - конструкторская документация;

КИМС - комплексная имитационная модель станции;

КИП - контрольно-измерительные приборы;

КО - кратковременное обслуживание;

НЖМД - накопитель на жестком магнитном диске;

ОЗУ - оперативное запоминающее устройство;

ОС - операционная система;

ОТК - отдел технического контроля;

ПЭВМ - персональная электронная вычислительная машина;

ПЛИС - программируемая логическая интегральная схема;

РВР - ремонтно-восстановительные работы;

РЛС - радиолокационная станция;

РМО - рабочее место оператора;

РЭ - руководство по эксплуатации;

РЭУ - радиоэлектронное устройство;

  СТПО - специальное тестовое программное обеспечение;

Таи 1 время начала излучения; Тап - время конца излучения;

ТО - техническое обслуживание;

ТЭЗ - типовой элемент замены;

УХЛ - умеренно-холодный;

ФК - функциональный контроль;

ФПО - функциональное программное обеспечение;

ЦАП - цифро-аналоговый преобразователь;

ЦОС - цифровая обработка сигналов;

ЭД - эксплуатационная документация;

СD - компакт-диск;

DМА - прямой доступ к памяти;

FIFО - "первым пришел — первым вышел";

FLOPS - количество операций с плавающей запятой в секунду; 

РСI - шина соединения периферийных компонентов;

SDRАМ - синхронная динамическая память;

USB - универсальная последовательная шина;

  ВРЭ HDD - накопитель на жестком диске.



















































Ведение



	Радиолокационные станции раннего предупреждения о ракетном нападении ведут непрерывный контроль воздушного пространства далеко за пределами границ РОСИИ, обеспечивая наличие большого подленного времени для приведения системы ПВО в боевую готовность с целью защиты территории страны от ракет вероятного противника.

	В рассматриваемой РЛС в качестве обрабатывающего устройства используется вычислительный комплекс, предназначенный для приема информации, поступающей в реальном масштабе времени от других устройств РЛС (абонентов), отображения результатов контроля этих устройств на экранах рабочих мест операторов и формирования управляющей информации для этих абонентов. Для реализации этой задачи должна быть разработана ячейка, которая могла бы принять данные параллельного 16-ти разрядного кода интерфейса  PIOX, используемого управляющей ЭВМ (коды технического и функционального управления) и передать эти данные в последовательном коде на абоненты:

	- передающее устройство;

	- принимающее устройство;

	- синхронизатор;

	- антенно-фидерное устройство.

	Информация технического и функционального контроля в последовательном коде от перечисленных выше устройств должна быть принята ячейкой во внутреннее ОЗУ и передана в управляющую ЭВМ в параллельном коде по ее запросу.

	Получив сигналы запроса ячейка транслирует ее в модули цифровой обработки сигналов (ЦОС) ЭВМ. Модуль ориентирован на приём и цифровую обработку сигнальной информации в реальном масштабе времени.

	Модуль ЦОС и ячейка информационного обмена (3Д-Я202) соеденены шлейфом. Обмен данными с ячейкой по интерфейсу PIOX производится пакетами. Интерфейс представляет собой 16 параллельных линий данных PIO и две управляющие линии PIO_WR PIO_RD (запись и чтение).

	По интерфейсу PIOX доступны:

	- общие регистры ячейки;

	- регистры контроллеров интерфейсов;

	- ОЗУ контроллеров интерфейсов.

	В данном дипломе осуществлена разработка программы для обеспечения функционирования этого интерфейса. Программа написана на языке VHDL.













































1 ПЛИС

1.1 Общие сведения



ПЛИС (программируемая логическая интегральная схема) - это большие интегральные микросхемы матричного типа, позволяющие программным способом реализовать логические функции большой сложности. Физическим ограничением быстродействия присущей всем традиционным архитектурам процессоров является последовательное выполнение команд. Архитектура ПЛИС имеет потенциально большее быстродействие по сравнению с микроконтроллерами и DSP процессорами. Это объясняется возможностью аппаратного распараллеливания вычислений.

Тенденция развития ПЛИС заключается не в конкуренции с микропроцессорами. Современный подход к проектированию сложных систем заключается, скорее, в удачном совмещении архитектур ПЛИС и процессоров. При этом происходит органичное дополнение: возможность скоростной обработки данных в реальном времени; реализации узкоспециальных алгоритмов, с жесткими временными диаграммами; большое число пользовательских выводов с широкими возможностями процессоров для решения математических и алгоритмических задач.

Другой областью применения ПЛИС является построения высокоскоростных систем ввода/вывода данных, благодаря встроенным скоростным приемопередатчикам, а также большому количеству пользовательских выводов (современные ПЛИС имеют более 1000 пользовательских выводов!) что делает их, зачастую, единственно приемлемым решением.

Еще одной областью применения ПЛИС явялется прототипирование заказных СБИС (ASIC), когда проект сначала реализуется на ПЛИС, а затем переводится в базис заказной микросхемы.

Исходя из вышесказанного, можно перечислить основные области применения ПЛИС:

Высокоскоростная обработка данных;

Алгоритмы ЦОС, особенно где требуется обработка данных в реальном времени;

Задачи обработки информации, требующие большого количества пользовательских выводов;

Промежуточных этап проектирования СБИС;

Узкоспециальные алгоритмы, построенные на жестких временных диаграммах;

Проекты, где требуется большое число портов ввода-вывода.

В настоящее время наибольшую распространенность получили два типа архитектур ПЛИС:

1) CPLD (англ. complex programmable logic device). Примерами ПЛИС данной архитектуры является семейство MAX фирмы Altera и CoolRunner фирмы Xilinx. Для архитектур данных ПЛИС характерны крупные логические блоки - макроячейки (macrocells). Современные ПЛИС содержат до нескольких сотен макроячеек. Каждая макроячейка реализует функцию нескольких переменных и содержит триггер для хранения полученного результата. Для ПЛИС данной архитектуры характерно крайне низкая потребляемая мощность в статическом режиме (потребляемый ток порядка десятков микроампер), которая линейно возрастает с увелчением тактовой частоты. Также для данной архитектуры характерны жесткие временные задержки между макроячейками а следовательно и выводами микросхемы. Типичное время задержки между выводами (pin-to-pin) составляет единицы наносекунд. Прошивка ПЛИС данной архитектуры хранится внутри микросхемы в энергонезависимой памяти. [1]

2)FPGA (англ. field-programmable gate array). ПЛИС данной архитектуры обладают намного более развитой архитектурой, по сравнению с CPLD. Основной структурной единицей ПЛИС данной архитектуры является LUT(англ. Lookup tables) - таблицы преобразования, позволяющие реализовывать логические функции. Современные ПЛИС содержат аппаратные умножители в том числе с накоплением (MAC), блоки внутренней памяти, аппаратные интерфейсы для DDRx SDRAM, аппаратные ядра PCIexpress, встроенные микропроцессорные ядра, трансиверы для организации скоростной передачи данных между ПЛИС и внешними устройствами. [1]

В процессе проектирования устройств на ПЛИС используют языки описания устройств HDL (Hardware description language) - VHDL, Verilog, Abel, AHDL. Ранее был распространен способ проектирования с помощью рисования схемотехники. Этап проектирования устройства на ПЛИС заключается в описании устройства на языке HDL, перевода описания в базис выбранной ПЛИС, трассировка внутренних ресурсов ПЛИС в соответствии с со списком цепей, генерация результирующей прошивки.

На данный момент основными производителями ПЛИС являются: Xilinx, Altera, Actel, Lattice. [19]



1.3  ПЛИС семейства FLEX10K



ПЛИС семейств FLEX10K, FLEX10KA, FLEX10KE  на данный момент, самая популярная элементная база для реализации алгоритмов цифровой обработки сигналов (ЦОС), построения сложных устройств обработки данных и интерфейсов. Это объясняется тем, что благодаря большой логической емкости, удобной архитектуре, включающей встроенные блоки памяти, достаточно высокой надежности и удачному соотношению цена - логическая емкость данные ПЛИС удовлетворяют разнообразным требованиям, возникающих у разработчика как систем ЦОС, так и устройств управления, обработки данных и т.п. Учитывая эти особенности, для ячейки информационного обмена была выбрана ПЛИС этого семейства. В таблице 1  приведены основные сведения о ПЛИС семейства FLEX10K. [2]



Таблица 1. Основные сведения о ПЛИС семейства FLEX10K



Обобщенная функциональная схема ПЛИС семейства FLEX10K приведена на рис. 1. В основе архитектуры лежат логические блоки (ЛБ), содержащие 8 логических элементов и локальную матрицу соединений (ЛМС). Глобальная матрица соединений разделена на строки и столбцы, имеет непрерывную структуру. Посередине строки располагаются встроенные блоки памяти. Кроме того, имеются глобальные цепи управления, синхронизации и управления вводом-выводом.

Встроенный блок памяти (ВБП) представляет собой ОЗУ емкостью 2048 (4096) бит и состоит из локальной матрицы соединений, собственно модуля памяти, синхронных буферных регистров, а также программируемых мультиплексоров. Сигналы на вход ЛМС ВБП поступают со строки ГМС. Тактовые и управляющие сигналы поступают с глобальной шины управляющих сигналов. Выход ВБП может быть скоммутирован как на строку, так и на столбец ГМС.

Наличие синхронных буферных регистров и программируемых мультиплексоров позволяет конфигурировать ВБП как запоминающее устройство с организацией 256 х 8, 512х4, 1024х2, 2048х1.

Наличие ВБП дает возможность табличной реализации таких элементов устройств ЦОС, как перемножители, АЛУ, сумматоры и т.п., имеющих быстродействие до 100 МГц (конечно при самых благоприятных условиях, реально быстродействие арифметических устройств, реализованных на базе ВБП составляет 10 – 50 МГц).



Рисунок 1. Архитектура ПЛИС FLEX10K



Все ПЛИС семейства FLEX10K совместимы по уровням с шиной PCI, имеют возможность как последовательной, так и параллельной загрузки, полностью поддерживают стандарт JTAG.

Элемент ввода-вывода (ЭВВ) ПЛИС семейства FLEX10K соединяет канал строки или столбца ГМС с выводом микросхемы. ЭВВ позволяет осуществить ввод-вывод бита данных с различными скоростями, временное хранение данных, эмуляцию открытого коллектора. Наличие входного и выходного регистра позволяют хранить данные, что снижает логическую нагрузку на ЛЭ и высвобождает ресурсы ПЛИС для реализации других функций. Скорость переключения буфера ЭВВ может быть задана при конфигурации ПЛИС. Пониженная скорость переключения позволяет снизить уровень импульсных помех и «звона» в системе. [4]

Основные параметры временной модели ПЛИС предоставлены в приложении 1.

1.4  Quartus II – система проектирования ПЛИС

	Quartus II (QII) — это система проектирования на ПЛИС Altera, подходящая для всех выпускаемых семейств микросхем Altera. Это именно система, т. к. она включает весь необходимый набор утилит, подпрограмм и 

настроек для полного создания проекта. [3]                                        	

Все подпрограммы и утилиты QII можно разделить на группы согласно этапам выполнения проекта на ПЛИС, которые выглядят следующим образом:

- создание файла проекта

- анализ и синтез проекта

- трассировка связей и размещение проекта

- временной анализ при помощи утилиты Time Quest. При необходимости создание базы данных для передачи в другую САПР для моделирования

- программирование конфигурационной памяти

Рассмотрим некоторые этапы детальнее.

1.4.1 Создание файла проекта

Файл проекта можно создавать на аппаратных языках, графическом редакторе и редакторе конечных автоматов.




                            Рисунок 2. Файлы с описанием проекта


Аппаратные языки, применимые для QII, VHDL (расширение файла *.vhd), Verilog (*.v) и System Verilog. [3]

При создании проекта может быть использован любой язык из перечисленных выше.  

Текстовый редактор можно использовать любой, но тот, который встроен в QII, позволяет следующее:

вносить групповые комментарии;

возможность использования языковых шаблонов;

синтаксическая подсветка;

поиск по ключевому слову;

возможность сворачивания громоздких функций;

написание скриптов TСL.

	Редактор памяти ROM. Очень удобная утилита для создания собственных табличных значений. Например, можно создать таблицу синусов (адрес — это аргумент функции, значение — это значение ячейки памяти) или смоделировать сигнал в оболочке Mathlab и полученные значения записать в таблицы памяти. Также такой редактор может пригодиться для записи устойчивых состояний при создании, например, модулятора. Значения можно записывать как в двоичном, так и в шестнад- цатеричном представлении. Записанные значения будут храниться в конфи-

гурационной памяти или флешпамяти, если речь идет о CPLD. [3]    

	Редактор конечных автоматов существует для создания автомата состояний с назначением условий перехода в графическом виде (графами) с возможностью последующего преобразования в HDL язык (любой) для воз- 

можности просмотра реализации вашего автомата.     

	Основное окно проекта кроме отображения самого проекта содержит навигатор проекта, в котором описана иерархия файлов проекта и список используемых библиотек, символов и файлов, а также окно состояния компиляции (синтеза) проекта и окно сообщения ошибок и предупреждений.


Анализ и синтез                          

 	Синтез — это процесс создания проекта с учетом особенностей микросхемы (ОЗУ, DSP-блоков, логики) для просмотра использования ресурсов на раннем этапе. Реальное использование ресурсов матрицы будет видно только после компиляции. Цифры, показанные в синтезе, могут отли-

чаться до 20–30 %.       

Для того, чтобы оценить правильно ли выполнена поведенческая модель проекта после синтеза в Quartus II, можно просмотреть временные диаграммы без учета трассировочных особенностей, хотя можно задать и режим симуляции с привязкой ко времени. 

            Установки - это такие глобальные настройки, как:

выбор микросхемы (рис. 3), хотя он производится и при старте проекта;

оптимизатор синтеза (по времени);

простейшие установки фиттера (трассировщика);

установки анализатора оценки потребляемой мощности.


Рисунок 3. Окно выбора ПЛИС 



С помощью анализатора мощности можно получить приблизительное вычисление потребления мощности по результатам синтеза (с задачей тактовой частоты и параметра, типа микросхемы, использования логических элементов).
            Также существует отдельный калькулятор мощности в оболочке Excel для предварительной оценки ее потребления еще до выхода версии QII, поддерживающей эту функцию в новых семействах. Однако точность такого предварительного вычислении 50% называется эта утилита «Ранний оценщик мощности».

            На этапе синтеза можно оптимизировать лист связей двумя способами:
            1) получить после синтеза файл в гра- фическом редакторе RTL-Viewer, отредактировать его и снова отпра- вить на синтез
            2) с помощью Gate-level оптимизации можно осуществлять временное выравнивание между регистрами внутри матрицы, к примеру, время прохождения сигнала между регист- рами R1 и Rn, равное 15 нс, выравни-

вается по соотношению 15/n.



Компиляция
            В САПР QII существует два типа компиляции:

глобальная, т. е. проект компилируется весь одновременно. Такая компиляция доступна в Веб-версии QII;

инкрементальная, т. е.частичная (см. рис. ниже). Доступна только в лицензионной версии и Logic Lock.




Рисунок 4. Полная и инкрементальная компиляции

Перед запуском компиляции проекта необходимо выполнить настройки (assigments).

            Pin Planer - утилита, позволяющая назначать сигналы на физические выводы микросхемы. Их можно назначить как жестко привязанные так и перебрасываемые по определенным правилам (в пределах банка) для улучшения результатов трассировки. [3]

Рисунок 5. Интерфейс утилиты Pin Planer

            Тут-же назначаются группы связей, например это шина, которую необходимо выровнять (при этом в группе можно назначать невыровненными, к примеру, старшие разряды для улучшения результатов трассировки).

Выводы в Pin Planer разделяются формой и цветом для обозначения:

разделения на банки;

дифференциальных пар;

выводов ФАПЧ (фазовая автоподстройка частоты);

выводов питания и тех, которые не используются (серым цветом);

назначенных и не назначенных выводов.

Назначать выводы можно перетаскиванием из нижнего окна списка сигналов. Практически всегда трассировку кристалла нужно согласовывать с трcсировкой печатной платы (что-то получается в плате, но не получается в матрице, и наоборот). Поэтому для трассировки плат Альтера рекомендует пользоваться пакетом от компании Ментор-Графикс. Этот пакет работает с нет-листом, переданным от САПР QII. При этом значительно упрощается создание символа посадочного места корпуса, т. к. в Mentors Graphycs уже имеется распиновка ПЛИС Альтера.

            Для установок трассирования все чаще применяют TCL-скрипты. TCL-скрипт на более низком уровне описывает конструкцию, которую вы выбираете для интерпретации функционального поведения, описанного на языке HDL. [3]

Chip Planer — утилита, позволяющая просматривать топологию микросхемы и редактировать ее поле трассировки. Она применима в таких случаях:

когда не устраивает работоспособность устройства;

не использовались рекомендации при трассировке;

неверное кодирование.

Прибегать к корректировке в Chip Planer рекомендуется лишь опытным инженерам, имеющим достаточный опыт работы с ПЛИС.

            Временное моделирование

            Временное моделирование производится с помощью прилагаемого (входящего в комплект пакета QII) программного продукта Model Sim от Mentors Graphycs, который поставляется в зависимости от вида лицензии — с ограничением общего размера моделируемого кода (Starter Edition) и без него ( Edition). Однако следует помнить, что ни одна из поставляемых вместе с QII версий Model Sim не поддерживает моделирование программ, написанных на 2-х языках одновременно (двуязычие). Такое возможно лишь при использовании версии Model Sim SE с соответствующей лицензией от Mentors Graphycs. При установке версии SE создавать и отлаживать проекты становится возможным непосредсвенно в самой среде Model Sim и лишь потом передавать их в QII для привязки к конкретному корпусу ПЛИС. Но об этом, как и об использовании утилиты Nativlink, поговорим в следующих статьях этого цикла.

            В разрезе моделирования стоит также упомянуть Signal Tab. Эта утилита представляет собой внутренний цифровой анализатор. Она забирает ресурс памяти и логики в ПЛИС и записывает туда сигналы ее работы, которые потом отражаются в виде диаграмм, однако нельзя посмотреть тактовый сигнал. [3]

Программирование конфигурационной памяти или флеш CPLD

Программирование проверенного в симуляторе проекта осуществляется тут же в QII при помощи утилиты Programmer

Рисунок 6. Утилита Programmer. Установка средств программирования ПЛИС

Перед началом программирования необходимо выбрать средство из предлагаемых, нажав кнопку Hardware Setup. Альтера предлагает различные инструменты для программирования: через USB-порт (USB-Blaster) и через порт Ethernet (Ethernet Blaster). Поддерживаемый ранее программатор через LPT-порт (ByteBlaster) сейчас снят с производства. Перед стартом прожига следует не забыть включить опцию Program/Configure, поставив галочку в соответствующей колонке.

На этом можно завершить краткий обзор работы в среде QII, хотя за ее пределами осталось множество деталей, зачастую оказывающихся очень важными, но перечислить их все невозможно в рамках диплома. 

На рис. 7 представлено окно  QII с изображением нашего проекта ПЛИС.



Рисунок 7. Проект ПЛИС ячейки информационного обмена



Рисунок 8. Узел PIOX в проекте ПЛИС ячейки информационного обмена

1.5 Вычислительный комплекс «Эльбрус-90микро» в конструктиве cPCI в настольном исполнении

Вычислительные комплексы «Эльбрус-90микро», выполненные в конструктиве «Евромеханика» в соответствии с требованиями стандарта cPCI, являются высокопроизводительными многопроцессорными вычислительными системами, обеспечивающими многопользовательский, многозадачный режим вычислений в реальном масштабе времени. Предназначены для использования в стационарных системах управления и обработки информации. ВК могут применяться в системах с жесткими условиями эксплуатации.

Аппаратура вычислительных комплексов имеет сетевое оборудование для обменов с другими ВК анало-гичного типа или с другими ВК и ЭВМ, а также ряд ВК и ЭВМ, а также ряд интерфейсов как параллельного, так и последовательного типа.

Комплексы могут поставляться в двух вариантах конструктивного исполнения корпусов: встраиваемом и настольном. Встраиваемые конструкции могут дополняться конструктивными узлами для автономной отладки.

Вычислительные комплексы данного конструктивного исполнения используют систему воздушного охлаждения открытого типа. Устройство охлаждения может располагаться в аппаратуре пользователя или быть встроено в корпус поставляемого комплекса.



Рисунок 9.  Два двухмашинных комплекса «Эльбрус-90микро». Встраиваемое исполнение















Рисунок 10. «Эльбрус-90микро»







2 Ячейка информационного обмена и устройства, частью которых она является



2.1 Радиолокационная станция



Ячейка информационного обмена входит в состав РЭУ, которое является частью РЛС.

Радиолокационная станция (РЛС), радиолокатор, радар, устройство для наблюдения за различными объектами (целями) методами . Основные узлы РЛС — передающее и приёмное устройства, расположенные в одном пункте (т. н. совмещенная РЛС) или в пунктах, удалённых друг от друга на некоторое (обычно значительное) расстояние (двух- и многопозиционные РЛС); в РЛС, применяемых для , передатчик отсутствует. Антенна может быть общей для передатчика и приёмника (у совмещенной РЛС) или могут применяться раздельные антенны (у многопозиционных РЛС). Важная составная часть приёмного устройства РЛС (после собственно приёмника) — световой индикатор на электроннолучевой трубке (ЭЛТ), а в современных (середины 70-х гг.) РЛС наряду с индикатором — ЦВМ, автоматизирующая многие операции по обработке принятых сигналов. [5] Основные характеристики РЛС: точность измерений, разрешающая способность, предельные значения ряда параметров (максимальная и минимальная дальность действия, сектор и время обзора и др.), помехоустойчивость. К основным характеристикам относят также мобильность РЛС, её массу, габариты, мощность электропитания, срок службы, количество обслуживающего персонала и многие др. эксплуатационные параметры. [8]

 РЛС, частью которой является ячейка информационного обмена - это станция раннего предупреждения о ракетном нападении.











2.2 Радиоэлектронное устройство, в состав которого входит ячейка информационного обмена



2.2.1 Описание и работа РЭУ 

РЭУ предназначено для обработки информации, поступающей в реальном масштабе времени от других элементов системы, отображения результатов обработки и формирования управляющей информации для этих элементов.

Аппаратура РЭУ предназначена для эксплуатации в условиях группы 1.1 аппаратуры по ГОСТ РВ 20.39.304-98 умеренно-холодного (УХЛ) климатического исполнения в закрытых помещениях.

2.2.2 Технические характеристики РЭУ

Электропитание аппаратуры РЭУ (вместе с инженерным оборудованием) осуществляется от трёхфазной сети переменного тока с глухозаземлённой нейтралью напряжением (380±38) В и частотой (50±2,5) Гц. Суммарная потребляемая мощность не превышает 18кВА.

	Электропитание собственной функциональной аппаратуры РЭУ осуществляется от однофазной сети напряжением (220±22) В и частотой (50±2,5) Гц, потребляемая мощность не превышает 5кВА.

Для сохранения работоспособности РЭУ при отключениях первичного электропитания в РЭУ на время не более 5 мин используется источник беспроводного питания (ИБП).

	2.2.3 Состав РЭУ

Вычислительные средства РЭУ образуют промышленная ЭВМ с процессором и модулями ЦОС ADP 201Cp5 и ПЭВМ рабочих мест операторов.

	Модули ЦОС ориентированы на решение специальных задач обработки сигналов, процессор и ПЭВМ – универсальные вычислительные устройства.

	Общая суммарная производительность вычислительных средств превышает 20 GFLOPS. Оперативная память сосредоточена в указанных вычислительных средствах.

	На рис. 11 изображена схема электрическая функциональная РЭУ.

	В таблице 2 приведён состав РЭУ.



Таблица 2. Состав РЭУ



	Работа РЭУ осуществляется в соответствии с общим алгоритмом работы системы, реализованном в виде программ функционального программного обеспечения (ФПО), с помощью которых в реальном масштабе времени решают следующие задачи:

- приём данных (кодов выборки сигнала порядка 256 Кбайт за такт (Таи – Тап)) от приёмного устройства по двум каналам типа «витая пара» в модули ЦОС ADP201сР5 через субмодули ADMDIO32. Здесь Таи – время начала излучения, Тап – время конца излучения;

- пространственная, спектральная и пороговая обработка полученных данных в модулях ЦОС и передача результатов обработки в процессор;

- формирование режимов работы системы, параметров излучения и обработки сигналов. Эти функции распределены по РМО;

- выдача управляющей информации всем устройствам системы (приёмному устройству, и двум синхронизаторам) и получение от устройств системы информации об их состоянии. 

	Эти функции выполняются с помощью ячейки информационного обмена. Этот же модуль от РЭУ Н07СТ получает четыре сигнала синхронизации, которые далее транслируются в модули ЦОС ADP201cP5;

- функциональный контроль РЭУ, который выполняется во всех программируемых модулях (ПЭВМ РМО, процессоре, модулях ЦОС) с привлечением и программ ФПО, и программ СТПО;

- отображение, регистрация и документирование результатов обработки информации. При этом информация для отображения формируется в ПЭВМ РМО и передаётся на их мониторы, включая индикатор коллективного пользования, а регистрация и документирование осуществляется преимущественно в HDD через контроллер RIO. Часть информации в квазиреальном времени может печататься на принтере.

	На этапах комплексной проверки системы РЭУ реализует комплексную имитационную модель станции (КИМС). Кроме этого, в соответствии с общим алгоритмом работы системы в квариреальном времени РЭУ проводит обработку информации с целью калибровки и юстировки РЛС.

	Аппаратура РЭУ может находится в следующих состояниях готовности:

- включено (ВКЛ) – состояние аппаратуры, при котором она включена и по данным функционального контроля исправна;

- отключено (ОТКЛ) – состояние аппаратуры, при котором вторичные источники питания отключены.

	Конструкция РЭУ должна обеспечивать эксплуатацию оборудования при рабочих температурах от плюс 5 до плюс 40 °С и в условиях повышенной влажности – не более 80 % при температуре 25 °С.

	При эксплуатации РЭУ используются: комплект измерительный К540 (ток, напряжение, мощность); частотомер Ф5043; миллиомметр Е6-18/1.







Рисунок 11. Схема электрическая функциональная РЭУ



2.3 Технические требования к ячейке информационного обмена

Целью разработки является создание ячейки для информационного обмена ЭВМ «Эльбрус 90 микро» и абонентов:

	- абонент 1 (АБ1) – антенно-фидерное устройство;

	- абонент 2 (АБ2) – приёмное устройство;

	- абонент 3 (АБ3) – устройство опорных сигналов синхронизации;

	- абонент 4 (АБ4) – передающее устройство.

Рассмотреть возможность реализации интерфейса абонентов:

	- абонент RS0 (АБ5) – опорно-поворотное устройство;;

	- абонент RS1 (АБ6)- резерв;

	- абонент RS2 (АБ7)- резерв.

Требования назначения

Ячейка конструктивно  и электрически должна сопрягаться с шиной cPCI (напряжение 5В) промышленной ЭВМ.

Ячейка должна обеспечивать прием, хранение и выдачу информации абонентам. 

Ячейка должна иметь 7 последовательных каналов для обмена с абонентами.

Временные диаграммы обмена с абонентами представлены в приложении 1.

Обмен с абонентом АБ5 должен проходить по интерфейсу RS-232, с абонентом 

АБ6 и АБ7 - RS-485. Ячейка должна иметь возможность использовать интерфейсы абонентов АБ6,  АБ7 как один интерфейс RS-422. Скорость обмена с абонентами АБ5, АБ6, АБ7 должна задаваться коэффициентом деления от максимальной скорости  115200 бит/c до минимальной 2400 бит/c по интерфейсу ADM-PIOX (см. 3.1.5) и проходить с одним стартовым, одним стоповым и одним контрольном битом до нечетности.

Ячейка должна иметь ОЗУ объемом достаточным для размещения одного массива переданной и одного массива принятой информации для каждого абонента.

Ячейка должна поддерживать интерфейс ADM-PIOX в режиме LVTTL 

(далее по тексту PIOX) для полудуплексного обмена с устройством формирования массивов. 

Ячейка должна иметь возможность транслировать четыре сигнала от устройства синхронизации на интерфейс SYNX  модуля ADP201cP5, а также сигнал T1Гц  как прерывание на шину cPCI. Трансляция сигналов разрешается и запрещается командой по интерфейсу PIOX. Линия прерывания шины cPCI выбирается командой по интерфейсу PIOX .

Ячейка должна предоставлять возможность функционального контроля последовательных каналов  по командам интерфейса PIOX.

Требования живучести и стойкости к внешним воздействиям:

По живучести и стойкости к внешним воздействиям ячейка должна соответствовать требованиям группы 1.1 УХЛ по ГОСТ В20.39.304-98 .

При воздействии климатических факторов в условиях эксплуатации, должны сохранятся технические и эксплуатационные характеристики в пределах требований и норм, установленных в подразделе 2.1 ОТТ ПМ0.100.081  для  группы 1.1. УХЛ.

Требования надежности:

время наработки на отказ  - не менее 30000 ч.

Требования к эксплуатации, хранению, удобству техническо-го обслуживания и ремонта:

изделие должно быть ремонтопригодно. При сложных неисправностях ремонт производится на заводе изготовителе. 

Требования к хранению в заводской таре предъявляются в соответствии с  п. 12.11 ОТТ ПМ0.100.081.





Требования технологичности:

производственная, эксплуатационная и ремонтная технологичность должна удовлетворять нормативным требованиям, приведенным в «Указаниях по технологии»   ПМ0.100.081, соответствовать требованиям ОТТ ПМ0.100.081 и обеспечивать достижение заданных технических требований  при минимальных затратах по их изготовлению, техническому обслуживанию и ремонту.

Конструктивные требования:

ячейка должна разрабатываться в соответствии с документом "Общие указания по конструированию"  ПМ0.100.081. Ячейка конструктивно  должна отвечать требованиям для устройств cPCI функционирующих  в составе промышленной ЭВМ.

По окончании разработки должна быть представлена КД в соответствии с комплектностью технических документов.

2.4 Назначение ячейки информационного обмена

Ячейка 3Д-Я202 (ячейка информационного обмена) предназначена для информационной связи РЭУ с другими устройствами (абонентами) РЛС.  

2.4.1. Интерфейсы ячейки информационного обмена

Ячейка 3Д-Я202 имеет 7 последовательных интерфейсов для обмена с абонентами и один интерфейс PIOX для информационного обмена с ячейкой цифровой обработки сигналов (ЦОС) ADP201cP5.

Порядок взаимодействия ячейки ЦОС ADP201cP5 и  ячейки 3Д-Я202: 

- запись по интерфейсу PIOX данных для передачи абоненту;

- передача ячейкой 3Д-Я202 данных абоненту и получение ответа  по последовательному каналу;

- чтение ячейкой ЦОС ADP201cP5 по интерфейсу PIOX полученных данных.

	Ячейка имеет следующие последовательные интерфейсы:	

- четыре интерфейса СК с самосинхронизирующимся кодом;

- два интерфейса RS-485;

- один интерфейс RS-232.

	Каждый интерфейс управляется контроллером,  имеющим две области ОЗУ для хранения выдаваемой и принимаемой информации. Объем ОЗУ контроллеров приведен в таблице 3.

Таблица 3. Объем ОЗУ контроллеров



Ячейка 3Д-Я202 также производит прием и трансляцию четырех сигналов получаемых от синхронизатора.

Последовательный интерфейс “СК”

Обмен с абонентами АФУ, приемное устройство, передающее устройство,  синхронизатор производиться самосинхронизирующимся последовательным кодом. Временная диаграмма обмена представлена на рис. 12 и 13. 





























Рисунок 12. Временная диаграмма обмена информацией последовательных СК кодом















Рисунок 13. Временная диаграмма выдачи 10-разрядного слова с двумя контрольными битами

Информация передается младшими битами вперед. Слово передачи имеет размер 10 бит в котором 8 бит информационные и 2 бита контрольные. Контрольные биты стоят на месте 5 и 10 бита.

Передатчиком является микросхема с открытым эмиттером 559ИП4, приемником -559ИП5.  Вход приемной микросхемы шунтирует на землю согласующий резистор номиналом 82 Ом.

Последовательный интерфейс RS-485

Интерфейс RS-485 использует приемопередатчик 5559ИН2Т. Между выходными  линиями А и B стоит согласующий резистор 120 Ом, лини подтянуты к земле и к +5 В через резисторы 1200 Ом. Абонент, с которым будет производиться  обмен  также должен иметь подтягивающие резисторы 1200 Ом.

 Скорость обмена задается  в диапазоне от 115200 бит/c до 2400 бит/c. Передача ведется по 8 бит  младшими битами вперед с одним стартовым, одним стоповым и одним контрольным битом до четности. 

Для подключения дренажного провода на разъеме XT6 контакты 14 и 15 соединены через резистор 120 Ом со схемной землей (цепь  ”Корпус 120 Ом  ”).

Протокол обмена предусматривает интервал тишины перед посылкой длиной 22 бита. Внутри посылки биты идут вплотную. Контроллер по команде, переданной по  интерфейсу PIOX, передает посылку (размер посылки определяет значение  регистра CR_outlength), после чего ожидает прихода ответа (размер ожидаемой   ответной посылки определяется в регистре CR_inlength). В случае, если ответная посылка не принята за время, определенное в регистре CR_timer, формируется ошибка.

Последовательный интерфейс RS-232

Контроллер интерфейса  RS-232 аналогичен контроллеру интерфейса RS-485.

Интерфейс RS-232 использует приемопередатчик 5559ИН1Т. 

На рис. 14-16 изображена ячейка информационного обмена.



Рисунок 14. Ячейка информационного обмена







Рисунок 15. Ячейка информационного обмена





Рисунок 16. Ячейка информационного обмена









2.5 Интерфейс PIOX

Интерфейс представляет собой 16 параллельных линий данных PIO и две управляющие линии PIO_WR и PIO_RD. Временные диаграммы чтения и записи одного  слова представлены на рис. 17 и 18.



Рисунок 17.  Временная диаграмма записи в ячейку 3Д-Я202



Рисунок 18.  Временная диаграмма чтения из ячейки 3Д-Я202

Tsetup  – время предустановки (не менее 20 нс)
Thold – время удержания (не менее 5 нс)

Twr, Tdr – время обмена (не менее 400 нс) 

Обмен данными с ячейкой 3Д-Я202 по интерфейсу PIOX

Обмен данными с ячейкой 3Д-Я202 по интерфейсу PIOX производиться пакетами.

Пакет начинается с записи заголовка пакета. В младших восьми битах заголовка записан адрес регистра или адрес ОЗУ, которому предназначены данные из информационной части пакета. В старших восьми битах записана длина информационной части пакета минус один (N-1). После записи заголовка следуют информационная часть в виде N циклов записи (или чтения). Для регистровой передачи N равно 1. Между пакетами разрешено чтение, результатом которого будет значение регистра состояния GR_status. Описанный протокол обмена изображен на рис. 19. 

Рисунок 19. Протокол обмена по PIOX

Адресация  при  передачах данных по интерфейсу PIOX

По интерфейсу PIOX доступны:

- общие регистры ячейки; 

- регистры контроллеров интерфейсов;

- ОЗУ контроллеров интерфейсов.

Общие регистры – регистры GR_status, GR_reset, GR_start, GR_lock, GR_trans, GR_sum, GR_info влияющие на работу всех контроллеров интерфейсов. 

Регистры контроллера – регистры CR_err, CR_count, CR_outlength, CR_inlength, CR_timer, CR_rate,  CR_setting влияющие  на работу только того контроллера интерфейса, которому принадлежат. Контроллеры  “СК- каналов” не имеют регистра CR_rate.

Адрес состоит  из трех частей:



Разряды 3,4 определяют  тип передачи.

Разряды 0-2 определяют номер канала и имеют смысл только при обращении к ОЗУ или регистру контроллера.

Канал 7 используется только для контроля работоспособности канала 6 и не учувствует в работе РЭУ.

Разряды 5-7 определяют номер регистра



Таблица 4. Распределение адреса ЗУ ячейки





Общие регистры ячейки 3Д-Я202

1) Регистр состояния ячейки (GR_status)					

	Регистр отображает состояние последовательных каналов ячейки и доступен только для чтения. 

Информация регистра:



2) Регистр запуска каналов (GR_start)					

	Пуск канала происходит автоматически по окончанию записи пакета в ОЗУ контроллера канала. Если требуется запустить контроллер без передачи новой информации в ОЗУ необходимо записать единицу в соответствующий бит контроллера.

	Регистр доступен только на запись. 

	Информация регистра:



3) Регистр сброса каналов (GR_reset)       				

	Предназначен для прерывания работы контроллера. Доступен только для записи.	

Для перезапуска работающего контроллера необходим цикл записи в регистр сброса, так как повторный пуск работающего контроллера не изменяет его состояния. 	

	Информация регистра:



4) Регистр блокировки пуска каналов (GR_lock)       			

	Дает возможность блокировки пуска канала по концу записи пакета данных  в ОЗУ контроллера.	Для блокировки пуска необходимо записать 1. Доступен только для записи.

	При необходимости чтения передающего ОЗУ также необходимо запрещать автоматический пуск каналов. В противном случае в конце чтения передающего ОЗУ канал будет запущен. 

	





   Информация регистра:



5) Регистр контроля целостности пакета (GR_sum)       			

	Регистр содержит сумму всех переданных данных в последнем пакете.

Доступен только для чтения.

6) Регистр управления трансляцией сигналов синхронизатора (GR_trans)	

	Доступен только на запись. Информация регистра:



7) Регистр информации о ячейке (GR_info)      			 	

	Доступен только для чтения. Содержит значение 0x1.

Регистры контроллеров последовательных интерфейсов ячейки 3Д-Я202



Регистры этой группы, за исключением регистра CR_rate, есть в каждом контроллере интерфейса. Заполнение регистров необходимо проводить до использования контроллера в противном случае контроллер будет работать некорректно.

1) Регистр ошибок (CR_err)						 

	Доступен только для чтения. Содержит информацию об ошибках в работе последовательного канала. Вся информация относиться к последней передаче по каналу, в начале новой передачи регистр сбрасывается.



2) Регистр счетчик ошибок (CR_count ) 					

	Регистр предоставляет информацию о количестве зарегистрированных ошибок четности  в канале. Сброс счетчика происходит при сбросе контроллера по команде с PIOX, ошибке времени ожидания ответной посылки, обращении по PIOX к памяти занятого контроллера. 

Только в СК канале.

Доступен только для чтения.





3) Регистр установки режимов канала (CR_setting )			

	Доступен только для записи. Информация регистра:

Установка значения 0 в битах 0 и 1 не разрешена.

4) Регистр времени ожидания  (CR_timer)				

	Доступен только для записи. Определяет максимальное время  отведенное для приема ответа. При превышении времени ожидания формируется ошибка. Единице значения соответствует время 100 нс. При записи значения 0x0 контроль времени отключается. Отсчет времени  идет от пуска канала.

5) Регистр количества слов для передачи (CR_outlength) 		

Регистр определяет количество слов для передачи в канале.

Доступен только для записи.

6) Регистр количества слов для приема (CR_inlength) 			

Регистр определяет количество слов принимаемых каналом RS. 

Для СК каналов, где есть признаки начала и конца принимаемой посылки значение этого регистра игнорируется.

Доступен только для записи.

7) Регистр скорости передачи (CR_rate ) 					

	Есть только в контроллерах RS каналов. Доступен только для записи. В него записывается коэффициент деления скорости передачи в диапазоне от 0 до 48. Коэффициенту 0 соответствует скорость 115200 бит/c.















3. Язык описания аппаратуры цифровых систем VHDL

3.1 Описание языка

VНDL (  (Very high speed integrated circuits) Hardware Description Language) -   ных схем.  VНDL является базовым языком при разработке аппаратуры современных вычислительных систем. [10]

Язык разработан в  г. по заказу Министерства обороны  для формального описания логических схем для всех этапов разработки электронных систем, начиная модулями  и заканчивая крупными вычислительными системами. [6]

Изначально VHDL предназначался для моделирования, но позднее из него было выделено синтезируемое подмножество. Написание модели на синтезируемом подмножестве позволяет автоматический синтез схемы функционально эквивалентной исходной модели. Средствами VHDL возможно проектирование на различных уровнях поведенческом или алгоритмическом, регистровых передач, структурном), в соответствии с техническим заданием и предпочтениями разработчика. Заложена возможность иерархического проектирования, максимально реализующая себя в экстремально больших проектах с участием большой группы разработчиков. Представляется возможным выделить следующие три составные части языка: алгоритмическую — основанную на языках Ada и Pascal и придающую языку VHDL свойства языков программирования; проблемно ориентированную — в сущности и обращающую VHDL в язык описания аппаратуры; и объектно-ориентированную, интенсивно развиваемую в последнее время. [7]

Стандартами , , , , , , ,  и  гг. закреплено множество его усовершенствований,  например начиная со стандарта VHDL-2000, язык приобретает основы объектно-ориентированной . Стандарт VHDL-93 является последним, полностью поддерживаемым средствами систем автоматизированного проектирования стандартом.

Данный язык создан как средство описания цифровых систем, но существует подмножество языка -  (Analog Mixed Signal), позволяющее описывать как чисто аналоговые, так и цифро-аналоговые схемы.

 Он как и Verilog поддерживается большинством производителей ПЛИС, в то 

время как AHDL разрабатывался исключительно для Альтеры. [6]         

 	Основное отличие от обычных языков программирования типа Си, Паскаля в том, что VHDL описывает параллельные процессы. Если код на Си или Паскале у нас выполняется по очереди команда за командой, то на VHDL разные блоки программы выполняются параллельно друг другу, но в тоже время в VHDL есть часть команд, которые выполняются последовательно. Поэтому структура 

программы в корне отличается от привычной микроконтроллерной.


Структура программы
Процесс программирования на VHDL чем то напоминает создание принципиаль- ной схемы устройства.
Шаг 1: Включение в код используемых библиотек.
Шаг 2: Описание точек входа и точек выхода устройства (аналогично входам и вы- ходам принципиальной схемы всего устройства).
Шаг 3: Описание точек входа и выхода элементов входящих в устройство (аналогично назначению функций ногам контроллера и другой логике в схеме)
Шаг 4: Описание архитектуры элементов входящих в устройство (вроде подбора логики типа ИЛИ-НЕ, И-НЕ, вобщем описание того как выход элемента завязан с его входом)
Шаг 5: Описание архитектуры всего устройства (типа соединения проводниками всех элементов схемы)









3.2 Описание разработанной программы

Программа узла PIOX выполнена на языке VHDL и является частью проекта конфигурации ПЛИС  ячейки 3Д-Я202 , выполненного с использованием системы автоматизированного проектирования Quartus II.

Программа реализует функции, предъявляемые заказчиком к специальному интерфейсу, предназначенному для информационного обмена с  ячейкой цифровой обработки(ЦОС) ADP201cP5, являющейся частью вычислительного комплекса РЛС и выполняет следующие задачи:

	- формирует границы (BORDER), внутри которых данные сопровождаются стробами DOUBLE_STROB_OUT и SINGLE_STROB_OUT, предназначенными соответственно для записи данных в память одного из контроллеров (двойной строб) или в один из регистров общего назначения или регистра контроллера (одиночный строб);

	- формирует границы, внутри которых данные сопровождаются стробами DOUBLE_STROB_IN и SINGLE_STROB_IN, предназначенными соответственно для чтения данных из памяти одного из контроллеров (двойной строб) или данных одного из регистров общего назначения или регистра контроллера (одиночный строб);

	- формирование парных и одиночных стробов записи и чтения производится из входных сигналов PIO_WR и PIOX_RD с использованием синхрочастоты CLK;

	- восьмиразрядный адрес памяти или регистра ADDR[7..0], к которым обращается интерфейс, выделяется из младшего байта заголовка пакета входных данных PIOX_DATA_IN[15..0], формат которого представлен в разделе2.5 дипломного проекта;

	- количество формируемых двойных и одиночных стробов, а также длительность сопровождающего их строба BORDER определяется содержимым старшего байта заголовка пакета, в котором содержится количество 16-разрядных слов информационной части пакета PIOX_DATA_IN[15..0] минус один;

	- программа производит буферизацию данных, предназначенных для записи PIOX_DATA_IN[15..0] и чтения PIOX_DATA_OUT[15..0] по интерфейсу PIOX;

	- программа производит побитное сложение по mod2 всех слов пакета для реализации возможности выдачи подсчитанной суммы пакета PIOX_PACK_SUM[15..0] через регистр общего назначения GR_SUM для контроля целостности пакета со стороны вычислительного комплекса.

Программа оформлена в виде символа «PIOX», входящего в состав проекта ячейки 3д-Я202.



Текст программы приведён в приложении 4.

	На рис. 20 представлена схема алгоритма программы













Рисунок 20. Схема алгоритма программы









     	





4 Расчет надежности ячейки информационного обмена

Расчет показателей надежности ячейки информационного обмена произведем с помощью программы АСРН (Автоматизированная система расчета надежности).

АСРН разработана на базе справочника "Надежность электрорадиоизделий" и позволяет рассчитывать надежность модулей 1-го и 2-го уровней без резервирования в режиме эксплуатации (только для отечественных ЭРИ) и хранения в составе подвижных и неподвижных объектов. Система снабжена генератором отчетов, а также конвертором результатов расчета в формат HTML, а также базой данных импортных ЭРИ, формируемой пользователями. [17]

	АСРН позволяет производить поиск по базе данных отечественных ЭРИ на предмет наличия. В случае положительного ответа ЭРИ будет выведен в дереве класс-группа-тип и на правой панели отобразятся все поля, которые необходимо заполнить. Поиск ЭРИ осуществляется по частичному соответствию без учета регистра до первого вхождения искомого фрагмента в базу данных типов ЭРИ. 

	АСРН позволяет рассчитывать надежность выбранного модуля 1-го или 2-го уровня в режимах эксплуатации и хранения. [17]

После выбора всех необходимых исходных данных: 

- режима, 

- отчета, 

- группы аппаратуры. 

становится активной кнопка "Просмотр". Нажатием на кнопку запускается процесс расчета суммарной интенсивности отказов выбранного модуля и одновременная генерация отчета. Сгенерированный отчет для модуля 1-го уровня содержит информацию об интенсивности отказов всех входящих в него ЭРИ и суммарную интенсивность отказов модуля. Если хотя бы один электрорадиоэлемент не просчитан (например, расчет в режиме хранения для импортных ЭРИ), то суммарная интенсивность отказов не выводится. Сгенерированный отчет для модуля 2-го уровня содержит информацию об интенсивности отказов всех входящих в него модулей 1-го уровня (с ЭРИ), интенсивности отказов непосредственно входящих в модуль 2-го уровня ЭРИ и суммарную интенсивность отказов модуля. Если хотя бы один электрорадиоэлемент не просчитан (например, расчет в режиме хранения для импортных ЭРИ), то суммарная интенсивность отказов не выводится как для модуля 1-го уровня, так и для модуля 2-го уровня. Сгенерированный отчет можно распечатать (идет повторный пересчет интенсивности отказов для передачи на канву принтера) выбрав предварительно тип принтера.

	Расчет показателя надежности приведен ниже в таблице 5.









Таблица 5. Расчет надежности ячейки



Продолжение таблицы 5





Примечание: λб (бсг) - исходная (базовая) интенсивность отказов типа (группы) ЭРИ для усредненных режимов применения в аппаратуре группы 1.1 (электрическая нагрузка, равная 0,4 от номинальной, температура окружающей среды tокр 30°С);

                       λэ - значение эксплутационной интенсивности отказов групп ЭРИ;

                       n - количество элементов; 

                       Кпр - коэффициент приемки - степень жесткости требований к контролю качества и правила приемки изделий;

                       Кэ - коэффициент эксплуатации - степень жесткости условий эксплуатации;

                       Ккорп - тип корпуса ИС;

                       Кст - сложность ИС и температура окружающей среды;

                       Кр  - коэффициент режима - величина электрической нагрузки и температура окружающей среды (корпуса изделия);

                      Кпс -  величина последовательно включенного с оксидно-полупроводниковым конденсатором активного сопротивления;

                      Кс- величина емкости;

                      KR - величина омического сопротивления;

                      Кстаб - точность изготовления (допуск) резистора;

                      Кkc - количество сочленений - расчленений в течение всего времени эксплуатации;

                      Кkk - количество задействованных контактов. 

                      

Время наработки на отказ ячейки:

         

  То ячейки = 1/ λ  ячейки = 1/0,8*10-5 =  125000 часов.





                      





5 Экологическая оценка компьютеризации общества

	Стремительное развитие компьютерной техники и глобальная компьютеризация общества увеличивают проблемы в области экологии. Важнейшими лимитирующими факторами в условиях глобальной компьютеризации мирового общества, является степень разрушения литосферы, вытеснение флоры и фауны в результате поиска, разработки и добычи полезных ископаемых, получении материалов, необходимых для изготовления компьютерной техники. При производстве материалов технологические процессы отрицательно влияют на атмосферу, гидросферу и литосферу, выделяя в больших объемах вредные вещества и отходы производства. Постепенно возрастает загрязнение атмосферы, гидросферы и литосферы за счет утилизации, переработки и захоронения материалов компьютерной техники после окончания срока эксплуатации. При изготовлении компьютерной техники, производства модулей, блоков, печатных плат технологические процессы отрицательно влияют на окружающую среду, потребляя невосполнимые запасы топлива, химические вещества и запасы воды, загрязняя атмосферу, гидросферу и образуя промышленные отходы. [14]

      Для производства одного ПЭВМ (системный блок, монитор, принтер), с общим весом  на технологические расходы потребуется ископаемого топлива, которое невозможно восполнить, для необходимых энергоносителей,  химических веществ и  воды.

         Компьютеризация, как и любая другая наукоемкая технология, привела к массе факторов, которые приводят к отрицательному воздействию не только на природу, но и на человека, как ее составной части. Пагубное влияя на природу образовавшиеся вредные факторы создают необратимые процессы в глобальной  и локальной экологических системах, и последствия которых на сегодняшний день трудно предвидеть.  Изучение этой проблемы необходимо, прежде всего, потому, что «цикл жизни»  компьютерной техники – это не только эксплуатация, а также и производство и утилизация после окончания срока эксплуатации. 

         Оценка компьютерной техники со стороны экологии  должна проходить на стадиях разработки и получения необходимых материалов, изготовления, эксплуатации, утилизации и переработке компьютерного лома после окончания срока эксплуатации. Все эти этапы с точки зрения загрязнения природы проходят следующие этапы:

        Первая стадия. При разработке и добычи сырья для производства черных, цветных и редких металлов происходит разрушение окружающей среды (уничтожатся или вытесняются флора и фауна, разрушается рельеф местности, истощаются недра земли).

       Вторая стадия. При разработке сырья, технологические процессы производства металлов и материалов отрицательно влияют на окружающую среду, выделяя в больших объемах пыль и вредные вещества в атмосферу и гидросферу, создают большое количество промышленных отходов.

       Третья стадия. При изготовлении компьютерной техники производство модулей, блоков, печатных плат технологические процессы отрицательно влияют на окружающую среду, выделяя вредные вещества в атмосферу, гидросферу и создают промышленные отходы.

      Четвертая стадия. При изготовлении компьютерной техники, возникают три фактора, пагубно влияющих на окружающую среду:

      Возрастает номенклатура и количество расходных материалов; 

      Многообразие различных излучений, которое оказывает отрицательное воздействие не только на конкретного пользователя, но и на все население. Усиление «электросмога» в крупных городах  повышает вероятность сердечнососудистых заболеваний, нарушение центральной нервной системы, приводит к повышенной утомляемости людей; 

      Повышение расхода электроэнергии. [14]

      Пятая стадия. После окончания срока эксплуатации компьютерной техники, возникают проблемы утилизации и переработки отдельных блоков, модулей, печатных плат, а также извлечение редких металлов из перечисленных узлов.

          После окончания срока эксплуатации компьютерной техники, образуется лом, одна тонна которого содержит  черных металлов, 200  кг меди,  алюминия,  серебра,  золота, остальное 33 элемента таблицы Д. И. Менделеева,  пластмассы. [14]

         На стадии утилизации и переработке «компьютерного лома» возникают сложные научно-технические  задачи из-за отсутствия надежной и эффективной технологии изготовления элементов из деталей ПЭВМ. Наличие в составе материалов ПЭВМ фтористо-хлористых соединений углеводорода, бромосодержащих средств защиты от возгорания, а также наличие пластмасс отрицательно влияют на природу. Из пластмасс только 20% может быть переработано, остальное требует захоронения. Часть элементов таблицы Д. И. Менделеева: германий, галлий, барий, тантал, ванадий, бериллий, европий, титан, марганец, актиний, висмут, хром, кадмий, ниобий, иттрий, ртуть, мышьяк в силу сложности извлечения практически не подлежат переработке и оседают в виде примесей в переработанном компьютерном ломе.  Снижение отрицательного воздействия компьютеризации на природу может быть обеспечено складывающимися следующими направлениями:

     1. сокращением номенклатуры элементов таблицы Д. И. Менделеева на стадии изготовления отдельных деталей компьютерной техники.

     2.  разработкой и производством «экологически чистых» компьютеров;

     3. созданием технологических процессов, обеспечивающих прецизионное извлечение и переработку элементов таблицы Д. И. Менделеева из отдельных деталей;

     4. разработкой комплекса нормативных документов, стандартов безопасности и эргономики всеми государствами, которые производят и эксплуатируют компьютерную технику. [14]

           Понимание перечисленных проблем имеет значение для будущего человеческого общества. Глубокие знания специалистов в области компьютерных технологий «жизненного цикла» компьютерной техники и умение составить экологический баланс является новым этапом в понимании экологической составляющей этой проблемы будущего.































































































6 Безопасность жизнедеятельности

6.1 Анализ вредных факторов при длительных статических нагрузках на пользователя

Эксплуатация ПЭВМ и технологического процесса на этом современном оборудовании, ведёт за собой  возникновение  вредных производственных факторов.

        Одним из основных понятий вредного воздействия, возникающем при эксплуатации компьютерной техники, является синдром длительных статических нагрузок (СДСН). Он является следствием длительного пребывания пользователя в одинаковом положении  и повторении одних и тех же трудовых операций. [12]

        Условиями появления СДСН является статическое состояние пользователя при выполнении им манипуляций на ПЭВМ, в результате не соответствующих эргономических характеристик оборудования, мебели и рабочего места. [12]

        Структурная схема связи ПЭВМ – программируемый продукт – пользователь представлена на рис. 21.









Рисунок 4.1 - Структурная схема ПЭВМ - пользователь

        Рисунок 21. Структурная схема связи ПЭВМ – программируемый продукт – пользователь представлена

Характерными особенностями трудовых операций на компьютере являются  однотипные постоянные движения кистей и пальцев при нажатии на клавиши с целью ввода, поиска, печатания, построения, анализа необходимой информации, изображаемой в текстовой форме на экране монитора под контролем зрения. А это значит, что ведущими компонентами трудового процесса при работе на компьютере служат однообразные многократно повторяющиеся нагрузки на руки и постоянное напряжение зрения, а также нервно-эмоциональное напряжение, связанное с ответственностью за решение поставленных задач. Постоянное пребывание в сидячем положение связано со статическим напряжением опорно-двигательной системы оператора, связанного с поддержкой сидячей рабочей позы и пониженной активностью в целом. Особая опасность компьютера для здоровья состоит в том, что все вредные факторы дают о себе знать не сразу, а спустя некоторое время. [18]                                                       

          В результате не соблюдения правильной осанки возможно развитие грыжи межпозвоночных дисков шейного или поясничного отделов, перенапряжение мышцы шеи, плеча и грудной клетки. [13]  

Необходимо учитывать параметры микроклимата которые  приведены в таблице 6.

Таблица 6.  Допустимые параметры микроклимата

                                                                                       







Категория работ:

	1) Легкая 1 а - работы, которые производятся сидя, с сопровождающимся незначительным физическим напряжением;

	2) Легкая 1 б - работы, которые выполняются сидя и стоя.

         Если нет соответствия параметрам микроклимата, имеет место чрезмерная запыленность и загазованность – в первую очередь углекислым газом и аммиаком при повышенной температуре и влажности воздуха (особенно в холодный период года). В результате страдают органы дыхания, снижается содержание кислорода в мышечных тканях сердца, крови, головного мозга и глаз.

6.2 Организация рабочего места

        	Оптимально организованное  рабочее место и взаимное расположение всех его элементов соответствует антропометрическим, физическим и психологическим требованиям. Большое значение имеет также характер работы. В частности, при организации рабочего места программиста рекомендуется соблюдать следующие основные условия: эргономичное размещение оборудования, входящего в состав рабочего места и достаточное рабочее пространство, позволяющее осуществлять все необходимые движения и перемещения. [13]                                                                                                                

Эргономическими аспектами проектирования видеотерминальных рабочих мест, в частности, являются: высота рабочей поверхности, размеры пространства для ног, требования к расположению документов на рабочем месте (наличие и размеры подставки для документов, возможность различного размещения документов, расстояние от глаз пользователя до экрана, документа, клавиатуры и т.д.), характеристики рабочего кресла, требования к поверхности рабочего стола, регулируемость элементов рабочего места.                                    

       	Рабочий     стол регулируется по высоте в пределах 680-; при отсутствии такой возможности его  высота обычно составляет . Оптимальные размеры рабочей поверхности столешницы - 1400х1000 мм. Под столешницей рабочего стола находится свободное пространство для ног с размером по высоте не менее , по ширине - , по глубине - . На поверхности рабочего стола для документов необходимо предусматривать размещение специальной подставки, расстояние которой от глаз аналогично расстоянию от глаз до клавиатуры, что позволяет снизить зрительное утомление. [13]

     	Зоны досягаемости рук в горизонтальной плоскости с обозначением основных зон досягаемости показаны на рис. 22.



Рисунок 22. Зоны досягаемости рук в горизонтальной плоскости

     	Оптимальное размещение предметов труда и документации в зонах досягаемости: 

- дисплей размещается в зоне а (в центре); 

- системный блок  размещается в предусмотренной нише стола; 

- клавиатура размещается в зоне г/д; 

- «мышь» размещается в зоне в справа; 

- сканер размещается в зоне а/б (слева); 

- принтер находится в зоне а (справа); 

     	На рис. 23 показан пример размещения основных и периферийных составляющих ПК на рабочем столе пользователя. 

     	Документация: необходимая при работе - в зоне легкой досягаемости ладони, а в выдвижных ящиках стола - литература, неиспользуемая постоянно. Рабочий стул (кресло) снабжен подъемно-поворотным устройством, обеспечивающим регуляцию высоты сидений и спинки; его конструкция предусматривает также изменение угла наклона спинки. Рабочее кресло  имеет подлокотники. [13]









1 – сканер, 2 – монитор, 3 – принтер, 4 – поверхность рабочего стола,

5 – клавиатура, 6 – манипулятор типа «мышь».

Рисунок 23. Размещение основных и периферийных устройств ПЭВМ

     	Регулировка каждого параметра должна осуществляться легко, быть независимой и иметь надежную фиксацию. Высота поверхности сидения регулируется в пределах 400-. Ширина и глубина сиденья составляет не менее . Высота опорной поверхности спинки - не менее , ширина - не менее 380мм. Радиус ее кривизны в горизонтальной плоскости - . Угол наклона спинки изменяется в пределах 90-110o к плоскости сиденья. Рекомендуемый материал покрытия рабочего стула обеспечивает возможность легкой очистки от загрязнения. Оптимальная поверхность сиденья и спинки - полумягкая, с нескользящим, не электризующим и воздухопроницаемым покрытием. [13]

      	На рабочем месте необходимо предусматривать подставку для ног. Ее длина составляет , ширина - . Предусматривается регулировка высоты в пределах от 0 -  и угла её наклона в пределах 0 – 200, а также рифленое покрытие и бортик высотой  по нижнему краю. 

     	 Клавиатуру рекомендуется располагать на поверхности стола на расстоянии 100 –  от края, обращенного к пользователю или на специальной, регулируемой по высоте рабочей поверхности, отделенной от основной столешницы.

      	Большое значение придается правильной рабочей позе пользователя. При неудобной рабочей позе могут появиться боли в мышцах, суставах и сухожилиях. Требования к рабочей позе пользователя следующие:

- наклон головы не более, чем на 20o;

- плечи расслаблены;

- предплечья и кисти рук – в горизонтальном положении.

Необходимо также учитывать режим труда (перерывы на отдых) предоставленный в таблице 7.

Таблица 7. Время регламентных перерывов в зависимости от продолжительности рабочей смены, вида и категории трудовой деятельности с видеомонитором

          Для избавления от утомления с туловища и ног выполняют физические упражнения для мышц ног, живота и спины для усиления венозного кровообращения в этих частях тела, что способствует предотвращению застойных явлений крово- и лимфообразования, отечности в нижних конечностях.

        	Физические упражнения выполняются в форе физкультурной пятиминутки:

Исходное положение (и.п.) - основная стойка. 1 - шаг влево, руки к плечам, прогнуться. 2. и.п. 3-4 - повторить то же самое в другую сторону. Следует повторить 6-8 раз. Выполнять в медленном темпе.

     Исходное положение - стойка руки врозь. 1 - упор присев. 2 - и.п. 3. - наклон вперед, руки впереди. 4 – и.п. Повторить следует 6-8 раз.

    	И.п. – стойка ноги врозь, руки за голову. 1-3 – круговые движения тазом в одну сторону. 4-6 – повторить то же самое в другую сторону. Следует повторить 4-6 раз. Выполнять в среднем темпе. 

     	Создание благоприятных условий труда и правильное эстетическое оформление рабочих мест на производстве имеет психологическое значение и снижает психологические нагрузки на пользователя. 

























































7 Организационно-экономический раздел



7.1 Планирование разработки программного обеспечения с построением графика



Тема данного дипломного проекта представляет собой разработку конфигурации ПЛИС ячейки информационного обмена. В данном разделе определяется трудоёмкость и затраты на создание ПО, а так же производится расчёт основных технико-экономических показателей проекта.

7.1.1. Определение трудоемкости и продолжительности работ по созданию ПО

Процесс разработки включает в себя: обзор существующих, на момент работы, систем, анализ и выбор программных продуктов для создания программы; отладка; испытание. Каждый из этих этапов можно подразделить на отдельные подэтапы и входящие в них работы. 

Согласно ГОСТ 23501.179 регламентируются следующие стадии проведения исследования:

техническое задание  ТЗ (ГОСТ 23501.2  79);

эскизный проект  ЭП (ГОСТ 23501.5  80);

технический проект  ТП (ГОСТ 23501.680);

рабочий проект  РП (ГОСТ 23501.1181);

внедрение ВП (ГОСТ 23501.1581).

         На всех стадиях проведения исследования выполняются работы, перечень которых показан в таблице 8.

Таблица  8. Состав работ и стадии разработки ПО



Трудоемкость выполнения работ по созданию ПО определяется по сумме трудоемкости этапов и видов работ, оцениваемых экспертным путем в человеко-днях, и носит вероятностный характер, так как зависит от множества трудно учитываемых факторов. [15]

Трудоемкость каждого из видов работ определяется, по формуле:

					(1)

где   минимально возможная трудоемкость выполнения отдельного вида работ;

  максимально возможная трудоемкость выполнения отдельного вида работ.

Продолжительность каждого вида работ в календарных днях (Ti) определяется по формуле:

						(2)

где   трудоемкость работ, [человеко-дни];

  численность исполнителей, [чел.] [15]

  коэффициент, учитывающий выходные и праздничные дни:



где   число календарных дней;

  число рабочих дней;

Для расчета принимается среднее значение равное .

Весь список видов и этапов работ по созданию ПО, экспертные оценки и расчетные величины их трудоемкости, а также продолжительность каждого вида работ, рассчитанные по формулам (1) и (2), представлены в таблице 9. Разработку ПО выполняют два человека: руководитель работы и инженер – программист.



















Таблица 9. Расчет трудоемкости и продолжительности работ по созданию ПО


   Продолжение таблицы 9.





Общая расчетная трудоемкость работ по созданию ПО составляет 88 чел. дней, а их продолжительность  99 календарных дня.

7.1.2. Построение ленточного графика разработки ПО

Инструментом планирования работ выбран ленточный график. Он наглядно представляет  последовательность и взаимосвязь отдельных работ,  срок их начала и окончания. График представлен в виде таблицы, в которой перечислены наименования стадий разработки и видов работ, а такжепоказывает сколько нужно времени на их выполнение. Продолжением таблицы является ленточный график, который построен в масштабе, отражающем длительность каждой работы в виде отрезков времени, которые располагаются в соответствии с последовательностью выполнения работ.

Ленточный график разработки ПО, построенный по данным таблицы 9, приведен на рисунке  24.






























Рисунок 24. Ленточный график разработки ПО



7.2. Расчет затрат на разработку программного обеспечения.

Сметная стоимость проектирования и внедрения программы включает в себя следующие затраты, определяемые по формуле (3):

Спр=Сосн + Сдоп + Ссоц + См + Смаш.вр + Сн,			(3)

где:

Спр – стоимость разработки ПО;

Сосн – основная заработная плата исполнителей;

Сдоп – дополнительная заработная плата исполнителей, учитывающая потери времени на отпуска и болезни (принимается в среднем 10% от основной заработной платы);

Ссоц – отчисления во внебюджетные фонды государственного социального страхования (пенсионный фонд, фонд обязательного медицинского страхования, фонд социального страхования), рассчитываются как 0,26% от основной и дополнительной заработной платы;

См – затраты на используемые материалы;

Смаш.вр – стоимость машинного времени.

Сн – накладные расходы включают затраты на управление, уборку, ремонт, электроэнергию, отопление и др. (принимаются в размере 60% от основной и дополнительной заработной платы);

Заработная плата исполнителей

На статью «Заработная плата» относят заработную плату научных, инженерно-технических и других работников, непосредственно участвующих в разработке. Она рассчитывается по формуле (4):

                                             Зисп = Зср * T,	(4)

где:

Зисп – заработная плата исполнителей (руб.);

Зср – средняя тарифная ставка работника организации разработчика ПО (руб./чел./дни);

Т – трудоемкость разработки ПO (челoвекодни).

Зср определяется пo формуле (5):

                                   Зср = C / Фмес,	                                                          (5)

где:

C – зарплата труда на текущий момент времени (руб./мес.);

Фмес – месячный фонд рабочего времени исполнителя (дни).

Затраты на статью «Заработной платы» приведены в таблице 10.

Таблица 10. Затраты на заработную плату



Дополнительная заработная плата

	Дополнительная заработная плата на период разработки ПО рассчитывается относительно основной и составляет 10% от ее величины:

Cдоп = Cосн * 0,1 = 14886 (руб.)

Расчет отчислений на социальное страхование

      	Социальное страхование включает отчисления во все внебюджетные фонды, в том числе пенсионный, занятости, обязательного медицинского страхования, социального страхования. Отчисления на социальное страхование рассчитываются относительно выплаченной заработной платы (суммы основной и дополнительной заработной платы). Составляют 26%:

                            Cсоц = (Cдоп + Cосн) * 0,26	                                      (6)

Cсоц = (14886 + 148860) * 0,26 = 42574 (руб.)







Расчет расходов на материалы

    	К этой статье относят все затраты на магнитные носители данных, бумагу, для печатных устройств, канцтовары и др. Затраты по ним определяются по экспертным оценкам. Расчет расходов на материалы приведен в таблице 11.

Таблица 11. Расчёт затрат на материалы



Накладные расходы

На статью «Накладные расходы» относят расходы, связанные с управлением и организацией работ. Накладные расходы рассчитываются относительно основной заработной платы. Величина накладных расходов принимается равной 60% от основной зарплаты исполнителей. [15] Формула расчета (7):

                          Cн = Cосн * K,	(7)

где:

	CH – накладные расходы (руб.);

Cосн – основная заработная плата исполнителей (руб.);

K – коэффициент учета накладных расходов (K = 0,6)	                    

                                    CH = 148860 * 0,6 = 89316 (руб.)

Расчет стоимости машинного времени

Затраты на машинное время, необходимое для разработки ПО, расходы на приобретение и подготовку материалов научно-технической информации, расходы на пользование средствами связи. Расчет осуществляется по формуле (8):

	Cмаш.вр = Kмаш.вр * Змаш.вр	(8)

           где:

Kмаш.вр – тарифная стоимость одного часа машинного времени (Kмаш.вр=50 руб./ч.)

Змаш.вр – машинное время, используемое не проведение работ.

Необходимое количество машинного времени для реализации проекта по разработке программы рассчитывается по формуле:

                                         Змаш.вр = ti * Tсм * Tср.маш,	(9)

где:

ti – трудоемкость работ, чел.дней;

         Tсм – продолжительность рабочей смены (При пятидневной рабочей неделе Tсм = 8 ч.);

        Tср.маш – средний коэффициент использования машинного времени (Tср.маш = 0,7).

Тогда:                         Змаш.вр = 88 * 8 * 0,7 = 492,8 (ч.)

          Стоимость машинного времени составит:

	Cмаш.вр = 50 * 492,8 = 24640 (руб.)

Результаты расчета затрат на проектирование программного обеспечения сведены в таблице 11.

Таблица 11. Смета затрат на разработку и внедрение программы



   Таким образом, себестоимость разработки составляет 324676 руб.

Данная программа может быть реализована на рынке. При расчетном количестве реализованных программ (n=5), оптовая цена программы (Цопт) может быть рассчитана по формуле:

Цопт = ;

где:

Cпр – себестоимость разработки программы;

П – прибыль, определяется по формуле:



     ;

где:

	Ур – средний уровень рентабельности (Ур = 20%).



В результате получаем оптовую цену:

Цопт = 324676/5 + (324676/5)*0.2 = 77922 (руб.)

Отпускная цена реализации программы потребителям (Цотп), рассчитывается по формуле:



где:

HДС - налог на добавленную стоимость, рассчитывается в соответствии с действующей ставкой этого налога – 18% от оптовой цены программы.

Цопт = 77922 + 77922*0.18 = 77922 + 14026 = 91948 (руб.)

 Таким образом, отпускная цена программы составит 91948  руб., в том числе HДC – 14026  руб.









7.3 Расчет основных техникоэкономических показателей  использования программного продукта.

     	 Рынком сбыта разработанного устройства будут являться предприятия, занимающиеся выпуском радиолокационных станций, поскольку ячейка информационного обмена является элементом, необходимым для  их работы. 

Вследствие специализации данного товара его распространение будет происходить по заказу  предприятий-производителей приемников для РЛС и авиакомпаний, производящих модернизацию существующего оборудования.

Разработанное устройство можно представить потенциальным покупателям (в частности для нужд ВПК) по более выгодной для них цене, чем подобная продукция зарубежных фирм.

Основные техникоэкономические показатели проекта приведены в таблице 13.

Таблица 13.  Основные тeхникоэкoнoмичeскиe показатели проeктa

Продолжение таблицы 13


Заключение 

В дипломном проекте была разработана программа конфигурации ПЛИС для узла интерфейса, при помощи которого осуществляется обмен  данными вычислительного комплекса РЛС с аппаратурой радиолокационного устройства. Осуществлена проверка и отладка этой программы средствами САПР Quartus II. Узел интерфейса является частью проекта ячейки информационного обмена 3Д-Я202. Ячейка является буферным устройством при передаче данных между модулем цифровой обработки вычислительного комплекса и устройствами, входящими в состав РЛС, что позволяет осуществлять техническое и функциональное управление этими устройствами и производить контроль их технического и функционального состояния.

В рамках дипломного проекта была разработана структурная схема ячейки 3Д-Я202.

В дипломе произведен расчет надежности ЭРИ ячейки информационного обмена с помощью программы “АСРН” (Автоматизированная система расчета надежности).



























Список литературы



1. Проектирование на ПЛИС. Курс молодого бойца. издат Додэка-ХХI, 2007 

2. Применение интегральных микросхем в электронной вычислительной технике: Справочник; Под редакцией Б.Н. Файзуллаева и Б.В. Тарабрина.М: “Радио и связь”, 1986. 

3.Системы автоматизированного проектирования фирмы Altera MAX+plus 2 и  Quartus 2. Комолов Д.А., Мяльк Р.А., Зобенко А.А., Филиппов А.С.: “ИП РадиоСофт”, 2002

4. Интегральные микросхемы ТТЛ, ТТЛШ. Под редакцией А.В. Лысенко.: “Машиностроение”,1995

5.Нефедов В. И. Основы радиоэлектроники и связи. Учеб. пособие, - М.: Высш. шк., 2009.

6. Проектирование цифровых систем на VHDL. Е. А. Суворова, Ю. Е. Шейнин, 2003

7. Сергиенко А.М. VHDL для проектирования вычислительных устройств, Москва, 2003

8. Белоцерковский «Основы радиотехники и антенны» Москва, Советское радио, 1969.

9. СанПиН 2.2.2/2.4.1340-03. Гигиенические требования к персональным электронно-вычислительным машинам и организация работы.-М.: Федеральный центр госсан-эпиднадзора Минздрава России, 2003. -54с.

10 . 

11.  ГОСТ 12.0.003-74*. ССБТ. Опасные и вредные производственные факторы. Классификация.

12.  Гетия И. Г. Безопасность при работе на ПЭВМ. – М.:МГАПИ, 2005, 73 с.

13. ГОСТ 12.2.032-93. ССБТ. Рабочее место при выполнении работ сидя. Общие эргономические требования.



14. Экология компьютерной техники. – Учебное пособие /  Гетия И. Г., Шумилин В. К., Леонтьева И. Н., Гетия С. И., Кривенцов С. М.,Комиссарова Т. А., Скребенкова Л. Н., Костюченко В. Е. – М., .

15.  Чаплыгин В.А. Организационно-экономический раздел дипломных работ научно-исследовательского характера. М., МГАПИ. 2000.

16.  Методические указания по сбору материалов на преддипломной практике и выполнению организационно-экономического раздела дипломных проектов. М., 2004

17. Руководство пользователя программой АСРН. М.,  ОАО «Российский научно-исследовательский институт «ЭЛЕКТРОНСТАНДАРТ », 2006

18.  http://dvkuot.ru/index.php/otpk/117-factor

19. 





































Приложение 1

Параметры временной модели FLEX10K









Приложение 2







	



















Приложение 3

Карта оценки номенклатуры примененных ЭРИ и сведений о соответствии условий их эксплуатации

и показателей надежности требованиям НТД

	

































	



Продолжение приложения 5









































	Продолжение приложения 5



































	





	Продолжение приложения 5









































	Продолжение приложения 5





































Приложение 4

Разработанная программа



library IEEE;

use IEEE.std_logic_1164.all;

use IEEE.std_logic_unsigned.all;

use IEEE.std_logic_arith.all; 





ENTITY PIOX_PackDecode IS

	PORT

	(

	    aclr            : IN    STD_LOGIC;                     

-- сброс конечного автомата



		PIOX_DATA_IN	: IN	STD_LOGIC_VECTOR(15 DOWNTO 0); -- входные линии пио

		PIOX_DATA_OUT	: OUT	STD_LOGIC_VECTOR(15 DOWNTO 0); -- выходные линии в пио  



		aPIOX_WR  		: IN	STD_LOGIC;                     

-- сигнал управления на пио	(не синхронный) (запись)

		

sPIOX_RD  		: IN	STD_LOGIC;                    

 -- сигнал управления на пио  (синхронный) (чтение)

		

sPIOX_WR  		: IN	STD_LOGIC;                     

-- сигнал управления на пио  (синхронный) (запись)

		

		ADDR			: OUT	STD_LOGIC_VECTOR(7 DOWNTO 0);  

-- адрес из заголовка пакета

		DATA_IN			: IN	STD_LOGIC_VECTOR(15 DOWNTO 0); 

-- данные для пакета

		

DATA_OUT		: OUT	STD_LOGIC_VECTOR(15 DOWNTO 0); 

-- данные из пакета



		PIOX_ERR		: OUT	STD_LOGIC;					   	-- ошибка пакета (неверный формат пакета) сбрасывается успешной обработкой пакета и сигналом aclr (начальной установки)

		

		BORDER          : OUT   STD_LOGIC;                     

-- границы пакета

		

DOUBLE_STROB_OUT: OUT	STD_LOGIC;				 -- парные стробы записи в память

		

SINGLE_STROB_OUT: OUT	STD_LOGIC;					 -- одиночный строб записи в регистр

		

		DOUBLE_STROB_IN: OUT	STD_LOGIC;					 	 -- парные стробы чтения из памяти

		

SINGLE_STROB_IN: OUT	STD_LOGIC;					 -- одиночный строб чтения из регистра

		

		PACK_SUM		: OUT	STD_LOGIC_VECTOR(15 DOWNTO 0); 

-- cумма данных пакета из регистра  GR_SUM

		                                                      10011000=0x98

		CLK: IN    STD_LOGIC;                      

-- F = 20 МГц	

         		-- debug 

      		-- VEC8            : OUT   STD_LOGIC_VECTOR (7 DOWNTO 0); 

      		-- VEC2            : OUT   STD_LOGIC_VECTOR (1 DOWNTO 0); 



     

        deb_a            : OUT   STD_LOGIC;

        deb_b            : OUT   STD_LOGIC



	);



END PIOX_PackDecode;





ARCHITECTURE AUTOMAT OF PIOX_PackDecode IS 

    	signal State    : STD_LOGIC_VECTOR(1 downto 0);  

    	-- текущее состояние автомата

    

signal N        : std_logic_vector (7 downto 0); 

    	-- номер обрабатываемого слова из пакета



    	signal ssUnion:STD_LOGIC;      

-- обединение выравненых стробов PIOX_WR и PIOX_RD 



    	signal Reset:STD_LOGIC;        

 	-- сборка aclr и SelfReset

     

signal SelfReset:STD_LOGIC;    

-- сброс при некорректном пакете



    	signal tSTROB_IN:STD_LOGIC;    

 	-- сигнал служит признаком генерации парных стробов



    	signal tData_Out: std_logic_vector (15 downto 0);

 -- данные на PIOX в момент PIOX_WR

                                        

    	signal tADD:STD_LOGIC;         

-- задержка границ пакета BORDER для проходжения всех стробов 



tSTROB_OUT

    

signal tBORDER:STD_LOGIC;      

-- граница инф. части пакета - предвестник сигнала занятия RAM



    	signal HOLD_sPIOX_WR:STD_LOGIC; 

    	-- задержаный сигнал PIOX_WR используется для определения запись/чтение в смешанном сигнале ssUnion существует в положительной области, те не как PIOX_WR         

                                     

    	signal Delay_sPIOX_RD:STD_LOGIC;  

    	-- задержаный сигнал PIOX_RD



   	 signal tPACK_SUM		: STD_LOGIC_VECTOR(15 DOWNTO 0);



   	 signal tADDR    		: STD_LOGIC_VECTOR(7 DOWNTO 0);



    	signal C_SIGN    		: STD_LOGIC;



BEGIN



  --V1<=Reset;

  --V2<=SelfReset;



  ADDR<=tADDR;



  PACK_SUM<=tPACK_SUM;



  DATA_OUT<=tDATA_OUT;



  	ssUnion<= sPIOX_RD AND sPIOX_WR ; 

-- объединение нужно, так как подсчет количества слов идет и в записи и в чтении

                                   

  Reset<=(SelfReset and (NOT (sPIOX_WR AND sPIOX_RD))) or aclr; 

  -- сброс происходит по aclr или по ошибке протокола, сброс по ошибке протокола удерживается до конца импульса PIOX_RD/WR вызвавшего его; после сброса возобновляется и Selfeset освобождается  

                

  BORDER<=tBORDER OR tADD;          

-- границы пакета формируются от конца заголовка пакета до конца последнего слова пакета + время на формирование импульсов записи                    



  PIOX_DATA_OUT<=DATA_IN;         

-- просто сквозное прохождение

-- задержанный сигнал PIOX_RD для выделения переднего фронта в импульсе PIOX_RD



Delay_sPIOX_RD_drive: PROCESS(sPIOX_RD,CLK)



BEGIN

  

if CLK'event and CLK='0'  then 

               Delay_sPIOX_RD<=sPIOX_RD;

  		else NULL;

 		 end if;

END PROCESS Delay_sPIOX_RD_drive;

-- данные на запись действительны в момент переднего фронта PIOX_WR



DATA_OUT_drive: PROCESS(aPIOX_WR)

BEGIN

  if aPIOX_WR'event and aPIOX_WR='1'  then 

               tDATA_OUT<=PIOX_DATA_IN;

  else NULL;

  end if;

END PROCESS DATA_OUT_drive;



-- Адрес формируется из заголовка пакета при записи или при чтении между пакетами

-- Количество слов непрерывно отслеживается для определения границ пакета



ADDR_N_drive: PROCESS(Delay_sPIOX_RD,sPIOX_RD,State,ssUnion,HOLD_sPIOX_WR)

variable HOLD_sPIOX_RD:STD_LOGIC;



BEGIN



  	HOLD_sPIOX_RD:=Delay_sPIOX_RD and sPIOX_RD;



 		 if    HOLD_sPIOX_RD='0'  and State="00" then tADDR<="00011000";

  		elsif ssUnion'event and ssUnion='1'  then 

             if HOLD_sPIOX_WR='1' and State="00" then   

                                       N<=tDATA_OUT(15 downto 8);

                                       tADDR<= tDATA_OUT(7  downto 0);



                                       if tDATA_OUT="10011000" then NULL;

                                       -- в начале пакета счетчик сбрасывается

                                       		else  tPACK_SUM<="0000000000000000";

                                       			end if;

-- сумма подсчитывается в конце записи, если это не запись заголовка (State=0) и не регистр GR_sum

-- при цикле чтения этого регистра его значение гарантированно не изменяется

            

 elsif State="11" OR State="10" OR State="01" then 

                     	if State="11" OR State="10" then  N<= N-1;  

                                       else NULL;

                                       		end if;

                                       -- при обращении по адресу RG_sum счета не происходит

                                      

 if    tADDR="10011000" then NULL;

                                       -- в записи счет значений в момент aWR

                                       

elsif HOLD_sPIOX_WR='1' then  tPACK_SUM<=tPACK_SUM+tDATA_OUT;

                                       --при чтении в момент sRD 

                                      

 elsif HOLD_sPIOX_WR='0' then  tPACK_SUM<=tPACK_SUM+DATA_IN;

                                       end if;

                                      



            			 else NULL;                                                      

            				 end if;

  						else NULL;

  							end if;





END PROCESS ADDR_N_drive;



BORDER_drive: PROCESS (ssUnion,sPIOX_RD,Reset)



BEGIN



  if Reset='1' then  tBORDER<='0';

  elsif ssUnion'event and ssUnion='1' then 

     

         if State="00" then                  

                    if  HOLD_sPIOX_WR='1' then 

                                          tBORDER<='1';

                    else NULL;

                    		end if;



         elsif State="11" OR State="10" then                                         

                                         if  N="00000001" then tBORDER<='0';                  

                                         else NULL;

                                         end if;

         elsif State="01" then

                                         if  N="00000000"  then tBORDER<='0';                  

                                         else NULL;

                                         end if;

         else NULL;

         end if;

  else NULL;

  end if;             

        



END PROCESS BORDER_drive;



-- парные стробы записи формируются  после импульса PIOX_WR

STROB_OUT_drive: PROCESS (CLK,State,Reset)

 variable count: std_logic_vector(2 downto 0);

BEGIN

-- sPIOX изменяется по переднему фронку CLK

 if Reset='1' then  count:="000";

                    tADD<='0'; 

                    HOLD_sPIOX_WR<='0';

                    DOUBLE_STROB_OUT<='0';

                    SINGLE_STROB_OUT<='0';



 elsif CLK'event and CLK='0' then 

              if    sPIOX_WR='0' then count:="111";

              elsif sPIOX_WR='1' AND count="000" then NULL;

              else  count:=count-1;

              end if; 

 

-- в первом такте nCLK зависимые от него State и count еще не изменились и в случае если State = 0 они пропускают свой такт установки и не выставляют tADD

              if    count="111" and State="000" then tADD<='0';

-- если State не мешает tADD выставляется уже в началн PIOX_WR

              

elsif count="111" then tADD<='1';

-- по концу счета сигнал возврвщается в исходное состояние

              

elsif count="000" then tADD<='0';

              else NULL;

              end if; 

-- HOLD_sPIOX_WR продливает сигнал на 8,5 тактов

             if    count="000" then HOLD_sPIOX_WR<='0';

             elsif count="111" then HOLD_sPIOX_WR<='1';

             else NULL;

             end if; 

-- двойной строб для записи

            if tADD='1' then 

               CASE count IS

                 when "110"=>  DOUBLE_STROB_OUT<='1';  SINGLE_STROB_OUT<='1';

                 when "101"=>  DOUBLE_STROB_OUT<='0';  SINGLE_STROB_OUT<='0';

                 when "100"=>  DOUBLE_STROB_OUT<='1';  SINGLE_STROB_OUT<='0';

                 WHEN OTHERS =>DOUBLE_STROB_OUT<='0';  SINGLE_STROB_OUT<='0';                            

              END CASE;

            end if;



 else NULL;

 end if;

 



END PROCESS STROB_OUT_drive;





-- стробы чтения формируются в начале импульса PIOX_RD



STROB_IN_drive: PROCESS (CLK,State,tSTROB_IN)

 variable count: std_logic_vector(2 downto 0);

BEGIN

 if CLK'event and CLK='0' then 

              if    tSTROB_IN='0' then count:="111"; -- tSTROB_IN признак начала генерации

              elsif count="000" then NULL;

              else  count:=count-1;

              end if;  



              CASE count IS

                   when "110"=>  DOUBLE_STROB_IN<='1'; SINGLE_STROB_IN<='0';

                   when "101"=>  DOUBLE_STROB_IN<='0'; SINGLE_STROB_IN<='1';

                   when "100"=>  DOUBLE_STROB_IN<='1'; SINGLE_STROB_IN<='0';

                   WHEN OTHERS =>DOUBLE_STROB_IN<='0'; SINGLE_STROB_IN<='0';                           

               END CASE;





  else NULL;

  end if; 



END PROCESS STROB_IN_drive;





-- конечный автомат отслеживает фазы обработки пакета данных

MAIN: PROCESS (CLK,sPIOX_RD,sPIOX_WR,Reset,State,aclr)    

   variable StatePrepare  :std_logic_vector (1 downto 0); -- следующее состояние автомата





BEGIN



 -- сброс состояния автомата

  if Reset='1' then 

                 if aclr='1' then PIOX_ERR<='0'; else NULL; end if;

                 tSTROB_IN<='0';                      

                 State<="00";

                 StatePrepare:="00";

                

  elsif  CLK'event AND CLK='0' then          

               

        if  sPIOX_RD='0' then





                   CASE State IS

                          WHEN "00" => tSTROB_IN<='1';                                       

                                       StatePrepare:="00";                              



                          WHEN "01" => tSTROB_IN<='1';  

                                       if N="00000000" then StatePrepare:="00"; 

                                                            PIOX_ERR<='0';   

                                       else StatePrepare:="10";

                                       end if;                 

                                                                                 



                          WHEN "10" => tSTROB_IN<='1';  

                                       if N="00000001" then StatePrepare:="00"; 

                                                            PIOX_ERR<='0';          

                                       else StatePrepare:="10";

                                       end if;                                                              

                                                                              



 						  WHEN "11" => 

                                       PIOX_ERR<='1';

                                       SelfReset<='1';                                       

                                	   StatePrepare:="00";   

                                       

                          WHEN OTHERS => NULL; 

                  END CASE;





        elsif   sPIOX_WR='0' then





                   CASE State IS

                          WHEN "00" => StatePrepare:="01";

                              

                          WHEN "01" => if N="00000000" then StatePrepare:="00";

                                                            PIOX_ERR<='0';

                                       else StatePrepare:="11";

                                       end if;



                          WHEN "11" => 

                                	   if N="00000001" then StatePrepare:="00";

                                                            PIOX_ERR<='0';

                                       else StatePrepare:="11";

                                       end if;

                                       

                                

 						  WHEN "10" => PIOX_ERR<='1';  

                                	   StatePrepare:="00";   

                                       SelfReset<='1';





                          WHEN OTHERS => NULL;                             



                  END CASE;





               -- поскольку оба нуля уже удалены в LineUp в else - случай когда оба '1'

        else    State<=StatePrepare; -- сменить состояние

                SelfReset<='0';

                tSTROB_IN<='0';



        end if;      







  else NULL; 





   end if;    --  main if



deb_a<=tSTROB_IN;

deb_b<=sPIOX_RD;





END PROCESS MAIN;	





END AUTOMAT;