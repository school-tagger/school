

Список терминов и сокращений

ARIS – Architecture of Integrated Information Systems;

eEPC – extended event-driven process chain;

IIS – Internet Information Services;

MVC – Model-view-controller;

SEMS – Student Employment Management System;

UML – Unified Modeling Language;

БП – бизнес-процесс;

БД – база данных;

ИС – информационная система;

 ИТ – информационные технологии;

 Кафедра ИТБ – Кафедра информационных технологий в бизнесе;

 ПО – программное обеспечение;

 СУБД – система управления базами данных;

 ФИО – фамилия, имя и отчество.

Введение

В настоящий момент на факультете бизнес-информатики обучается около двухсот студентов по специальностям бизнес-информатика и программная инженерия. В работе рассматривается система взаимодействия работодателей с факультетом, а именно: подсистемы работодателя и администратора. Тема исследования является актуальной по нескольким причинам. Работодатели могли бы рассматривать студентов факультета в качестве потенциальных ИТ-специалистов, а также влиять на учебный процесс факультета: предлагать темы курсов, курсовых работ, практик, оповещать студентов о тренингах, проводимых компаниями. В настоящее время с одной стороны наблюдается недостаток ИТ-специалистов в компаниях, а с другой стороны на факультете бизнес-информатики НИУ ВШЭ-Пермь обучается множество нетрудоустроенных студентов, обладающих хорошей теоретической базой знаний. Существуют различные профессиональные социальные сети, сайты, приложения по трудоустройству. Однако отсутствие высокой концентрации (сосредоточения) студентов, сотрудников факультета и работодателей хотя бы на одном из этих ресурсов делает использование этих средств неэффективными. 

В работе описывается проблема низкого уровня взаимодействия работодателей с факультетом бизнес-информатики. Для текущего положения характерно:

незнание работодателями навыков, которыми обладают студенты факультета; 

незнание работодателями проектных работ, которыми занимаются студенты факультета в рамках учебного плана и вне его рамок;

сложность при оповещении факультета о появившихся вакансиях у работодателей;

отсутствие контактной информации студентов и сотрудников факультета у работодателей для оповещения о мероприятиях, проводимых компаниями, а также для предложений о сотрудничестве.

Объектом исследования является процесс взаимодействия работодателей с факультетом бизнес-информатики, а предметом – информационная система взаимодействия работодателей с факультетом бизнес-информатики. 

Цель работы заключается в разработке подсистем работодателя и администратора информационной системы связи работодателей с факультетом бизнес-информатики для повышения уровня взаимодействия работодателей с факультетом. Для достижения поставленной цели необходимо решить ряд задач:

изучить источники информации по проблеме низкого уровня взаимодействия работодателей с факультетами или вузами;

провести обзор существующих систем взаимодействия работодателей с факультетами или вузами;

провести анкетирование работодателей для формирования функциональных требований к ИС;

выбрать технологии для программной реализации системы;

описать модели БП взаимодействия работодателей с факультетом AS_IS и TO_BE;

написать техническое задание к разработке ИС;

спроектировать и разработать подсистемы работодателя и администратора;

написать руководства работодателя и администратора к использованию системы;

наполнить базу данных и провести тестовую апробацию информационной системы.

Предпроектное исследование

В данной главе были даны определения ключевым понятиям, которые используются в выпускной квалификационной работе. Был проведен обзор бумажных и электронных источников по рассматриваемой проблеме взаимодействия работодателей с вузами с целью применения результатов обзора при проектировании системы. Особое внимание было уделено анализу существующих систем взаимодействия работодателей с факультетами. Кроме того, было выполнено описание бизнес-процессов взаимодействия работодателей с факультетом бизнес-информатики. Также было проведено анкетирование работодателей с целью выявления функциональных требований к подсистеме работодателей, и были выбраны технологии для разработки информационной системы.

Ключевые понятия

Бизнес-информатика является новым междисциплинарным направлением, и многие понятия не имеют устойчивого содержания. В данной главе выделим основные ключевые понятия, которые будут использованы в работе, и проанализируем существующие определения. 

Одним из ключевых понятий данной выпускной квалификационной работы является информационная система. Рассмотрим существующие определения информационной системы более подробно. Российский ученый М. Р. Когаловский предлагает следующее определение: «Информационная система – это комплекс, включающий вычислительное и коммуникационное оборудование, программное обеспечение, лингвистические средства и информационные ресурсы, а также системный персонал и обеспечивающий поддержку динамической информационной модели некоторой части реального мира для удовлетворения информационных потребностей пользователей» [1]. Данное определение является довольно полным, однако не уточняется, какие информационные потребности пользователей удовлетворяются.

В современном экономическом словаре информационные системы рассматриваются как «системы хранения, обработки, преобразования, передачи, обновления информации с использованием компьютерной и другой техники» [2]. В этом определении указаны информационные потребности, которые должна удовлетворять ИС, однако не указаны ее составляющие. В свою очередь, профессор Roland Gabriel из немецкого Рурского университета характеризует ИС следующим образом: «Ein Informationssystem (IS) ist im engeren Sinne (und so wird es i.d.R. verstanden) ein computergestütztes Anwendungssystem, d.h. ein Softwaresystem zur Ausführung betrieblicher Aufgaben. Im weiteren Sinne werden die Technik (Hard- und Software), die Menschen und die Anwendungen in einem Informationssystem zusammengefasst, das auch als Informations- und Kommunikationssystem (IuK-System) bezeichnet wird» [3]. Это определение содержит информацию о компонентах ИС, а также ее назначение («для выполнения бизнес-задач»). Однако не указывается, какие именно информационные потребности пользователей удовлетворяются в рамках ИС.

Все рассмотренные определения являются неполными и не могут быть использованы в данном исследовании. Таким образом, необходимо дать свое наиболее полное определение ИС как комплекса, включающем вычислительное и коммуникационное оборудование, программное обеспечение, лингвистические средства и информационные ресурсы, а также системный персонал и обеспечивающий поддержку динамической информационной модели некоторой части реального мира для удовлетворения информационных потребностей пользователей, в частности хранения, обработки, преобразования, передачи, обновления информации.

Далее рассмотрим определение системы управления трудоустройством студентов (student employment management system). Kathy J. Bialk, директор подразделения услуг финансовой помощи студентам (Student Financial Aid Services) в технологическом институте Нью-Джерси (New Jersey Institute of Technology), определяет student employment management system как «system that facilitates efficient and effective coordination of campus resources to serve the needs of students, campus employers and administrative officers, as well as assists the university in meeting employment regulatory requirements» [4]. Заметим, что потенциальные работодатели студентов могут находиться не только на территории кампуса, но и за его пределами. Адаптируем определение системы управления трудоустройством студентов как «системы, способствующей эффективному взаимодействию работодателей и студентов с целью их трудоустройства, а также эффективному взаимодействию работодателей и сотрудников факультета с целью подготовки студентов, способных соответствовать требованиям работодателей».

Обзор источников по проблеме взаимодействия работодателей со студентами

Проблема взаимодействия работодателей со студентами достаточно актуальна, подтверждением чему является множество иностранных бумажных и электронных ресурсов, в которых описаны определенные  аспекты этого взаимодействия. Целью обзора таких ресурсов  является понимание сути проблемы взаимодействия, ее основных аспектов, а также рассмотрение принципов эффективного взаимодействия, которые могут быть отражены в разрабатываемой информационной системе. Проведем обзор этих источников.

В книге «Effective Management of Student Employment», написанной группой авторов под руководстом David A. Baldwin, особое внимание уделяется организации трудоустройства студентов. В частности, рассматриваются вопросы о принятии студентов на работу, выплате различных компенсаций, проведению тренингов, наставничестве, оценке эффективности деятельности студентов на рабочем месте, правах студентов как работников и многое другое. Особое внимание уделяется составлению описания вакансий. Необходимо рассмотреть этот аспект более подробно, так как формирование описания вакансий в рамках информационной системы будет являться неотъемлемой частью процесса взаимодействия работодателей с факультетом.

Согласно авторам, качественное описание вакансий должно удовлетворять следующим критериям [5]:

содержать только достоверные данные о вакансии (без преувеличений);

быть кратким, но также должно полностью отражать суть вакансии;

не должно содержать жаргонной лексики;

описывать обстановку, в которой будет протекать рабочая деятельность;

содержать список требований, которым необходимо удовлетворять для получения соответствующей вакансии;

описывать функции наставника касательно данной вакансии;

содержать критерии оценки эффективности работы студента.

В рамках функционирования подразделения, отвечающего за управление человеческими ресурсами университета Техаса в городе Остин, был создан раздел на сайте университета, посвященный трудоустройству студентов. По словам сотрудников подразделения, трудоустройство студентов имеет ряд особенностей в сравнении с устройством на работу выпускников и других категорий людей [6]. Во-первых, работодателю необходимо осознать тот факт, что обычно студент не готов работать на полную ставку, значит необходимо учитывать возможные отсутствия студента на рабочем месте по будням, а также гибкий рабочий график. Во-вторых, работодатель должен учитывать отсутствие студентов на работе во время подготовки к экзаменам и их сдачи. В-третьих, для занятия определенных вакансий студент может нуждаться в проведении предварительного обучения.  Кроме того, первые этапы работы студента целесообразно сопровождать неким наставником, который будет консультировать новоиспеченного работника, а также оценивать эффективность его рабочей деятельности.

Проведенный обзор литературы позволил выявить ключевые моменты взаимодействия работодателей со студентами при их трудоустройстве. Полученная информация будет использована при формировании требований к функциям разрабатываемой информационной системы.

Анализ аналогов

Основным аспектом взаимодействия работодателей с вузом является трудоустройство студентов, прохождение производственных практик, а также формирование различных предложений работодателей факультету (например, чтение каких-либо курсов, проведение тренингов, предложение тем проектных работ). В данном разделе целесообразно уделить внимание инструментам, которые могут использоваться для взаимодействия работодателей с вузами.

Наиболее яркими представителями подобных систем являются сайты по поиску работы, такие как hh.ru, SuperJob.ru, Rabota.ru, Job.ru. Возможны различные тарифы использования этих сайтов работодателем с целью публикации вакансий. Для того чтобы начать размещать вакансии, необходимо зарегистрировать компанию на одном из сайтов. Сайт hh.ru предоставляет работодателю богатый функционал при размещении вакансий. Например, имеется возможность прикрепить к вакансии вопрос или тест. В этом случае кандидат не сможет откликнуться на вакансию, не ответив на вопросы, опубликованные работодателем [7], что значительно увеличивает качество откликов. Кроме того, настройки кабинета работодателя позволяют работодателю получать на электронный адрес уведомление о каждом новом отклике на опубликованную вакансию. Необходимо отметить, что недостатком применения рассматриваемых сайтов по поиску работы к взаимодействию работодателей с факультетом бизнес-информатики НИУ ВШЭ-Пермь является отсутствие высокой концентрации работодателей и студентов хотя бы на одном из ресурсов.

Другим инструментом взаимодействия работодателей с вузами являются социальные сети. В рассматриваемом сегменте можно выделить как профессиональные социальные сети (например, LinkedIn), так и социальные сети общей направленности (ВКонтакте, Facebook). Рассматриваемые инструменты могут являться незаменимыми элементами для таких аспектов взаимодействия работодателей с факультетом как оповещение о тренингах и других мероприятиях, организуемых работодателем. Существуют социальные сети, которыми активно пользуются и студенты, и сотрудники факультета, и работодатели. Однако в рамках рассматриваемых систем такие задачи как поиск студентов по набору навыков могут не выполняться вообще. Таким образом, использование рассмотренных систем не может охватить все аспекты взаимодействия работодателей с факультетом. 

Анализ существующих систем взаимодействия работодателей с вузами

Наиболее яркими представителями систем связи работодателей с факультетами являются веб-порталы следующих зарубежных университетов: Singapore Management University [8],  Arizona State University [9], Boston University [10], New Jersey Institute of Technology [4]. В данном разделе более подробно будет рассмотрена система, используемая в технологическом институте Нью-Джерси.

Доступ к этой веб-системе организован при помощи веб-интерфейса, при ее разработке были использованы следующие технологии: Java Server Pages, Java, Apache Tomcat Servlet, а также база данных университета, содержащая информацию о восьми тысячах студентах на 2005 год. Выделяется три группы пользователей в рамках системы: студент, работодатель и администратор. Работодателю предоставляется возможность:

добавления вакансий в базу данных портала;

управления вакансиями (открытие и закрытие);

расширенный поиск по резюме;

назначение собеседования или отклонение кандидата;

использование услуг технической поддержки в режиме он-лайн.

Студент, в свою очередь, способен выполнять поиск вакансий, подавать резюме на интересующие вакансии, а также принимать или отклонять предложения о трудоустройстве, поступающие от работодателя. Администратору предоставляется важная функция в рамках информационной системы - валидация вакансий работодателей и резюме студентов. 

Внедрение веб-портала в процесс взаимодействия внесло значительный вклад в функционирование подразделения услуг финансовой помощи студентам университета (Student Financial Aid Services), а также множество студентов было трудоустроено на неполный рабочий день. Функции данного портала целесообразно перенять для разработки подсистемы работодателей информационной системы в рамках взаимодействия работодателей с факультетом бизнес-информатики. 

Необходимо отметить, что системы взаимодействия студентов с работодателями, применяемые в зарубежных университетах, имеют достаточно узкую специализацию – речь идет лишь о трудоустройстве студентов и прохождении стажировок. Такие аспекты взаимодействия, как оповещение о тренингах работодателей, прохождении производственных практик, а также написании проектных работ на темы, предложенные работодателями, не происходят в рамках системы.

Анкетирование работодателей

Целью проведения опроса работодателей является получение детальной информации об их целях при взаимодействии с факультетом, а также о функциях и требованиях к разрабатываемой системе. Для проведения анкетирования работодателей использовался сервис Google Docs. Форма анкеты представлена в приложении A. Было опрошено пять работодателей города, из них:

руководитель группы (1);

специалист отдела кадров (1);

специалист отдела по взаимодействию с вузами (1);

инженер-программист (1);

консультант (1).

Результаты заполнения анкеты респондентами представлены в приложении B. На основе результатов анкетирования в следующей главе будут сформированы функциональные требования к подсистеме работодателя.

Выбор технологии для программной реализации системы

Необходимо отметить, что разрабатываемое веб-приложение ориентировано на применение в рамках факультета бизнес-информатики НИУ ВШЭ-Пермь, большинство приложений которого реализованы на продуктах компании Microsoft. Наличие академической подписки позволяет избежать дополнительных затрат, связанных с приобретением лицензий.

Как известно, серверная часть веб-приложения - это программа или скрипт на сервере, обрабатывающая запросы пользователя (точнее, запросы браузера). Для программирования серверной части веб-приложения могут использоваться различные языки программирования: Java, PHP, Perl, Ruby, платформа .NET (языки VB.NET, C# и другие, поддерживаемые .NET) [11]. В виду владения автора работы навыками программирования на языке C#, было решено, что целесообразно использовать именно его в рамках разработки серверной части приложения.

СУБД – это программное обеспечение, которое занимается хранением данных и их выдачей в нужный момент. Серверная часть веб-приложения обращается к базе, извлекая данные, которые необходимы для формирования страницы, запрошенной пользователем [11]. Необходимо отметить, что в рамках рассматриваемой системы предстоит работа со структурированными данными. Была решено использовать СУБД под названием Microsoft SQL Server.

Как известно, наиболее популярными технологиями для разработки веб-порталов являются технология ASP.NET и использование программных продуктов Sharepoint. Оценим эти технологии по следующим критериям:

расширенная система авторизации пользователей;

простая работа с файлом web.config;

высокая скорость рендинга страниц;

простота модификации приложения.

Для оценивания технологий ASP.NET и Sharepoint использовалась экспертная оценка автора по 5-бальной шкале. Результаты сравнения технологий по определенным критериям приведены в таблице 1.1:

Сравнение технологий ASP.NET и Sharepoint

Очевидно, по удобству реализации (удобству для разработчика) SharePoint превосходит ASP.NET по некоторым критериям. Например, разработчики приложений ASP.NET создают свои собственные системы авторизации с практически нуля. В SharePoint Foundation имеется расширяемая система авторизации с развитой объектной моделью [12].

Важным элементом при разработке веб-приложения является работа с файлом web.config. При разработке в ASP.NET файлы web.config находятся под управлением разработчика и поставляются вместе с решением, что является значительным преимуществом ASP.NET перед Sharepoint. В SharePoint Foundation файлами web.config управляет администратор фермы. Изменить или расширить набор параметров в файле web.config можно одним из двух способов [13]:

путем создания вспомогательного файла webconfig.MySolution.xml, параметры которого будут применяться ко всем веб-приложениям в ферме SharePoint Foundation;

путем добавления параметров web.config для одного или нескольких веб-приложений с помощью объектной модели SharePoint Foundation.

Необходимо отметить, что SharePoint является ресурсоемким продуктом. Технология ASP.NET является более выгодной с точки зрения скорости рендеринга страниц. Кроме того, при разработке веб-порталов, бизнес-логика которых может значительно измениться с течением времени, целесообразнее использовать технологию ASP.NET, так как она позволит разработать веб-приложение «с нуля», без зависимостей от вспомогательных продуктов, которые предоставляет Sharepoint, в результате чего модификация приложения не должна вызвать множество трудностей.

В результате проведенного анализа было решено использовать технологию ASP.NET для программной реализации системы взаимодействия работодателей с факультетом, а именно фреймворк MVC. Разработка приложения на основе MVC имеет следующие преимущества перед разработкой на основе веб-форм [14]:

облегченное управление сложными структурами путем разделения приложения на модель, представление и контроллер;

неиспользование состояния просмотра и серверных форм, что делает платформу идеальной для разработчиков, которым необходим полный контроль над поведением приложения;

использование схемы основного контроллера, при которой запросы веб-приложения обрабатываются через один контроллер, что позволяет поддерживать расширенную инфраструктуру маршрутизации.

Проектирование и разработка подсистем

Данная глава посвящена проектированию и разработке подсистем работодателя и администратора. Были описаны модели бизнес-процессов AS_IS, построены модели бизнес-процессов TO_BE. Также была спроектирована база данных и написано техническое задание к разработке информационной системы взаимодействия факультета бизнес-информатики НИУ ВШЭ-Пермь с работодателями. Техническое задание к информационной системе представлено в приложении E. Руководства пользователя-работодателя и пользователя-администратора с подробным описанием сценариев работы с системой и скриншотами сайта представлены соответственно в приложении F и приложении G. Кроме того, были описаны особенности разработки веб-приложения. Примеры исходных кодов проекта представлены в приложении H.

Описание моделей бизнес-процессов AS_IS

В настоящий момент времени взаимодействие работодателей с факультетом бизнес-информатики НИУ ВШЭ-Пермь определяется следующими процессами:

процесс трудоустройства студентов;

процесс организации производственных и преддипломных практик студентов;

процесс оповещения студентов и сотрудников факультета о мероприятиях и тренингах, проводимых компаниями, а также предложения работодателей о сотрудничестве (чтении курсов, предложении тем проектных работ).

Рассмотрим процесс трудоустройства студентов с точки зрения работодателя. Он сводится к тому, что у организации появляется потребность в рабочей силе, при этом работодатель может либо обратиться в рекрутинговое агентство, либо осуществить поиск новых сотрудников самостоятельно. На рисунках 2.1 – 2.4 представлен бизнес-процесс оказания рекрутинговой услуги работодателю в нотации ARIS eEPC. 



Рисунок 2.1. БП оказания рекрутинговой услуги работодателю (часть 1)



Рисунок 2.2. БП оказания рекрутинговой услуги работодателю (часть 2)



Рисунок 2.3. БП оказания рекрутинговой услуги работодателю (часть 3)



Рисунок 2.4. БП оказания рекрутинговой услуги работодателю (часть 4)

Вначале сотрудникам рекрутингового агентства необходимо изучить информацию о работодателе. Для этого нужно осуществить поиск в локальной БД и в интернете. Если информация найдена, то ее необходимо проанализировать с целью определения, надежен ли работодатель. Если он не надежен, то руководитель отдела по подбору персонала уведомляет работодателя об отказе в предоставлении услуг. Если же работодатель надежен, то маркетолог проводит анализ рынка заработной платы по вакансии для того, чтобы определить, является ли заявленная работодателем заработная плата «в рынке». После этого формируется детальный заказ на подбор персонала. Заказ содержит: данные о компании, требуемые компетенции, заработную плату. После этого экономист рассчитывает стоимость проекта, и руководитель финансового отдела согласует ее с заказчиком. Далее заключается договор с работодателем, после чего начинается активный поиск кандидатов в локальной базе соискателей, а также в профессиональных социальных сетях. 

Поиск кандидатов является ключевым этапом в процессе оказания рекрутинговой услуги работодателя. Помимо профессиональных социальных сетей могут быть задействованы такие подразделения как «Центр развития карьеры» и «бизнес-инкубатор». Для того чтобы отправить вакансию, работодатель может либо написать письмо на адрес электронной почты подразделения «Центр развития карьеры», либо воспользоваться сервисом Google Docs, позволяющим в удобной форме заполнить соответствующую информацию. Работодатели могут посещать мероприятия подразделения «бизнес-инкубатор» с целью коммуникации с амбициозными студентами факультета для их дальнейшего трудоустройства. Необходимо отметить, что резидентами этого является множество работодателей начинающих ИТ-компаний города.

При нахождении нужных лиц рекрутер связывается с ними по телефону, задает уточняющие вопросы и принимает решение о проведении собеседования. Далее следует «вторичный» отбор – проведение собеседований с кандидатами, в результате которого определяются потенциальные работники. После проведения серии собеседований с кандидатами, руководитель отдела по подбору персонала проводит собеседование с работодателем. Если работодатель не выбрал работника, то вновь начинается поиск кандидатов на соответствующую вакансию. Если же работодатель сделал выбор, то он оплачивает оказанные ему услуги. После выхода подобранного кадровым агентством сотрудника на работу подразделение несет перед работодателем гарантийные обязательства, которые представляют собой обязанность подразделения произвести бесплатную замену подобранного специалиста в случае расторжения с ним трудового договора по инициативе работодателя или работника в течение определенного срока. Причинами расторжения трудового договора могут быть неудовлетворительный результат испытания при приеме на работу, собственное решение работника уволиться и другие. В таблице 2.1 проведен расчет средней длительности оказания рекрутинговой услуги работодателю:

Расчет длительности БП оказания рекрутинговой услуги 

«Узким местом» рассмотренного бизнес-процесса является этап поиска кандидатов по профессиональным социальным сетям в виду того, что далеко не все студенты активно пользуются профессиональными социальными сетями. Это приводит к тому, что рекрутеры остаются в неведении о теоретических знаниях и практических навыках студентах. Разработка и внедрение информационной системы взаимодействия работодателей с факультетом должно значительно сократить длительность этапа поиска кандидатов.

Как правило, в составе крупных компаний присутствует отдел по подбору персонала. В этом случае работодатель может не пользоваться услугами рекрутингового  агентства. На рисунках 2.5 – 2.7 построена модель бизнес-процесса поиска новых сотрудников на примере одной из пермских ИТ-компаний. 

Когда у руководителя подразделения возникает потребность в дополнительной «рабочей силе», он формирует заявку на поиск новых сотрудников, согласует ее с дирекцией и, в случае одобрения, передает заявку в отдел по подбору персонала. Отдел по подбору персонала формирует детальное описание вакансии и осуществляет процесс поиска новых кандидатов. Данный этап протекает аналогично соответствующему этапу процесса оказания рекрутинговой услуги работодателю, а значит «узкие места» процесса те же самые.

В случае  нахождения кандидатов специалист отдела по подбору персонала назначает собеседование с кандидатом, при этом само собеседование (либо по скайпу, либо в режиме оффлайн) проводит руководитель подразделения. Если кандидат вызывает сомнения у руководителя подразделения, то ему выдается тестовое задание. В случае его успешного выполнения происходит трудоустройство кандидата. Необходимо отметить, что на одну вакансию в среднем претендует 4 кандидата, в результате чего этап «Проведение собеседования» повторяется 4 раза. 



Рисунок 2.5. БП поиска новых сотрудников (часть 1)



Рисунок 2.6. БП поиска новых сотрудников (часть 2)



Рисунок 2.7. БП поиска новых сотрудников (часть 3)

В таблице 2.2 приведен расчет длительности бизнес-процесса поиска новых сотрудников на примере одной из пермских ИТ-компаний:

Расчет длительности БП поиска новых сотрудников

Другим аспектом взаимодействия работодателей с факультетом является организация производственных практик. На рисунках 2.8 – 2.9 изображена модель процесса организации практик студентов. Особое внимание следует уделить этапам оповещения представителей факультета и студентов о существующих заданиях на практику. Сейчас работодатели оповещают представителя факультета либо по телефону, либо по электронной почте, а представитель факультета оповещает студентов в устной форме. При этом возможно ненамеренное упущение некоторых важных деталей о заданиях на практику и условиях ее прохождения у конкретного работодателя. Внедрение ИС упростит рассматриваемый процесс – работодатели смогут добавлять подробную информацию о практиках в БД ИС, а студенты и сотрудники факультета будут иметь доступ к этой информации.  



Рисунок 2.8. БП организации практик студентов (часть 1)



Рисунок 2.9. БП организации практик студентов (часть 2)



В таблице 2.3 приведен приблизительный расчет длительности этапов рассматриваемого процесса:

Расчет длительности БП организации практик студентов

Описание моделей бизнес-процессов TO_BE

Анализ аспектов текущего процесса взаимодействия работодателей с факультетом выявил «узкие места» в виде отсутствия целенаправленного взаимодействия между предприятиями и студентами. Процессы взаимодействия являются весьма громоздким, выполнение отдельных подпроцессов требует немалых временных затрат от исполнителей. В связи с этим, предлагается оптимизировать процесс взаимодействия за счет разработки информационной системы связи работодателей с факультетом. Для того чтобы наглядно представить функции конечных пользователей системы, была построена диаграмма вариантов использования информационной системы в нотации UML (см. рис. 2.10 – 2.11): 





Рисунок 2.10. Диаграмма вариантов использования для системы



Рисунок 2.11. Диаграмма вариантов использования для подсистем работодателя и администратора



Для определения функций работодателя в рамках системы было проведено анкетирование, на основе чего были спроектирован персонаж работодателя как конечного пользователя информационной системы. Перечень функций работодателя и администратора системы приведен в техническом задании в приложении E. 

Для эффективной работы системы необходимо хранение персональных данных о конечных пользователях. Например, имеется необходимость хранить такую информацию о студентах как номера телефонов н номера студенческих билетов (для просмотра данных об успеваемости студента на сайте факультета). Однако российское законодательство накладывает некоторые ограничения на обработку персональных данных [15]. Было принято решение о том, что только сами пользователи смогут добавлять свои персональные данные в систему, если у них возникнет такое желание. Необходимо отметить, что результаты рассмотрения различных вариантов использования информационной системы конечными пользователями легли в основу проектирования схемы базы данных.

У работодателя и администратора возникает множество вариантов использования информационной системы (см. табл. 2.4 – 2.18):

Добавление/редактирование данных о работодателе

Просмотр страницы работодателя

Добавление/редактирование данных о компании

Просмотр страницы компании

Просмотр отзывов о компании

Добавление/редактирование вакансий

Просмотр вакансии

Формирование рассылки

Поиск студентов

Просмотр данных о студенте

Добавление студента в раздел «Избранное»

Добавление/редактирование данных о студентах

Просмотр/редактирование избранных студентов

Добавление/редактирование данных о сотрудниках факультета

Просмотр данных о сотрудниках

Проектирование базы данных

Этап проектирования структуры базы данных является важнейшим этапом проектирования всего веб-приложения. Структура реляционной базы данных главным образом определялась функциональными потребностями конечных пользователей системы: работодателя, администратора, сотрудника факультета и студента. Схема базы данных была приведена к третьей нормальной форме. В ходе работы было спроектировано 34 таблицы. Были использованы такие типы отношений между сущностями как наследование. Например, базовая сущность «User» наследуется следующими сущностями: «Employer», «Student», «DepartmentStaffMember»; базовая сущность «BasicVacancy» наследуется сущностями: «Vacancy», «Practice». Для выделения различных функциональных потребностей был создан справочник ролей, содержащий следующие записи: «студент», «администратор», «работодатель», «сотрудник факультета». Общая схема базы данных приведена в приложении C, а описание структуры базы данных представлено в приложении D.

Разработка веб-приложения

Для разработки информационной системы использовалась технология создания веб-приложений ASP.NET с использованием фреймворка MVC 4 в Visual Studio 2013. Для проектирования базы данных использовался продукт Microsoft SQL Server Management Studio. В Visual Studio было создано решение, содержащее четыре проекта: 

проект, содержащий модель схемы базы данных формата Entity Data Model, сгенерированной на основе базы данных и ее схемы;

проект, содержащий шаблон интерфейса репозитория приложения (см. рис. 2.12), а также множество интерфейсов репозиториев для сущностей базы данных (например, «Users», «Keywords» и т.д.);

проект, содержащий шаблон репозитория приложения (см. рис. 2.13), а также множество репозиториев для сущностей базы данных (например, «Users», «Keywords» и т.д.);

основной веб-проект, содержащий множество контроллеров, моделей и представлений, обращающийся к проектам, приведенным выше, для получения информации из БД, ее редактирования, добавления и удаления.



Рисунок 2.12. Исходный код шаблона интерфейса репозитория



Рисунок 2.13. Исходный код шаблона репозитория



В контроллерах приложения происходит обращение к репозиториям для получения необходимых данных. На рисунке 2.14 представлен пример метода контроллера для отображения информации о студенте. Полученная информация записывается в модель (см. рис. 2.15), которая передается в представление (html-страницу). В приложении H приведен исходный код представления такой страницы.



Рисунок 2.14. Исходный код метода контроллера для отображения информации о студенте



Рисунок 2.15. Исходный код модели представления информации о студенте

Для того чтобы начать работу с системой, необходимо пройти процедуру авторизации. Необходимо отметить, что в проекте используется одна база данных, в которой хранятся как данные о пользователях (необходимые для осуществления авторизации), так и данные об элементах предметной области. Для обеспечения безопасности данных пользователя при его добавлении в систему происходит хеширование пароля с помощью алгоритма Secure Hash Algorithm 1. Таким образом, в базу данных сохраняется 160-битное хеш-значение. 

Для создания кабинетов пользователей с разными ролями использовался механизм разделения проекта на «области» («areas») [16]. Каждая область – это подпроект, обладающий множеством контроллеров, моделей, скриптов и представлений. В результате применения такого подхода было создано четыре области проекта (работодателя, администратора, студента, сотрудника факультета). Ко всем контроллерам каждой из областей проекта был привязан атрибут «CustomAuthorize» (см. рис. 2.16), который используется для хранения ролей, имеющих доступ к определенной области сайта. Таким образом, пользователь, не обладающий какой-либо ролью, не сможет попасть в область сайта, предназначенную для этой роли.



Рисунок 2.16. Пример использования атрибута «CustomAuthorize»

Если пользователь попытается перейти на область сайта, не предназначенную для роли, которой он обладает, то он будет перемещен на страницу ошибки (см. рис. 2.17):

 

Рисунок 2.17. Страница ошибки доступа

На рисунке 2.18 представлен исходный код атрибута «CustomAuthorize». Этот класс наследуется от стандартного класса «AuthorizeAttribute». В программном коде может быть указано множество ролей, для которых доступна соответствующая область сайта (например, «Admin, Student»).



Рисунок 2.18. Исходный код атрибута «CustomAuthorize»

Для создания и отправки сообщений из системы использовался сетевой протокол SMTP [17]. На рисунке 2.19 представлен исходный код метода, в котором реализован этот механизм. Для отправки сообщения необходимы следующие данные:

адрес хоста SMTP-сервера;

имя пользователя;

пароль пользователя;

номер TCP-порта.

Данная информация хранится в файле «Web.config» главного проекта. Список получателей генерируется на основе фильтров, выбранных пользователем. Максимальное число получателей одного сообщения задано в исходном коде и равно ста. Если список получателей содержит более ста элементов, то программа отправляет несколько сообщений. 



Рисунок 2.19. Исходный код метода отправки сообщения с использованием SMTP-протокола

Особое внимание следует уделить клиентской части приложения. Большинство страниц приложения строятся динамически, т.е. изменения каких-либо фильтров приводит к подгрузке данных на страницу без ее обновления. С этой целью использовался язык программирования javascript, в частности, такие библиотеки как knockout, jQuery, breeze, toastr. В приложении H приведены исходные коды методов контроллеров, а также javascript-файлов (с использованием библиотеки knockout), предназначенных для генерации списка студентов в кабинете работодателя. 

С целью возможности отображения контента сайта на различных устройствах пользователя (в том числе планшетах и мобильных устройствах) была реализована адаптивная верстка html-страниц с использованием набора инструментов Bootstrap фреймворк [19]. В результате использования этого набора инструментов содержимое представлений изменяет свое положение в зависимости от ширины браузера устройства пользователя, а также разрешения экрана устройства. 

В приложении H содержатся примеры исходного кода представлений, javascript-файлов, методов контроллеров. Исходный код всего проекта имеется на диске, приложенном к выпускной квалификационной работе.



Экономическое обоснование

Проект по разработке информационной системы связи работодателей с факультетом является некоммерческим. В данной главе целесообразно рассмотреть денежные затраты на разработку информационной системы, ее внедрение и сопровождение.

Разработкой ИС занимались студенты четвертого курса факультета бизнес-информатики НИУ ВШЭ-Пермь Елохов Евгений и Окулова Ирина в рамках написания выпускных квалификационных работ, причем их трудозатраты не были оплачены. Таким образом, денежные затраты оплату труда на стадии разработки отсутствуют. В процессе разработки ИС было использовано следующее программное обеспечение:

Visual Studio 2013;

SQL Server;

SQL Server Management Studio.

Поставщиком программного обеспечения, необходимого для разработки ИС, является компания Microsoft. В рамках MSDN-подписки DreamSpark, предоставленной НИУ ВШЭ-Пермь, необходимое ПО было установлено на компьютеры разработчиков без дополнительных денежных затрат. Библиотеки javascript (knockout, breeze, toastr, jquery), использованные при разработке клиентской части веб-приложения, являются бесплатными для использования и находятся под свободной лицензией MIT [20], разработанной Массачусетским технологическим институтом. Затраты на использование библиотек javascript при разработке веб-приложения отсутствуют. Таким образом, на этапе разработки информационной системы отсутствуют денежные затраты.

Для внедрения информационной системы необходимы следующие программно-аппаратные средства:

сервер баз данных;

сервер приложений.

Сервер баз данных обладает следующими характеристиками:

процессор – 4 х 3 ГГц;

объем оперативной памяти – не менее 2 Гб;

объем жесткого диска – не менее 80 Гб;

сетевая карта – с поддержкой скорости не менее 1 Гбит/сек.

Сервер приложений должен отвечать следующим требованиям:

процессор – 4 х 3 ГГц;

объем оперативной памяти – не менее 2 Гб;

объем жесткого диска – не менее 40 Гб.

НИУ ВШЭ-Пермь имеет свой сервер баз данных и сервер приложений, поэтому данное веб-приложение целесообразно разместить именно на серверах вуза. Таким образом, денежные затраты на этапе внедрения информационной системы отсутствуют.

После внедрения информационная система нуждается в поддержке. Для поддержки системы целесообразно использовать студентов в качестве дешевой рабочей силы. Работа студентов, проделанная в ходе поддержки системы (в том числе модификация веб-приложения), может быть вынесена на защиту практических, курсовых, выпускных квалификационных работ. Денежные затраты на этапе поддержки ИС отсутствуют. 

В результате проведенного анализа затрат на разработку, внедрение и поддержку ИС было выявлено, что дополнительные денежные затраты не предвидятся благодаря использованию студентов в качестве рабочей силы, наличием у НИУ ВШЭ-Пермь необходимого программного и аппаратного обеспечения, а также свободной лицензии, под которой находятся javascript библиотеки, использованные при разработке ИС. В дальнейшем возможны различные методы монетизации использования ИС, в частности, платное размещение в ИС вакансий и предложений по практике.   







Заключение

В ходе работы было разработано веб-приложение для связи работодателей с факультетом, а также написана документация к ИС. Для разработки веб-портала использовалась технология ASP.NET MVC. Работодатель имеет возможность размещать информацию о вакансиях и практиках, просматривать информацию о студентах (включая опыт работы, профессиональные навыки), а также формировать список студентов и сотрудников факультета для дальнейшего взаимодействия с ними. Администратор способен добавлять пользователей системы, редактировать информацию о них, а также удалять устаревшие вакансии.

Для формирования функциональных требований к ИС были решены следующие задачи: 

изучено два источника информации по проблеме низкого уровня взаимодействия работодателей с факультетами или вузами;

проведен обзор одиннадцати систем взаимодействия работодателей с факультетами или вузами (подробно рассмотрено две из них);

проведено анкетирование работодателей (приведено в приложении A и приложении B);

Кроме того, для достижения поставленной цели были решены следующие задачи:

выбраны технологии ASP.NET MVC 4, SQL Server, множество javascript библиотек для программной реализации системы;

описаны 3 модели БП взаимодействия работодателей с факультетом AS_IS в нотации ARIS eEPC и построена модель вариантов использования информационной системы TO_BE в нотации UML;

написано техническое задание на разработку ИС (приведено в приложении E);

разработаны подсистемы работодателя и администратора;

написаны руководства работодателя и администратора (приведены в приложении F и приложении G) для упрощения работы пользователей с ИС и дальнейшей модификации веб-приложения;

наполнена база данных и проведена тестовая апробация ИС.

Библиографический список

Когаловский М.Р. Перспективные технологии информационных систем. М.: ДМК Пресс; Компания АйТи, 2003. — 288 с.

Райзберг Б.А. Современный экономический словарь / Райзберг Б.А., Лозовский Л.Ш., Стародубцева Е.Б., М.: ИНФРА-М, 1999.—  479 с.

Gabriel R. Informationssystem // Enzyklopaedie-der Wirtschaftsinformatik [Электронный ресурс] [Режим доступа: http://www.enzyklopaedie-der-wirtschaftsinformatik.de/wi-enzyklopaedie/lexikon/uebergreifendes/Kontext-und-Grundlagen/Informationssystem] [Проверено 25.04.2014]

Kathy J. Bialk. Презентация // NJIT Student Employment Management System [Электронный ресурс] [Режим доступа: www.educause.edu/ir/library/powerpoint/EDU05221.pps] [Проверено 25.04.2014]

David A. Baldwin. Effective Management of Student Employment / David A. Baldwin, Frances C. Wilkinson, Daniel C. Barkley; Englewood: Libraries Unlimited, 2000

Managing Student Employees // Human Resources of the University of Texas at Austin [Электронный ресурс] [Режим доступа: http://www.utexas.edu/hr/student/managing.html] [Проверено 25.04.2014]

Размещение вакансий // HeadHunter [Электронный ресурс] [Режим доступа: http://naberezhnye.hh.ru/article/510] [Проверено 25.04.2014]

Student Employment System // Singapore Management University [Электронный ресурс] [Режим доступа: http://www.smu.edu.sg/student-employment-system] [Проверено 25.04.2014]

Resources for Student Employers // Arizona State University [Электронный ресурс] [Режим доступа: https://students.asu.edu/employment/employers] [Проверено 25.04.2014]

Student Employment Systems // Boston University [Электронный ресурс] [Режим доступа: http://www.bu.edu/tech/admin/student-systems/student-employment/] [Проверено 25.04.2014]

Обзор средств создания интерфейсов веб-приложений на языке Java // Портал магистров ДонНТУ [Электронный ресурс] [Режим доступа: http://masters.donntu.edu.ua/2013/fknt/riabinin/library/article1.htm] [Проверено 25.04.2014]

Сравнение ASP.NET и SharePoint. Авторизация пользователей и групп // Microsoft Developer Network [Электронный ресурс] [Режим доступа: http://msdn.microsoft.com/ru-ru/library/ff407959%28v=office.14%29.aspx] [Проверено 25.04.2014]

ASP.NET и SharePoint. Изменение файлов Web.config // Microsoft Developer Network [Электронный ресурс] [Режим доступа: http://msdn.microsoft.com/ru-ru/library/ff407245%28v=office.14%29.aspx] [Проверено 25.04.2014]

Общие сведения о ASP.NET MVC // Microsoft Developer Network [Электронный ресурс] [Режим доступа: http://msdn.microsoft.com/ru-ru/library/dd381412%28v=vs.108%29.aspx] [Проверено 25.04.2014]

Федеральный закон Российской Федерации «О персональных данных» от 27.07.2006 №152-ФЗ // Официальный интернет-портал правовой информации. – 2013 [Электронный ресурс] [Режим доступа: http://pravo.gov.ru/] [Проверено 25.04.2014]

Areas in ASP.NET MVC 4 [Электронный ресурс] [Режим доступа: http://www.codeproject.com/Articles/714356/Areas-in-ASP-NET-MVC] [Проверено 25.04.2014]

SMTP (Simple Mail Transfer Protocol) [Электронный ресурс] [Режим доступа: http://searchexchange.techtarget.com/definition/SMTP] [Проверено 25.04.2014]

Knockout: Documentation [Электронный ресурс] [Режим доступа: http://knockoutjs.com/documentation/introduction.html] [Проверено 25.04.2014]

Bootstrap: Getting started [Электронный ресурс] [Режим доступа: http://getbootstrap.com/getting-started/] [Проверено 25.04.2014]

 Open Source Initiative: The MIT License (MIT) [Электронный ресурс] [Режим доступа: http://opensource.org/licenses/mit-license.php] [Проверено 25.04.2014]

Форма анкетирования работодателей



Рисунок A.1. Форма анкетирования работодателей (часть 1)



Рисунок A.2. Форма анкетирования работодателей (часть 2)



Рисунок A.3. Форма анкетирования работодателей (часть 3)

Результаты анкетирования работодателей

Таблица B.1. Результат анкетирования респондента №1

Таблица B.2. Результат анкетирования респондента №2

Таблица B.3. Результат анкетирования респондента №3

Таблица B.4. Результат анкетирования респондента №4

Таблица B.5. Результат анкетирования респондента №5






Схема базы данных



Рисунок C.1. Схема базы данных

Описание сущностей базы данных

Для организации хранения информации предметной области была спроектирована база данных. Ниже приведены сущности базы данных.

User. Базовая сущность для хранения информации о человеке. Для всех пользователей системы определены следующие поля (см. табл. D.1):

User

От сущности Пользователь наследуются сущности: Студент (Student), Работодатель (Employer), Сотрудник факультета (Department Staff Member) и Администратор (Administrator)

Student. Сущность Student (Студент) отображает специфичную информацию о студенте (см. табл. D.2):

Student

Group. Учебные группы студентов (см. табл. D.3):

Group

EducationType. Тип образовательной программы (магистратура или бакалавриат) (см. табл. D.4):

EducationType

Specialization. Студенты могут обучаться на факультете по одному из нескольких направлений (Specialization) (см. табл. D.5):

Specialization

StudentVacancyBookmark. Студент может составить список избранных вакансий или предложение о практике. Для организации этой возможности добавлена соответствующая таблица (см. табл. D.6):

StudentVacancyBookmark

StudentWorkExperience. Для учета опыта работы студента предусмотрена таблица StudentWorkExperience (см. табл. D.7):

StudentWorkExperience

StudentPracticeExperience. Отображение истории по прошедшим практикам будет осуществляться за счет таблицы StudentPracticeExperience (см. табл. D.8):

StudentPracticeExperience

KeyWord. Ключевые слова – часто встречаемые термины, отражающие ключевую информацию в области взаимодействия. Ключевые слова – набор основных понятий о вакансии и перечень ключевых навыков студента (см. табл. D.9):

KeyWord

ProfessionalSkillLevel. Для оценки уровня владения навыком предложен справочник уровней владения (см. табл. D.10).



ProfessionalSkillLevel

StudentProfessionalSkill. Каждый навык может принадлежать многим студентам. Каждому студенту может принадлежать множество навыков. Каждый навык может быть оценен на определенный уровень из таблицы ProfessionalSkillLevel. Для связи таблиц Student, KeyWord и ProfessionalSkillLevel создана таблица StudentProfessionalSkill (см. табл. D.11):

StudentProfessionalSkill

Employer. Сущность Employer (Работодатель) содержит дополнительную информацию о работодателе (см. табл. D.12): 

Employer

Company. Все работодатели относятся к компании. Один работодатель может представлять только одну компанию (см. табл. D.13):

Group

CompanySphere. Справочник отраслей, в которых функционирует компании (см. табл. D.14):

CompanySphere

EmployerStudentBookmark. Работодатель может составить список избранных резюме кандидатов. Для организации этой возможности добавлена соответствующая таблица (см. табл. D.15):

EmployerStudentBookmark

DepartmentStaffMember. Также во взаимодействии принимает участие факультет в лице своих сотрудников (см. табл. D.16):

DepartmentStaffMember

Role. Перечень ролей пользователей в системе хранится в справочнике Role (см. табл. D.17):

Role

UserRole. Связь таблиц User и Role организована с помощью дополнительной таблицы (см. табл. D.18):

UserRole

DepartmentRole. Перечень возможных ролей сотрудников факультета (например, ответственный за практику) в системе хранится в справочнике DepartmentRole (см. табл. D.19).

DepartmentRole

DepartmentRoleDepartmentStaffMember. Связь таблиц DepartmentRole и DepartmentStaffMember организована с помощью таблицы DepartmentRoleDepartmentStaffMember (см. табл. D.20):

DepartmentRoleDepartmentStaffMember

BasicVacancy. Таблица BasicVacancy – базовая сущность для хранения информации об объявлениях работодателей (вакансиях и предложениях о практике) (см. табл. D.21):

BasicVacancy

Practice. Сущность Practice (Практика) содержит дополнительную информацию о практиках (см. табл. D.22):

Practice

Vacancy. Сущность Vacancy (Вакансия) содержит дополнительную информацию о вакансиях (см. табл. D.23): 

Vacancy

VacancyProfessionalSkill. В объявлениях устанавливаются требования владения определенными навыками и уровни владения этими навыками. Информация представлена в таблице VacancyProfessionalSkill (см. табл. D.24):

VacancyProfessionalSkill

PositionType. Все должности должны быть приведены к стандартным должностям, указанным в справочнике PositionType (см. табл. D.25).



PositionType

VacancyPositionType. Для связи должностей с вакансиями создана таблица VacancyPositionType (см. табл. D.26):

VacancyPositionType

Review. Для оценки студентов и компаний предусмотрена система отзывов, в основе которой лежит шкала оценивания. Справочник оценок приведен в таблице Review (см. табл. D.27):

Review

StudentCompanyReview. Хранение отзыва студента о компании организовано посредством таблицы StudentCompanyReview (см. табл. D.28): 

StudentCompanyReview

EmployerStudentReview. Хранение отзыва работодателя о студенте организовано посредством таблицы EmployerStudentReview (см. табл. D.29):

EmployerStudentReview

Work. Информация по учебным и вне учебным работам должна быть отражена в отдельной работе. В рамках данного проекта предполагается хранение ссылки на эту работу и ее тип. Эти данные приведены в таблице Work (см. табл. D.30):

Work

DepartmentStaffMemberWork. Связывание руководителей научных работ студентов с выполняемыми работами осуществляется в таблице DepartmentStaffMemberWork (см. табл. D.31):

DepartmentStaffMemberWork

StudentWork. Связь между студентами и выполненными работами осуществляется с помощью таблицы StudentWork (см. табл. D.32):

StudentWork

Country. Справочник стран приведен в таблице Country (см. табл. D.33):

Country

Region. Справочник регионов приведен в таблице Region (см. табл. D.34):

Region

City. Справочник городов приведен в таблице City (см. табл. D.35):

City

Техническое задание

Оглавление



























































Введение

Настоящее техническое задание определяет форму и содержание работ по разработке информационной системы, организующей взаимодействие между факультетом и работодателями города. 

Наименование системы – «Информационная система связи факультета с работодателями». В дальнейшем – «Система». Для английских обозначений используется обозначение – «Student Employment Management System», сокращенно – SEMS.

Основания для разработки

Настоящее Техническое задание разработано в рамках выполнения выпускной квалификационной работы студентов факультета бизнес-информатики, направления 080500.62 Бизнес-информатика.

Разработчиками системы выступают студенты 4 курса факультета бизнес-информатики: Елохов Евгений и Окулова Ирина. Заказчиком системы является факультета бизнес-информатики.

Работа выполняется на основании учебного плана и темы выпускной квалификационной работы, определенной научным руководителем и утвержденной приказом от 25.11.2013 №8.2.6.2-06/698 «Об утверждении тем и руководителей выпускных квалификационных работ студентов факультета бизнес-информатики».

Назначение разработки

Применение системы осуществляется для автоматизации процессов взаимодействия между факультетом и работодателями. 

Система предназначена:

для осуществления поиска вакансий и предложений о прохождении практики студентами факультета;

для автоматизации процесса уведомления работодателей о событиях на факультете;

для автоматизации процесса поиска и отбора целевой аудитории при организации мероприятий;

для поиска сотрудников в организацию;

для повышения качества взаимодействия между факультетом и работодателями города, что должно выражаться в упрощении взаимоотношений, увеличении количества трудоустроенных студентов, повышении осведомленности студентов и работодателей о возможностях взаимодействия.

Система должна включать следующие подсистемы пользователей: 

Подсистема администратора. Подсистема администратора предназначена для регулирования работы системы изнутри, для осуществления контроля корректности выполнения всех функций и поддержания актуальности системы.

Подсистема работодателя. Подсистема работодателя предназначения для представителей компаний, желающих взаимодействовать с факультетом посредством системы.

Подсистема факультета. Подсистема факультета ориентирована на сотрудников факультета и студентов, заинтересованных в любого рода взаимодействии с работодателями.

Подсистема факультета в свою очередь состоит из двух блоков:

Блок студентов.

Блок сотрудников факультета.

Различные подсистемы должны быть выполнены в едином формате представления данных. Разбиение данных осуществляется по кабинетам. Кабинет пользователя – информационное пространство пользователя, в рамках которого осуществляет функционирование пользователя. В системе должны быть разработаны четыре кабинета пользователя: 

кабинет администратора;

кабинет работодателя;

кабинет сотрудника факультета;

кабинет студента.

Указанные кабинеты соответствуют возможным ролям пользователей в системе. Роль – подмножество пользователей, объединенных общим спектром выполняемых функций в системе. Роли в системе:

администратор;

работодатель;

сотрудник факультета;

студент.

Под кабинетом подразумевается информационное пространство пользователя, в пределах которого осуществляется выполнение его запросов. Вход в кабинет пользователя производится после Регистрации и прохождения процедуры Авторизации. Регистрация сотрудников факультета и студентов осуществляется администратором – регистрация работодателя производится непосредственно работодателем. Регистрация администраторов должна быть осуществлена при создании системы.

Авторизация пользователей осуществляется по логину (адресу электронной почты) и паролю. При некорректном вводе логина или пароля должно выдаваться сообщение об ошибке при заполнении полей. При авторизации необходимо также указать кабинет для входа.

 Кабинет студента

В кабинете студента предполагается пять зон:

Личные данные. В области личных данных должна быть представлена основная информация о студенте: 

ФИО; 

пол;

контактный телефон;

электронный адрес;

группа;

специальность;

дата рождения;

номер студенческого;

ссылки на страницы в социальных сетях;

профессиональные навыки (названия систем, языков и техник, которыми владеет студент);

опыт работы в компаниях;

работы студента.

В Опыте работы должна быть включена следующая информация: даты начала и окончания работы, ссылка на страницу компании в системе, название занимаемой должности и основные обязанности, выполняемые в системе. В системе могут быть представлены две группы работ: учебные (курсовые, вкр) и не учебные (статьи и прочее). Для работ можно отследить руководителей работ студентов. По работам должна быть представлена ссылка на работу. 

Избранное. В области «Избранное» хранится список вакансий, отложенных студентом для дальнейшего принятия решения. В области должна быть представлена контактная информация по вакансии: ссылки на полное описание вакансии и компании, электронный адрес для контакта с компанией и текстовый комментарий, который студент может  

Вакансии, включающая две части: непосредственно вакансии и предложения о практике. При выборе должен осуществлять отбор по параметрам:

типу предложения (практика/работа);

уровень заработной платы (в случае вакансий);

ключевые слова;

вид графика (гибкий/не гибкий);

возможность удаленной работы;	

количество рабочих часов в неделю;

возможность дальнейшего трудоустройства. 

Для вакансий должна производиться сортировка по количеству просмотров. При просмотре вакансий должна отображаться основная информация по вакансии: название должности, требования к вакансии, основные обязанности, краткая информация о компании и ссылка на страницу с более детальным описанием.

Компании. Область компании необходима для представления информации по компаниям, которые в принципе готовы принять на работу (по специальности) студентов и выпускников факультета. Для выбора компании должен быть организован поиск с возможностью задания параметров (ключевые слова, название, сфера деятельности). Представляемые данные о компании определяются данными, заполненными представителями компании в личном кабинете компании.

 На странице компании должна быть представлена заполняемая работодателем информация, а также средняя оценка по отзывам о компании. Студент может просмотреть оставленные ранее отзывы, а также составить свой отзыв. 	

Рассылки. Область рассылки необходима для осуществления рассылки студентам других групп и сотрудников факультета.

 Кабинет сотрудника факультета

В кабинете сотрудника факультета предполагается реализация зон:

Личные данные. В разделе личные данные представлена персональная информация о сотрудниках факультета:

ФИО;

контактный телефон;

электронный адрес;

ссылки на страницы в социальных сетях. 

В данной области можно установить роль на факультете (например, ответственной за научную деятельность) и определить работы, в которых он является научным руководителем.

Практики. Область практики предусмотрена для формирования отчетности по прохождению практик студентами при задании различных параметров, а также просмотра различных предложений о практике.

Компании. Область компании нацелена на просмотр информации по компаниям, взаимодействующим с факультетом. Представляемые данные о компании определяются данными, заполненными представителями компании в личном кабинете компании.

Студенты. В области студенты можно просмотреть страницы студентов. Перечень представляемых данных должен соответствовать заполненной студентов информации в разделе «О себе».

Рассылки. Рассылки предназначены для информирования студентов и работодателей о событиях факультета. При формировании рассылки настраиваются поля, по которым определяются получатели рассылки. Далее можно сформировать список электронных адресов или создать электронное письмо.

 Кабинет работодателя

В рабочем кабинете работодателя должны быть реализованы следующие разделы:

Личные данные. В области личные данные должна быть предоставлена информация о работодателе:

ФИО;

электронный адрес;

номер телефона;

ссылки на страницы в социальных сетях;

должность в компании.

Компания. В разделе компании должна содержаться информация о 

компании, в которой трудоустроен работодатель.

название;

описание;

специализация;

ссылка на официальный сайт.

Студенты.  О студентах должна быть представлена информация, заполняемая студентами и отзывы, оставленные работодателями о студенте. Работодателю должна быть предоставлена возможность создания отзыва о студенте. Поиск студентов должен осуществляться на основе множества фильтров (специализация, курс, пол, навыки). Для отобранного списка студентов возможно создание рассылки на электронные адреса студентов или осуществление экспорта контактных адресов в текстовый файл с указанием символа-разделителя. 

Избранное. Студентов можно добавлять в раздел «Избранное», при этом оставляя комментарий к странице студента.

Сотрудники факультета. В данном разделе представлена информация о сотрудниках факультета. Также должны быть реализованы функции поиска сотрудников по ролям (например, ответственные за научную деятельность). Для отобранных сотрудников может быть реализована рассылка на электронные адреса, а также экспорт контактных адресов в текстовый файл с указанием символа-разделителя. 

Вакансии. Просмотр списка вакансий компании.

Практики. Просмотр списка практик компании.

 Кабинет администратора

В рабочем кабинете администратора должны быть реализованы следующие разделы:

Студенты. В области студенты должны быть реализованы функции добавления, просмотра, редактирования и удаления данных о студентах. Также необходимо организовать возможность загрузки данных из файлов с расширением “.csv”.

Сотрудники факультета. В области сотрудников факультета должны быть реализованы функции добавления, просмотра, редактирования и удаления данных о сотрудниках факультета. Кроме того, администратор должен осуществлять назначение ролей сотрудников факультета (например, ответственный за научную деятельность, ответственный за взаимодействие с работодателями, и т.д.)

Компании. В области компании должны быть реализованы функции добавления, просмотра, редактирования и удаления данных о компании и сотрудниках, а также функции просмотра, редактирования, удаления вакансий и предложений о практиках в компании.

Требования к программе или программному изделию

 Требования к функциональным характеристикам

Функции системы распределены по кабинетам.

 Функции в кабинете студента

Функциональные возможности пользователей с ролью «Студент» определены в табл. E.1 – E.7.







Таблица E.1. Функции в области «Личные данные» в кабинете студента 







Таблица E.2. Функции в области «Избранное» в кабинете студента 

Таблица E.3. Функции в области «Вакансии» в кабинете студента 

Таблица E.4. Функции в области «Практики» в кабинете студента 

Таблица E.5. Функции в области «Компании» в кабинете студента 

Таблица E.6. Функции в области «Рассылки» в кабинете студента 

Таблица E.7. Прочие функции в кабинете студента 

Функции в кабинете сотрудника факультета

Функциональные возможности пользователей с ролью Сотрудник факультета определены в таблицах E.8 – E.14:

Таблица E.8. Функции в области «Личные данные» сотрудника факультета

Таблица E.9. Функции в области «Практики» в кабинете сотрудника факультета

Таблица E.10. Функции в области «Вакансии» в кабинете сотрудника факультета 

Таблица E.11. Функции в области «Компании» в кабинете сотрудника факультета 

Таблица E.12. Функции в области «Студенты» в кабинете сотрудника факультета 

Таблица E.13. Функции в области «Рассылки» в кабинете сотрудника факультета 

Таблица E.14. Прочие функции в кабинете сотрудника факультета 



Функции в кабинете работодателя

Функциональные возможности пользователей с ролью Работодатель определены в таблице E.15.

Таблица E.15. Функции работодателя

 Функции в кабинете администратора

Функциональные возможности пользователей с ролью Администратор определены в таблице E.16:

Таблица E.16. Функции администратора

 Требования к временным характеристикам

При фактической внешней скорости сети не менее 1 мб/сек на стороне пользователя, должны достигаться следующие временные показатели:

обновление страницы – не более 10 секунд;

выполнение поиска – не более 30 секунд;

формирование отчета – не более 30 секунд.

 Требования к надежности

В системе возможны три типа сбоев:

сбой технического обеспечения;

сбой операционной системы;

сбой браузера.

Надежное (устойчивое) функционирование программы должно быть обеспечено организацией бесперебойного питания технических средств, использованием лицензионного программного обеспечения.

Время восстановления после отказа, вызванного сбоем в функционировании технических средств, операционной системы, браузера не должно превышать времени, требуемого для перезагрузки. Время восстановления после отказа, вызванного неисправностью технических средств, крахом операционной системы или веб-браузера, не должно превышать времени, необходимого для устранения неисправностей технических средств и переустановки программных средств.

В случае отказа все несохраненные данные (заполненные формы, настроенные параметры поиска) будут потеряны.

 Условия эксплуатации

Для эксплуатации и поддержания Системы определены следующие группы:

системный администратор;

администратор баз данных;

контент-менеджер;

пользователи системы.

Персонал, поддерживающий систему (Системный администратор, Администратор баз данных, контент-менеджер), входят в систему в роли администратора. 

Основными обязанностями системного администратора являются:

установка и обновление программного обеспечения технических средств;

конфигурирование программного обеспечения технических средств;

поддержание в работоспособном состоянии программного обеспечения серверов и рабочих станций;

обеспечение своевременного копирования, архивирования и резервирования данных;

восстановление работоспособности локальной сети при сбоях или выходе из строя сетевого оборудования.

Системным администратором может быть назначено лицо, имеющее профильное высшее образование и опыт обслуживания технических средств, знающее основы локальных сетей.

Основными обязанностями администратора баз данных являются:

установка и обновление программного обеспечения СУБД;

конфигурирование программного обеспечения СУБД;

разработка, управление и реализация эффективной политики доступа к информации;

контроль структурных изменений БД.

Администратор баз данных должен иметь профильное высшее образование и опыт работы в области настройки и администрирования, применяемых в системе СУБД.  

Основными обязанностями контент-менеджера являются:

проверка актуальности информации в базе;

обновление информации в базе.

Контент-менеджер должен иметь опыт работы с персональными компьютерами на базе операционной системы Windows 7, под руководством которой будет осуществляться выполнение функций по поддержанию системы.

Системный администратор, администратор баз данных и контент-менеджер в системе выполняют роль администратора, в рамках кабинета Администратора. 

Пользователи системы будут выполнять заложенные для них функции в рамках соответствующего кабинета.

Пользователи систем должны иметь опыт работы в браузерах: Google Chrome, и/или Opera, и/или Yandex, и/или Mozila FireFox, и/или Internet Explorer.

Совмещение ролей пользователей системы возможно, однако работа пользователя в один момент времени возможна лишь в рамках одного кабинета. Понимание системой одного пользователя с различными ролями будет осуществляться за счет единственности логина (электронной почты) пользователя.

 Требования к составу и параметрам технических средств

Работа веб-приложения организуется за счет двухуровневой архитектуры приложения, в основе которой лежат сервер баз данных и сервер приложений.

Минимальные требования к техническому обеспечения формируются с учетом предполагаемой посещаемости системы пользователями в течение дня.

Предполагается, что системой будут пользоваться студенты 3 и 4 курсов факультета бизнес-информатики (порядка 60-80 человек по двум направлениям подготовки), сотрудники факультета (20 человек) и работодатели города (количество работодателей может составить порядка 200 представителей). Пики посещения сайта ожидаются во время организации производственных и преддипломных практик, а также в период летних каникул, когда студенты пытаются найти работу. В пиковые периоды ожидается до 50 пользователей в день. 

 Рекомендуемые требования

Для обеспечения работы системы при определенных в пункте 3.1.3. временных характеристиках требуются сервер баз данных и сервер приложений. Сервер баз данных должен обладать следующими свойствами:

процессор – 4 х 3 ГГц;

объем оперативной памяти – не менее 2 Гб;

объем жесткого диска – не менее 80 Гб;

сетевая карта – с поддержкой скорости не менее 1 Гбит/сек.

Сервер приложений должен обладать следующими свойствами: 

процессор – 4 х 3 ГГц;

объем оперативной памяти – не менее 2 Гб;

объем жесткого диска – не менее 40 Гб.

 Минимальные требования

Минимальные требования сервера баз данных для работы приложения: 

процессор – 1 х 3 ГГц;

объем оперативной памяти – не менее 1 Гб;

объем жесткого диска – не менее 60 Гб.

Минимальные требования сервера приложений для работы приложения: 

процессор – 1 х 3 ГГц:

объем оперативной памяти – не менее 1 Гб;

объем жесткого диска – не менее 20 Гб.

Поскольку сервер приложений загружен крайне неравномерно (в соответствии с пиковыми периодами), рекомендуется его совмещение с другими сервисами или размещение на виртуальное машине.

 Требования к информационной и программной совместимости

При проектировании и разработке системы необходимо использовать свободно распространяемое программное обеспечение или ограниченные экспресс версии. Для разработки системы необходимо основываться на паттерне MVC. Основной средой для разработки должна быть Visual Studio. Для средств хранения данных следует использовать SQL Management Studio Express версии 2012 и позднее.

Пользователи системы должны иметь доступ с браузеров:

Google Chrome версии 32 и позднее;

Opera версии 12 и позднее;

Mozila FireFox версии 28.0 и позднее;

Internet Explorer 9 и позднее.

Система должна взаимодействовать со смежными информационными системами, расположенными в сети Интернет посредством гиперссылок на внешние ресурсы.

Система должна быть реализована на русском языке. При составлении технической документации возможно использование англоязычных терминов и понятий.

 Требования к защите информации и программ

Хранение и организация данных в системе должны осуществляться на основе реляционной СУБД. Обеспечение целостности данных должно быть достигнуто за счет встроенных средств СУБД. Доступ к данным должен предоставляться только авторизованным пользователям с учетом их роли в системе.

 Требования к маркировке и упаковке

Не предъявляются. 

 Требования к транспортированию и хранению

Не предъявляются.

 Требования к эргономике и технической эстетике

При разработке визуальной составляющей системы необходимо ориентироваться на требования, указанные в стандарте ГОСТ 21829-76 Система "Человек-машина" кодирование зрительной информации. 

Общие эргономические требования.

Экранные формы должны проектироваться с учетом требований унификации:

Все экранные формы пользовательского интерфейса должны быть выполнены в едином графическом дизайне, с одинаковым расположением основных элементов управления и навигации.

Для обозначения сходных операций должны использоваться сходные графические значки, кнопки и другие управляющие (навигационные) элементы. Термины, используемые для обозначения типовых операций (добавление информационной сущности, редактирование поля данных), а также последовательности действий пользователя при их выполнении, должны быть унифицированы.

Внешнее поведение сходных элементов интерфейса (реакция на наведение указателя «мыши», переключение фокуса, нажатие кнопки) должны реализовываться одинаково для однотипных элементов.

В качестве цветового решения при оформлении сайта необходимо использовать корпоративные цвета Заказчика.

Специальные требования

Должна быть предусмотрена возможность дальнейшей модернизации программного обеспечения Системы и комплекса технических средств в связи с повышением количества пользователей системы и расширением справочников системы. 

Требования к программной документации

Для системы должна быть сформирована следующая документация:

схема базы данных и описание отдельных таблиц;

исходные тексты программ в виде приложения с открытым исходным кодом;

тестовые сценарии в электронной форме;

руководства пользователей (студента, сотрудника факультета, работодателя и администратора) в электронной форме;

руководство разработчика в электронной форме.

Технико-экономические показатели

В системе должна быть учтена необходимость хранения данных сроком до года. Предполагается, что системой будут пользоваться студенты 3 и 4 курсов факультета бизнес-информатики (порядка 60-80 человек по двум направлениям подготовки), сотрудники факультета (20 человек) и работодатели города (количество работодателей может составить порядка 400 представителей). Пики посещения сайта ожидаются во время организации производственных и преддипломных практик, а также в период летних каникул, в эти периоды могут быть задействованы дополнительное техническое. В обычном режиме работы система должна обеспечивать возможность одновременной работы до 50 пользователей.

Реализация системы предполагается на существующем оборудовании НИУ ВШЭ-Пермь. Дополнительные затраты на приобретение оборудования не планируются. Точный учет стоимости затрат текущего проекта по техническим ресурсам невозможен, поскольку технические средства задействованы на нескольких проектах сразу, потребляемые ресурсы распределяются неравномерно.

Разработка системы осуществляется бесплатно в рамках выпускной квалификационной работы. Для разработки использовалось программное обеспечение, входящее в академическую подписку факультета бизнес информатики или свободно распространяемое для студентов ПО компании Microsoft. Использование подписок возможно, поскольку разрабатываемая система носит образовательный характер и не приносит прибыли.



Стадии и этапы разработки

Этапы работы, их состав и содержание приведены в таблице. E.17:

Таблица E.17. Состав и содержание работ

Порядок контроля и приемки

Приемка системы осуществляется заказчиком в соответствии с учебным календарным планом.

Руководство пользователя-работодателя

Оглавление





























Какая Вам польза от этой системы?

Система связи с факультетом бизнес-информатики НИУ ВШЭ-Пермь даст Вам как работодателю следующие возможности:

поиск работников среди студентов и выпускников факультета;

размещение информации об имеющихся у Вас вакансиях;

заключение договоров о прохождении студентами практики в Вашей фирме;

оповещение студентов, выпускников и сотрудников факультета о проводимых Вами мероприятиях;

установление контактов с сотрудниками факультета и студентами для решения любых вопросов. 

В настоящем документе описаны действия, которые необходимо осуществить для достижения поставленных целей. Для использования системы достаточно владеть навыками работы в браузерах (Google Chrome, Firefox) и ознакомиться с настоящим документом.

Вы можете использовать систему связи с факультетом как со стационарного компьютера, так и с мобильного устройства. Поскольку разрешения экранов у этих устройств разные, расположение элементов форм сайта будет незначительно отличаться.

Как войти в систему и выйти из нее?

Для работы с веб-приложением необходимо пройти процедуру авторизации, то есть заполнить поля «email» и «пароль» и нажать на кнопку «Войти» (см. рис. F.1):



Рисунок F.1. Схематичная страница авторизации



Email используется в качестве имени пользователя в системе. Это сделано, чтобы Вы случайно не забыли, под каким логином Вы зарегистрировались. 

При вводе неверной пары email и пароль на экране появится сообщение об ошибке (см. рис. F.2):



Рисунок F.2. Схематичная страница авторизации с сообщением о неверной паре email и пароль

При нажатии кнопки «Войти» без предварительного заполнения полей «email» и «пароль» также выводится сообщение об ошибке (см. рис. F.3):



Рисунок F.3. Схематичная страница авторизации с сообщением о необходимом вводе пары email и пароль

Если пользователь не зарегистрирован в системе, то необходимо пройти процедуру регистрации. Вначале предлагается ввести название компании, после чего нажать на кнопку «Подтвердить». Если компания с таким названием не зарегистрирована в информационной системе, то на форме открывается область ввода информации о компании. Далее пользователю необходимо ввести информацию о себе (см. рис. F.4).









Рисунок F.4. Схематичная страница регистрации работодателя

Для завершения работы с приложением необходимо перейти по ссылке «Выход» в правом верхнем углу экрана.



Что Вы можете узнать о студентах, если Вам нужен работник?

Для того чтобы посмотреть подробную информацию о конкретном студенте, необходимо перейти в раздел «Студенты», нажать на имя или фамилию конкретного студента, после чего откроется страница просмотра подробной информации (см. рис. F.5). О каждом из студентов факультета Вы можете получить следующую информацию:

ФИО, пол, курс, специальность;

профессиональные навыки, которыми он владеет;

опыт работы и отзывы работодателей;

успеваемость данного студента по всем предметам;

учебные, научные и прочие проекты, в которых он принимал участие;

контактную информацию (email, телефон).



Рисунок F.5. Схематическая страница просмотра подробной информации о студенте

После того, как студент проработает у Вас в фирме, Вы сможете оставить о нем свой отзыв. Для этого необходимо нажать на кнопку «Написать отзыв», в результате чего на экране появится окошко написания отзыва  (см. рис. F.6). Пользователь также имеет возможность редактирования отзывов, которые он оставил о студентах ранее. 





Рисунок F.6. Окошко заполнения отзыва о студенте

Как выбрать интересных для Вас студентов?

После прохождения процедуры авторизации открывается раздел «Студенты». Для формирования списка студентов можно настроить множество фильтров (см. рис. F.7):



Рисунок F.7. Схематичная страница настройки фильтров для формирования списка студентов

Для формирования списка студентов возможно задание следующих фильтров:

специальность (бизнес-информатика, программная инженерия);

курсы;

пол;

статус (трудоустроен, не трудоустроен).

При настройке фильтров, перечисленных выше, происходит автоматическое формирование списка студентов. Помимо стандартных фильтров пользователь может осуществить поиск студентов по навыкам (см. рис. F.8):



Рисунок F.8. Схематичная страница настройки поиска студентов по навыкам 

При поиске по навыкам предусмотрена функция автодополнения, то есть интерактивного ввода текста с дополнением текста по введенной его части. При этом названия навыков подгружаются из базы данных. Вы можете вводить множество навыков, при этом разделяя их запятыми. Дублирование навыков в поле ввода не приведет к ошибке в процессе формирования списка студентов. Вы также может удалять навыки, введенные ранее, путем удаления названия навыка из строки поиска. Для формирования списка студентов, соответствующих введенным навыкам, необходимо нажать клавишу перевода строки. Кроме того, в системе предусмотрен поиск студентов хотя бы по одному из введенных Вами навыков (для этого нужно поставить соответствующую галочку в фильтре), а также по всем навыкам, введенным в соответствующее поле (для этого нужно убрать галочку в фильтре).

В результате настройки фильтров формируется список студентов с учетом постраничного просмотра. Пользователь может осуществлять переход со страницы на страницу, а также изменять размер страницы путем изменения числа записей, отображаемых на одной странице (см. рис. F.9).



Рисунок F.9. Схематичная страница списка студентов 

Как найти конкретного студента?

Если Вас интересует конкретный студент, Вы можете найти его по фамилии, имени, email или номеру студенческого билета. Для этого достаточно ввести нужное Вам значение в соответствующем поле в начале списка студентов и нажать клавишу Enter («Перевод строки»). Если Вы введете только часть букв и цифр, то получите список всех подходящих студентов  (см. рис. F.10):



Рисунок F.10. Схематичная страница списка студентов с применением фильтра поиска по фамилии 

Что делать, когда Вы найдете интересных Вам студентов?

Для получения интересных для Вас студентов необходимо настроить фильтры. После перехода на страницу студента Вы можете его добавить в раздел «Избранное». Для этого необходимо нажать на кнопку «Добавить в избранное», после чего откроется окошко, в котором предлагается ввести комментарий к создаваемой записи раздела (см. рис. F.11).



Рисунок F.11. Окошко добавления комментария о студенте в раздел «Избранное»

После нажатия на кнопку «Добавить» на экране появляется сообщение об успешном добавлении студента в раздел «Избранное» (см. рис. F.12):



Рисунок F.12. Сообщение об успешном добавлении студента в раздел «Избранное»

После добавления студента в раздел «Избранное» при просмотре страницы этого студента появляется возможность его удаления из этого раздела (см. рис. F.13):



Рисунок F.13. Схематическое отображение удаления студента из раздела «Избранное»

Как просмотреть информацию об успеваемости студентов?

В разделе «Студенты» можно перейти по ссылке «Посмотреть данные об успеваемости» на внешнюю страницу факультета. На внешней странице факультета размещен перечень файлов, содержащих данные об успеваемости студентов, где каждый студент идентифицируется по номеру студенческого билета. Если у студента, которым Вы интересуетесь, указан номер студенческого билета (в списке студентов в поле «Номер студенческого билета» содержится номер), то Вы можете просмотреть данные об его успеваемости.

Как связаться  с интересными Вам студентами?

В приложении предусмотрено три способа организации взаимодействия пользователя со студентами:

использование почтовой программы, установленной на устройстве пользователя по умолчанию;

экспорт списка электронных адресов в текстовый файл;

создание и отправка сообщения с помощью почтового ящика информационной системы.

При нажатии на электронный адрес студента (в списке студентов) автоматически запускается почтовая программа, установленная на Вашем устройстве по умолчанию (например, Microsoft Exchange). После запуска программы открывается окошко создания нового сообщения, получатель которого уже указан (электронный адрес выбранного студента).

При нажатии на кнопку «Экспортировать email-ы» открывается окошко, позволяющее указать символ разделитель, который будет использоваться при разделении электронных адресов студентов в текстовом файле (см. рис. F.14). Список студентов, чьи электронные адреса будут экспортированы, формируется на основе фильтров, настроенных ранее.



Рисунок F.14. Окошко экспорта электронных адресов в текстовый файл 



Вы также можете создавать сообщения с помощью почтового ящика системы. Для этого необходимо нажать на кнопку «Создать рассылку», после чего откроется окошко создания сообщения (см. рис. F.15):



Рисунок F.15. Окошко создания нового сообщения

Сообщение будет разослано на электронные ящики студентов, список которых был сформирован в результате применения фильтров. Если в результате применения фильтров был сформирован пустой список студентов, то на экране появится сообщение об ошибке (см. рис. F.16):



Рисунок F.16. Сообщение об ошибке при создании сообщения или экспорте электронных адресов

Как предложить студентам свои вакансии?

Для того чтобы разместить вакансию или предложение о практике на сайте, необходимо перейти в раздел «Вакансии» (см. рис. F.17) или «Практики», после чего нажать на кнопку «Добавить вакансию» или «Добавить практику», заполнить поля ввода и нажать на кнопку «Сохранить». Пользователь также может редактироваться вакансии (см. рис. F.18) и практики (см. рис. F.19), которые он добавлял ранее, а также удалять их.



Рисунок F.17. Схематическая страница просмотра вакансий компании



Рисунок F.18. Окошко добавления вакансии



Рисунок F.19. Окошко добавления предложения о практике

При добавлении вакансии необходимо следить за тем, чтобы значения полей «минимальная зарплата» и «максимальная зарплата» было числовым (см. рис. F.20), причем значение поля «минимальная зарплата» не должно превышать значение поля «максимальная зарплата» (см. рис. F.21).



Рисунок F.20. Результат проверки значения поля на наличие числового значения



Рисунок F.21. Сообщение об ошибке по причине превышения минимального значения зарплаты над максимальным

При добавлении ключевых слов к вакансии используется функция автодополнения (см. рис. F.22), то есть интерактивного ввода текста с дополнением текста по введенной его части. Если ключевые слова имеются в базе данных, то они подгружаются из нее. Если ключевых слов в базе нет, то они загружаются в базу данных и привязываются к данной вакансии. Пользователь может вводить множество ключевых слов, при этом разделяя их запятыми. Дублирование ключевых слов в поле ввода не приведет к ошибке в процессе создания вакансии. Вы также может удалять ключевые слова, введенные ранее, путем их удаления из соответствующего поля.



Рисунок F.22. Поле для ввода ключевых слов вакансии с использованием автодополнения

Пользователь может удалять вакансии. Для этого необходимо нажать на соответствующую кнопку удаления выбранной вакансии (см. рис. F.23):



Рисунок F.23. Схематическая страница удаления вакансии

 Для чего Вам полезны контакты с сотрудниками факультета?

В системе содержится информация о сотрудниках факультета. Вам может понадобиться установить контакт с некоторыми из них для следующих целей:

предложение сотрудничества;

проведение совместных мероприятий;

чтение курсов на факультете;

получение отзыва о каком-либо студенте.   

В зависимости от того каковы цели Вашего взаимодействия с факультетом, у каждого сотрудника имеется множество ролей (например, ответственный за научную деятельность, ответственный за взаимодействие с работодателями и т.д.).

 Как найти нужных Вам сотрудников факультета?

Вы можете просматривать либо всех сотрудников факультета (см. рис. F.24), либо сотрудников факультета с определенными ролями (см. рис. F.25).



Рисунок F.24. Схематическая страница просмотра списка сотрудников факультета

Для того чтобы просмотреть сотрудников с определенными ролями, необходимо в выпадающем списке выбрать значение «С определенными ролями», после чего выбрать интересующие Вас роли. Кроме того, Вы можете осуществить поиск сотрудников по фамилии, имени, email, а также полю «дополнительная информация».



Рисунок F.25. Схематическая страница просмотра списка сотрудников факультета с определенными ролями

 Что Вы можете узнать о сотрудниках факультета?

Для того чтобы посмотреть подробную информацию о конкретном сотруднике факультета, необходимо нажать на его имя или фамилию в списке сотрудников, после чего откроется страница просмотра подробной информации (см. рис. F.26): 



Рисунок F.26. Схематическая страница просмотра подробной информации о сотруднике факультета



На этой странице содержится следующая информация о сотруднике:

email;

дополнительная информация (например, должность);

роли на факультете;

перечень проектных работ (учебных и внеучебных) с указанием студентов, которыми руководил сотрудник факультета при написании работ.

 Как связаться с нужными Вам сотрудниками факультета?

Как и в случае со студентами, в приложении предусматривается три способа организации взаимодействия пользователя с сотрудниками факультета. Подробное описание способов представлено в п.8. 



Руководство пользователя-администратора

Оглавление











Введение

В настоящем документе рассматривается использование информационной системы пользователем с ролью администратора. Для успешной работы с данным приложением пользователю необходимо:

владеть навыками работы в браузерах Google Chrome, Firefox;

ознакомиться с настоящим документом.

Раздел «Студенты»

В данном разделе содержится три подраздела: «Список студентов», «Импорт списка студентов», «Группы». Ниже приведено подробное описание каждого подраздела.

В подразделе «Список студентов» пользователь может настроить фильтры (специальность, курсы), на основе которых генерируется список студентов (см. рис. G.1):



Рисунок G.1. Схематическая страница подраздела «Список студентов» раздела «Студенты»

Возможно редактирование информации о студентах (см. рис. G.2),  а также их удаление (см. рис. G.3).



Рисунок G.2. Окно редактирования информации о студенте



Рисунок G.3. Окно удаления студента из системы

В системе предусмотрено два способа добавления студентов: с помощью ручного ввода информации о студенте в соответствующем окне (см. рис. G.4) и с помощью импорта списка студентов из csv-файла. 



Рисунок G.4. Окно добавления студента

Для автоматизации занесения студентов в систему предназначен подраздел «Импорт списка студентов». Приложение, функционирующее на кафедре факультета, позволяет сформировать excel-файл, содержащий основную информацию о студентах факультета. Было решено стандартизировать содержимое такого файла. Для изменения этого стандарта необходимо внести дополнительные изменения в программный код. Колонки первой строки файла должны содержать следующее значение: «Фамилия», «Имя», «Отчество», «Пол», «Email». Во второй строке необходимо указать номер группы (например, «Группа БИ-10-1»). В следующих строках содержится соответствующая информация о студентах. Необходимо отметить, что данный файл может содержать информацию о студентах различных учебных групп (см. рис. G.5). Для импорта информации о студентах в систему необходимо сохранить этот файл в формате csv, после чего нажать на кнопку «Обзор» и выбрать нужный файл. 



Рисунок G.5. Схематическая страница подраздела «Импорт списка студентов» раздела «Студенты»

Для просмотра (см. рис. G.6), редактирования (см. рис. G.7), добавления (см. рис. G.8) и удаления учебных групп предназначен подраздел «Группы».



Рисунок G.6. Схематическая страница подраздела «Группы» раздела «Студенты»



Рисунок G.7. Окно редактирования учебной группы



Рисунок G.8. Окно добавления учебной группы

Раздел «Сотрудники»

В данном разделе содержится два подраздела: «Список сотрудников», «Роли сотрудников». Ниже приведено подробное описание каждого подраздела.

В подразделе «Список сотрудников» пользователь может просмотреть список сотрудников факультета (см. рис. G.9):



Рисунок G.9. Схематическая страница подраздела «Список сотрудников» раздела «Сотрудники»

Пользователь может вручную добавить нового сотрудника, а также указать его роли на факультете (см. рис. G.10). Кроме того, предоставляется возможность удалить сотрудника факультета из системы (см. рис. G.11).



Рисунок G.10. Окно добавления информации о сотруднике факультета



Рисунок G.11. Окно добавления информации о сотруднике факультета

Раздел «Компании»

В данном разделе пользователь может удалять компании, пользователей-работодателей,  а также вакансии. Возможно удаление вакансий, которые содержатся в системе более одного месяца, более трех месяцев, более полгода.





Примеры исходных кодов

Листинг H.1. Страница просмотра информации о студенте

@model HSEPermSEMS2.Areas.Employer.ViewModels.StudentInfoViewModel

@{

    ViewBag.Title = "Информация о студенте";

}

<h2>

    @string.Format("{0} {1} {2}", Model.Student.LastName, Model.Student.Name, Model.Student.MiddleName != null ? Model.Student.MiddleName : "")



    <!--ko ifnot: app.bookmarksAdd.bookmarked()-->

    <button type="button" class="btn btn-success" onclick="$('#commentWindow').dialog('open')">Добавить в избранное</button>

    <!--/ko-->

    <!--ko if: app.bookmarksAdd.bookmarked()-->

    <button type="button" class="btn btn-danger" data-bind="click:app.bookmarksAdd.deleteItem">Удалить из избранного</button>

    <!--/ko-->

</h2>

<dl class="dl-horizontal">

    <dt>Email</dt>

    <dd><a href="mailto:@Model.Student.Email">@Model.Student.Email</a></dd>

    <dt>Специальность</dt>

    <dd>@Model.Student.Group.Specialization.Name</dd>

    <dt>Курс</dt>

    <dd>@Model.Student.Group.Course</dd>

    <dt>Статус</dt>

    <dd>@(Model.Student.CurrentlyEmployed.Value ? "Трудоустроен" : "Не трудоустроен")</dd>

    <dt>Число просмотров </dt>

    <dd>@Model.Student.ViewsNumber</dd>

</dl>

<h3>Навыки</h3>

@foreach (var item in Model.Skills)

{

    @(string.Format("{0}; ", item.Name))

}

@{

    if (Model.Skills.Count == 0)

    {

        <p class="text-center">Навыки отсутствуют</p>

    }

}

<h3>Опыт работы</h3>

<div class="table-responsive">

    <table class="table table-bordered">

        <thead>

            <tr>

                <th>#</th>

                <th>

                    Начало

                </th>

                <th>

                    Окончание

                 </th>



                <th>

                    Компания

                </th>

                <th>

                    Должность

                </th>

                <th>

                    Обязанности

                </th>

                <th>

                    Доп.информация

                </th>

            </tr>

        </thead>

        <tbody>

            @{

                int i = 1;

                foreach (var item in Model.WorkExperiences)

                {

                    <tr>

                        <td>@i</td>

                        <td>@item.StartDate.ToString("dd.MM.yy")</td>

                        <td>@(item.EndDate.HasValue ? item.EndDate.Value.ToString("dd.MM.yy") : "-")</td>

                        <td>@item.Company.Name</td>

                        <td>@item.Position</td>

                        <td>@item.Duties</td>

                        <td>@item.Info</td>

                    </tr>

                    i++;

                }

            }

        </tbody>

    </table>

    @{

        if (Model.WorkExperiences.Count == 0)

        {

            <p class="text-center">Опыт работы отсутствует</p>

        }

    }

</div>

<h3>    Отзывы работодателей

    <button type="button" class="btn btn-success" onclick="$('#reviewWindow').dialog('open')">Написать отзыв</button>

</h3>

<div class="table-responsive">

    <table class="table table-bordered">

        <thead>

            <tr>

                <th>#</th>

                <th>

                    Оценка

                </th>

                <th>

                    Работодатель

                </th>

                <th>

                    Компания

                </th>

                <th>

                    Комментарий

                </th>

            </tr>

        </thead>

        <tbody>

            @{

    int j = 1;

    foreach (var item in Model.EmployersReviews)

    {

        <tr>

            <td>@j</td>      

            <td>

                <img src="@Url.Content("~/Images/smiles/smile" + item.Review.Caption + ".png")" style="width:40px" />

                @if (item.EmployerId == int.Parse(ViewData["EmployerId"].ToString()))

{

    <div id=@item.Id class="icon-pencil" data-bind="click: app.reviewsAdd.edit"></div>

}

            </td>

            <td>

                <a href="mailto:@item.Employer.Email">@string.Format("{0} {1} {2}", item.Employer.LastName, item.Employer.Name, item.Employer.MiddleName != null ? item.Employer.MiddleName : "")</a>

        </td>

            <td>@item.Employer.Company.Name</td>

            <td>@item.ReviewText</td>

        </tr>

        j++;

    }

}

        </tbody>

    </table>

    @{

        if (Model.EmployersReviews.Count == 0)

        {

            <p class="text-center">Отзывы работодателей отсутствует</p>

        }

    }

</div>

<h3>Проектные работы</h3>

<div class="tabbable">

    <ul class="nav nav-tabs">

        <li id="educationalBar" class="active"><a href="#tab1" data-toggle="tab" onclick="if (!$('#educationalBar').hasClass('active')) { $('#educationalBar').addClass('active'); $('#notEducationalBar').removeClass('active'); ed(); }">Учебные</a></li>

        <li id="notEducationalBar"><a href="#tab2" data-toggle="tab" onclick="if (!$('#notEducationalBar').hasClass('active')) { $('#educationalBar').addClass('active'); $('#educationalBar').removeClass('active'); ed(); }">Внеучебные</a></li>

    </ul>

</div>

<div class="table-responsive" id="educationalWorks">

    <table class="table table-bordered">

        <thead>

            <tr>

                <th>#</th>

                <th>

                    Название

                </th>

                <th>

                    Описание

                </th>



                <th>

                    Соавторы

                </th>

                <th>

                    Руководители

                </th>

                <th>

                    Ссылка

                </th>

            </tr>

        </thead>

        <tbody>

            @{

                int k = 1;

                foreach (var item in Model.Works.Where(w=>w.Educational))

                {

                    <tr>

                        <td>@k</td>

                        <td>@item.Name</td>

                        <td>@item.Description</td>

                        <td>

                            @{

                                foreach (var author in item.Students)

                                {

                                    if (author.Id != Model.Student.Id)

                                    {

                                        @Html.ActionLink(string.Format("{0} {1} {2}; ", author.LastName, author.Name, author.MiddleName != null ? author.MiddleName : ""), "StudentInfo", "Students", new { id = author.Id }, null)

                              

                                    }

                                }

                            }

                        </td>

                        <td>

                            @{

                                foreach (var dsm in item.DepartmentStaffMembers)

                                {

                                <a href="mailto:@dsm.Email">@string.Format("{0} {1} {2}", dsm.LastName, dsm.Name, dsm.MiddleName != null ? dsm.MiddleName : "")</a>

                                }

                            }

                        </td>

                        <td>@item.Reference</td>

                    </tr>

                    k++;

                }

            }

        </tbody>

    </table>

    @{

        if (Model.Works.Where(w => w.Educational).Count() == 0)

        {

            <p class="text-center">Проектные работы отсутствуют</p>

        }

    }

</div>

<div class="table-responsive hidden" id="notEducationalWorks">

    <table class="table table-bordered">

        <thead>

            <tr>

                <th>#</th>

                <th>

                    Название

                </th>

                <th>

                    Описание

                </th>



                <th>

                    Соавторы

                </th>

                <th>

                    Руководители

                </th>

                <th>

                    Ссылка

                </th>

            </tr>

        </thead>

        <tbody>

            @{

                int m = 1;

                foreach (var item in Model.Works.Where(w => !w.Educational))

                {

                    <tr>

                        <td>@m</td>

                        <td>@item.Name</td>

                        <td>@item.Description</td>

                        <td>

                            @{

                    foreach (var author in item.Students)

                    {

                        if (author.Id != Model.Student.Id)

                        {

                            @Html.ActionLink(string.Format("{0} {1} {2}; ", author.LastName, author.Name, author.MiddleName != null ? author.MiddleName : ""), "StudentInfo", "Students", new { id = author.Id }, null)                                

                        }

                    }

                            }

                        </td>

                        <td>

                            @{

                    foreach (var dsm in item.DepartmentStaffMembers)

                    {

                         @Html.ActionLink(string.Format("{0} {1} {2}; ", dsm.LastName, dsm.Name, dsm.MiddleName != null ? dsm.MiddleName : ""), "MemberInfo", "DepartmentStaffMembers", new { id = dsm.Id }, null)

                    }

                            }

                        </td>

                        <td>@item.Reference</td>

                    </tr>

                    m++;

                }

            }

        </tbody>

    </table>

    @{

        if (Model.Works.Where(w => !w.Educational).Count() == 0)

        {

            <p class="text-center">Проектные работы отсутствуют</p>

        }

    }

</div>

<div id="commentWindow" title="Комментарий" data-bind="with: app.bookmarksAdd">

    <form role="form">

        <div class="form-group">

            <label for="exampleInputEmail1">Введите комментарий</label>

            <textarea class="form-control" id="exampleInputEmail1" placeholder="Введите комментарий" data-bind="value: comment, valueUpdate: 'afterkeydown'"></textarea>

        </div>

    </form>

</div>

<div id="reviewWindow" title="Комментарий" data-bind="with: app.reviewsAdd">

    <form role="form">

        <div class="form-group">

            <label for="exampleInputEmail1">Выберите оценку</label>

            <select class="input-sm form-control" data-bind="options: app.reviewsAdd.reviews, optionsText: 'Description', optionsValue: 'Id', value: reviewId"></select>

        </div>

        <div class="form-group">

            <label for="exampleInputEmail1">Заполните отзыв</label>

            <textarea class="form-control" id="exampleInputEmail1" placeholder="Заполните отзыв" data-bind="value: reviewText, valueUpdate: 'afterkeydown'"></textarea>

        </div>

    </form>

</div>

<div id="reviewEditWindow" title="Комментарий" data-bind="with: app.reviewsAdd">

    <form role="form">

        <div class="form-group">

            <label for="exampleInputEmail1">Выберите оценку</label>

            <select class="input-sm form-control" data-bind="options: app.reviewsAdd.reviews, optionsText: 'Description', optionsValue: 'Id', value: reviewId"></select>

        </div>

        <div class="form-group">

            <label for="exampleInputEmail1">Заполните отзыв</label>

            <textarea class="form-control" id="exampleInputEmail1" placeholder="Заполните отзыв" data-bind="value: reviewText, valueUpdate: 'afterkeydown'"></textarea>

        </div>

    </form>

</div>

@section scripts{

    <script src="~/Content/bootstrap/js/bootstrap.min.js"></script>

    <script src="~/Scripts/q.min.js"></script>

    <script src="~/Scripts/breeze.min.js"></script>

    <script src="~/Scripts/knockout-2.2.0.js"></script>

    <script src="~/Scripts/jquery-1.9.1.js"></script>

    <script src="~/Scripts/jquery-ui-1.9.2.js"></script>

    <script src="~/Scripts/jquery.ui.widget.js"></script>

<script src="~/Scripts/toastr.js"></script>

<script src="~/Scripts/bindings.js"></script>

<script src="~/Scripts/helpers.js"></script>

<script src="~/Areas/Employer/Scripts/ViewModels/bookmarksAdd.js"></script>

<script src="~/Areas/Employer/Scripts/ViewModels/reviewsAdd.js"></script>

<script src="~/Scripts/App/jqueryDialogResponsive.js"></script>

<script type="text/javascript">

    $(function () {

        ko.applyBindings(app);

        app.bookmarksAdd.studentId(@Model.Student.Id);

        app.bookmarksAdd.employerId(@Model.EmployerId);

        app.reviewsAdd.studentId(@Model.Student.Id);

        app.reviewsAdd.employerId(@Model.EmployerId);

        app.bookmarksAdd.check();

        app.reviewsAdd.loadReviews();

        $("#commentWindow").dialog({

            autoOpen: false,

            resizable: true,

            width: 300,

            height: 300,

            modal: true,

            fluid: true,

            buttons: {

                "Добавить": function () {

                    app.bookmarksAdd.add();

                    $(this).dialog("close");

                },

                "Отменить": function () {

                    $(this).dialog("close");

                }

            }

        });

        $("#reviewWindow").dialog({

            autoOpen: false,

            resizable: true,

            width: 300,

            height: 400,

            modal: true,

            fluid: true,

            buttons: {

                "Добавить": function () {

                    app.reviewsAdd.add();

                    $(this).dialog("close");

                },

                "Отменить": function () {

                    $(this).dialog("close");

                }

            }

        });

        $("#reviewEditWindow").dialog({

            autoOpen: false,

            resizable: true,

            width: 300,

            height: 400,

            modal: true,

            fluid: true,

            buttons: {

                "Сохранить": function () {

                    app.reviewsAdd.update();

                    $(this).dialog("close");

                },

                "Отменить": function () {

                    $(this).dialog("close");

                }

            }

        });

    });

    function ed() {

        if ($("#educationalBar").hasClass("active")) {

            $("#educationalWorks").removeClass("hidden");

            if (!$("#educationalBar").hasClass("show")) {

                $("#educationalWorks").addClass("show");

            }

            $("#notEducationalWorks").removeClass("show");

            if (!$("#notEducationalWorks").hasClass("hidden")) {

                $("#notEducationalWorks").addClass("hidden");

            }

        }

        else {

            $("#educationalWorks").removeClass("show");



            if (!$("#educationalWorks").hasClass("hidden")) {

                $("#educationalWorks").addClass("hidden");

            }

            $("#notEducationalWorks").removeClass("hidden");



            if (!$("#notEducationalWorks").hasClass("show")) {

                $("#notEducationalWorks").addClass("show");

            }

        }

    }

</script>    

}

Листинг 2. Содержимое javascript файла для создания списка студентов в кабинете работодателя

var app = window.app = window.app || {};

app.vm = app.vm || {};

var breezeManager = new breeze.EntityManager(app.root + 'api/SEMS/');

var breezePredicate = breeze.Predicate;

app.vm.students = function () {

    var self = this;

    self.loading = ko.observable(false);

    self.specializations = ko.observableArray();

    self.currentSpecialization = ko.observable(0);

    self.loadSpecializations = function () {

        self.specializations.push(new app.model.specializationModel({

            Id: 0, Name:'Все'

        }));

        var query = new breeze.EntityQuery()

           .from("Specializations").orderBy("Name").select("Id, Name")

           .inlineCount(true);

        breezeManager.executeQuery(query).then(function (data) {

            data.results.forEach(function (item) {

                self.specializations.push(new app.model.specializationModel(item));

            });

        });

    };

    self.sexes = [

        { caption: '0', name: 'Все' }, { caption: '1', name: 'М' },

        { caption: '2', name: 'Ж' }

    ];

    self.currentSex = ko.observable('0');

    self.statuses = [

        { caption: '0', name: 'Все' }, { caption: '1', name: 'Трудоустроенные' },

        { caption: '2', name: 'Не трудоустроенные' }

    ];

    self.currentStatus = ko.observable('0');

    self.tags = ko.observable(null);

    self.course1 = ko.observable(true);

    self.course2 = ko.observable(true);

    self.course3 = ko.observable(true);

    self.course4 = ko.observable(true);

    self.courseg4 = ko.observable(true);

    self.atLeastOneTag = ko.observable(true);

    self.atLeastOneTag.subscribe(function (val) {

        if ((self.tags() != null) && (self.tags() != "")) {

            self.pageNumber(1);

            self.refreshPage();

        }

    });

    self.currentSpecialization.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.course1.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.course2.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.course3.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.course4.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.courseg4.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.currentSex.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.currentStatus.subscribe(function (val) {

        self.pageNumber(1);

        self.refreshPage();

    });

    self.itemsList = ko.observableArray();

    self.totalItemsNumber = ko.observable(0);

    self.pageSizeList = ko.observableArray([1, 10, 20, 50]);

    self.pageSize = ko.observable(10);

    self.pageNumber = ko.observable(1);

    self.pageNumber.subscribe(function () {

        self.refreshPage();

    });

    self.pageSize.subscribe(function (val) {

        if (self.pageNumber() != 1) {

            self.pageNumber(1);

        } else { self.refreshPage(); }

    });

    self.searchLastName = ko.observable("");

    self.searchName = ko.observable("");

    self.searchEmail = ko.observable("");

    self.searchRecordBookNumber = ko.observable("");



self.refreshPage = function () {

        if (self.currentSpecialization() != undefined && self.currentSex() != undefined && self.currentStatus() != undefined ) {

            self.loading(true);

            var searchLastName = "indexOf(toLower(LastName), '" + self.searchLastName().trim().toLocaleLowerCase() + "')";

            var searchName = "indexOf(toLower(Name), '" + self.searchName().trim().toLocaleLowerCase() + "')";

            var searchEmail = "indexOf(toLower(Email), '" + self.searchEmail().trim().toLocaleLowerCase() + "')";

            var searchRecordBookNumber = "indexOf(toLower(RecordBookNumber), '" + self.searchRecordBookNumber().trim().toLocaleLowerCase() + "')";

            var p1, p2, p3, p4;

            if (self.searchLastName().length != 0) {

                p1 = breezePredicate.create(searchLastName, ">=", 0);

            } else {

                p1 = breezePredicate.create(searchLastName, "<=", 0);

            }

            if (self.searchName().length != 0) {

                p2 = breezePredicate.create(searchName, ">=", 0);

            } else {

                p2 = breezePredicate.create(searchName, "<=", 0);

            }

            if (self.searchEmail().length != 0) {

                p3 = breezePredicate.create(searchEmail, ">=", 0);

            } else {

                p3 = breezePredicate.create(searchEmail, "<=", 0);

            }

            if (self.searchRecordBookNumber().length != 0) {

                p4 = breezePredicate.create(searchRecordBookNumber, ">=", 0);

            } else {

                p4 = breezePredicate.create(searchRecordBookNumber, "<=", 0);

            }

            console.log(self.tags());

            var query = new breeze.EntityQuery()

                .from("StudentsFilter")

                .withParameters(

                    {

                        specializationId: self.currentSpecialization(),

                        courseId: (self.course1() ? "1" : "") + (self.course2() ? "2" : "") + (self.course3() ? "3" : "") + (self.course4() ? "4" : "") + (self.courseg4() ? "5" : ""),

                        sexId: self.currentSex(), statusId: self.currentStatus(),

                        keywords: self.tags(),

                        atleastOneKeyword: self.atLeastOneTag()

                    })

                .skip((self.pageNumber() - 1) * self.pageSize())

                .orderBy("LastName").where(p1.and(p2.and(p3.and(p4))))

                .take(self.pageSize())

                .select("Id, LastName, Name, Email, RecordBookNumber")

                .inlineCount(true);



            self.itemsList.removeAll();

            breezeManager.executeQuery(query).then(function (data) {

                console.log('data');

                console.log(data);

                self.totalItemsNumber(data.inlineCount);

                data.results.forEach(function (item) {

                    console.log(item);

                    self.itemsList.push(new app.model.studentModel(item));

                });

                app.helpers.setPaging("#pager", self.pageNumber(), Math.ceil(self.totalItemsNumber() / self.pageSize()), self.pageNumber);

                self.loading(false);

            }).fail(function (e) { console.log(e);});

        }

    };

    self.separator = ko.observable("; ");

    self.messageSubject = ko.observable();

    self.messageBody = ko.observable();

    self.sendMessage = function () {

        toastr.warning('Выполняется отправка сообщения...');

        var filter = {

            searchLastName: self.searchLastName(),

            searchName: self.searchName(),

            searchEmail: self.searchEmail(),

            searchRecordBookNumber:self.searchRecordBookNumber(),

            specializationId: self.currentSpecialization(),

            courseId: (self.course1() ? "1" : "") + (self.course2() ? "2" : "") + (self.course3() ? "3" : "") + (self.course4() ? "4" : "") + (self.courseg4() ? "5" : ""),

            sexId: self.currentSex(),

            statusId: self.currentStatus(),

            keywords: ((self.tags() == null) || (self.tags() == "")) ? "null" : self.tags(),

            atlOne: self.atLeastOneTag(),

            messageSubject: self.messageSubject(),

            messageBody: self.messageBody()

        };

        $.post(app.root + 'Employer/Students/SendMessage', filter, function (data) {

            if (data) { toastr.success('Сообщение было отправлено получателям!');  }

            else {toastr.error('Сообщение не было отправлено!'); }

        });

    };

};

app.students = new app.vm.students;



Листинг 3. Содержимое breeze-контроллера для создания списка студентов в кабинете работодателя

[HttpGet]

         public IQueryable<Student> StudentsFilter(string specializationId, string courseId, string sexId, string statusId, string keywords, bool atleastOneKeyword)

         {

             var specialization = int.Parse(specializationId);

             List<int> courses = new List<int>();

             if (courseId != null) {

                 courses = courseId.Select(c => int.Parse(c.ToString())).ToList();

             }

             var oldCourseExist = courses.Any(c => c == 5);

             var groups = _contextProvider.Context.Groups.Where(g => ((specialization != 0) ? (g.SpecializationId == specialization) : true) && ((courses.Contains(g.Course.Value)) || (oldCourseExist ? (g.Course > 4) : false))).Select(g => g.Id);

             var maleSex=true;

             if (sexId != "0")

             {

                 maleSex = (sexId == "1") ? true : false;

             }

             var employed=true;

             if (statusId!="0"){

                 employed=(statusId=="1")?true:false;

             }

             var newTagsNames = new List<string>();

             var newTagsIds = new List<int>();

             var someTagDoNotExist = false;

             var spsStudents=new List<int>();

             if (keywords != null) {

                 string[] tagsNames = keywords.Split(',');

                 foreach (var tagName in tagsNames)

                 {

                     string newTagName = tagName.Trim();

                     if (newTagName != "")

                     {

                         newTagsNames.Add(newTagName);

                     }

                 }

                 newTagsNames = newTagsNames.Distinct(StringComparer.InvariantCultureIgnoreCase).ToList();

                 foreach (var t in newTagsNames)

                 {

                     Keyword tag = _contextProvider.Context.Keywords.SingleOrDefault(tg => tg.Name.Equals(t, StringComparison.InvariantCultureIgnoreCase));

                     if (tag != null)

                     {

                         newTagsIds.Add(tag.Id);

                     }

                     else {

                         someTagDoNotExist = true;

                     }

                 }

                 if (!someTagDoNotExist || atleastOneKeyword) {

                     newTagsIds = newTagsIds.OrderBy(t => t).ToList();



                     var spsStudents1 = _contextProvider.Context.StudentProfessionalSkills.GroupBy(sps => sps.StudentId, sps => sps.KeywordId, (key, g) => new { StudentId = key, KeywordIds = g.OrderBy(k => k) })

                        .Where(x => (

                            atleastOneKeyword ?

                            newTagsIds.Intersect(x.KeywordIds)

                             .Any()

                            :

                            (newTagsIds.Intersect(x.KeywordIds).Count() == newTagsIds.Count())

                             ));

                     foreach (var t in spsStudents1) {

                         spsStudents.Add(t.StudentId);

                     }

                 }

                 

                 

             }

             return _contextProvider.Context.Users.OfType<Student>().Where(s => 

                 (

                    (sexId != "0") ? (s.MaleSex == maleSex) : (true)

                 ) && 

                 (

                    (statusId != "0") ? (s.CurrentlyEmployed == employed) : (true)

                 ) && 

                 (

                    groups.Contains(s.GroupId.Value)

                 ) &&

                 (

                    (keywords != null) ? (

                        !atleastOneKeyword?(

                            someTagDoNotExist ? (false) : (spsStudents.Contains(s.Id))

                        ):(

                            spsStudents.Contains(s.Id)

                        )

                    ) : (true)

                    

                 )); 

}

