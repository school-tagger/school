 

 
 
 
 

 
 
 

 
 
 
 
 
 
 

 
 
 
 
 

Правительство Российской Федерации 

Федеральное государственное автономное образовательное 

учреждение высшего профессионального образования 

"Национальный исследовательский университет 

"Высшая школа экономики" 

 

Отделение программной инженерии 

Кафедра Управления разработкой программного обеспечения  

ВЫПУСКНАЯ КВАЛИФИКАЦИОННАЯ РАБОТА 

На тему: “Мобильный клиент для системы управления проектами 

Assembla с поддержкой нотификаций” 

 
Студента группы № 472ПИ 
Зорина Ильи Борисовича 
 
 
Научный руководитель 
преподаватель кафедры УРПО 
Климов Борис Анатольевич 
 

Москва, 2014 г 

 
 

 

 

2 

 
Аннотация 
 
Данный документ является выпускной квалификационной работой бакалавра. Работа 
 
посвящена разработке мобильного клиента для системы управления Assembla на платформе 
Android  c  возможностью  получения  уведомлений  об  изменениях  в  текущих  проектах 
пользователя.  
 
Актуальность  работы  подтверждается  необходимостью  наличия  оперативного 
доступа  к  системе  управления  проектами,  которая  содержит  критически  важную 
информацию  для  планирования  и  исполнения  проекта.  Своевременный  доступ  к  этой 
информации    позволит  снизить  риски  выхода  затрат  за  рамки  бюджета  проекта  и  срыва 
сроков проекта, вследствие чего увеличится вероятность успешного завершения проекта. 
Главными  целями  работы  являются:  реализация  возможности  полноценного 
 
использования  системы  управления  проектами  Assembla  через  мобильные  устройства, 
разработка  и  оптимизация  пользовательского  интерфейса  для  мобильных  устройств, 
обеспечения  возможности  получения  информации  по  проектам  пользователя  по  мере  ее 
поступления.  Для  достижения  приведенных  выше  целей  необходимо  решить  следующие 
задачи:  изучение  API  (Application  Programming  Interface),  предоставляемого  системой 
управления  проектами  Assembla  для  взаимодействия  с  ней,  реализация  клиентского 
приложения  на  базе  платформы  Android,  реализация  серверного  компонента  для  отправки 
уведомления на клиентское приложение. 
 
В рамках работы была разработана система,  состоящая из клиентского приложения 
на  платформе  Android,  которое  позволяет  взаимодействовать  с  системой  управления 
проектами  Assembla,  и  серверный  компонент,  который  обеспечивает  проверку  наличия 
обновлений в текущих проектах пользователя и их отправку на клиентское приложение.  
 
Разработанная система прошла апробацию в компании Эмпатика, которая использует 
Assembla  в  качестве  системы  управления  проектами  для  поддержки  процесса  разработки 
программного обеспечения. 
 
скачивания и использования широкому кругу пользователей. 

На  текущий  момент  приложение  опубликовано  в  Google  Play  и  доступно  для 

 

 

3 

 
Оглавление 
 

1. Введение 

1.1 Цели работы 
1.2 Задачи работы 

2. Описание предметной области 
2.1 Анализ предметной области 
2.2 Теоретические основы 
2.2.1 Главные принципы гибких методологий 
2.2.2 Скрам 

2.2.2.1 Скрам роли 
2.2.2.2 Спринт 
2.2.2.3 Резерв 
2.2.2.4 Встречи 

2.3 Анализ существующих решений 

2.3.1 Assembla Touch 

3. Описание используемых технологий 

3.1 Архитектура системы 
3.2 Клиентское приложение 

3.2.1 Компоненты Android приложения 
3.2.2 OrmLite 
3.2.3 Volley 
3.2.4 Gson 
3.2.5 Java 
3.2.6 XML 

3.3 Сервер нотификаций 
3.3.1 Google App Engine 
3.3.2 Python 

3.4 Среды разработки 
3.4.1 Android Studio 
3.4.1 PyCharm 

4 Реализация системы 

 

5 
6 
6 
7 
7 
9 
10 
10 
11 
12 
12 
12 
13 
13 
16 
16 
17 
17 
18 
19 
19 
19 
20 
20 
20 
21 
22 
22 
22 
23 

4 

4.2 Реализация клиента 

4.1 Организация базы данных 

23 
4.1.1 Инфологическая схема базы данных клиентского приложения  23 
4.1.2 Даталогическая схема базы данных клиентского приложения 
24 
24 
4.1.3 Класс Space 
25 
4.1.4 Класс User 
4.1.5 Класс SpaceMember 
26 
27 
4.1.6 Класс Milestone 
4.1.7 Класс Ticket 
28 
29 
4.1.8 Класс TicketComment 
4.1.9 Класс User сервера нотификаций 
30 
31 
31 
32 
34 
35 
36 
38 
39 
40 
42 
44 
46 

4.2.1 Аутентификация пользователя 
4.2.2 Синхронизация данных 
4.2.3 Лента событий 
4.2.4 Список пространств 
4.2.5 Список задач 
4.2.6 Экран отдельной задачи 
4.2.7 Список комментариев 
4.2.8 Создание и редактирование задач 

4.3 Реализация сервера нотификаций 

5 Заключение 
6 Список использованной литературы 

 

 

 

 

 
1. Введение 

5 

 
Harvard Business Review опубликовали исследование, в котором был проанализирован 
1471  проект  в  сфере  информационных  технологий.  Данное  исследование  показало,  что 
средний  перерасход  бюджета  проекта  составляет  27%,  а  средний  перерасход  времени, 
запланированного на проект составляет 70%. Более того, бюджет каждого шестого проекта 
превышается  на  200%  [11].  Большую  роль  в  эти  перерасходы  часто  оказывается  влияние 
качество  и  эффективность  управления  проектами  из-за  недостатка  надлежащего 
планирования,  приоритезации  и  неэффективного  управления  ресурсами.  Таким  образом, 
чтобы  снизить  риск  срыва  сроков  и  превышения  бюджета  проекта,  важно  иметь 
оперативный  доступ  к  точным  данным  по  проектам,  который  обеспечивают  современные 
системы управления проектами.  

Одной  из  таких  современных  систем  управления  проектами  является  Assembla  - 
система  управления  проектами,  предназначенная  для  управления  проектами  по  разработке 
программного  обеспечения,  которая  используется  в  рамках  данного  проекта.  Последний 
опрос “State of Agile” показал, что 88% из более чем 3500 респондентов используют Agile 
методологии  при  разработке  программных  продуктов  [10].  Поэтому,  Assembla,  как  и 
большинство  систем  управления  проектами,  специализирующихся  на  управлении 
разработкой программного обеспечения, ориентированы на работу с использованием гибких 
методологий, например, Scrum. 
Последние  данные  от  Business  Insider  показывают,  что  общее  число  мобильных 
  
устройств  (смартфонов  и  планшетов)  приближается  к  общему  количеству  персональных 
компьютеров  [11],  что  делает  мобильные  устройства  значимой  частью  современной 
индустрии  информационных  технологий.  В  основном,  системы  управления  проектами 
реализованы в виде веб-приложений, что позволяет вести совместную работу над проектами. 
Однако,  обычно  использование  веб-приложений  на  мобильных  устройствах  невозможно  в 
случае, если разработчики не адаптировали его для мобильных устройств, или неудобно для 
пользователя  из-за  физических  характеристик  устройства,  таких  как  размер  экрана, 
например. Решением этой проблемы является создание клиентского приложения. В случае с 
системами  управления  проектами,  наличие  клиентских  приложений  для  мобильным 
платформ является критическим фактором для такой зависимой от оперативного доступа к 
информации сферы, как управление проектами. 

 

 

 
1.1 Цели работы 

6 

1.  Дать возможность полноценного использования системы управления проектами 

Assembla через мобильные устройства; 

2.  Оптимизировать пользовательский интерфейс для мобильных устройств; 
3.  Дать возможность пользователям получать информацию по проектам по мере ее 

поступления. 
1.2 Задачи работы 

1.  Изучить API (Application Programming Interface) предоставляемое Assembla [8]; 
2.  Реализовать клиентское приложение на основе платформы Android; 
3.  Реализовать серверную часть для отправки уведомлений на клиент. 

 

 

 

 
2. Описание предметной области 
2.1 Анализ предметной области 

7 

 
Проект  –  это  временное  предприятие,  предназначенное  для  создания  уникальных 
продуктов, услуг или результатов [3]. Временный̆ характер проекта означает, что у любого 
проекта  есть  определенное  начало  и  завершение.  Завершение  наступает,  когда  достигнуты 
цели проекта; или признано, что цели проекта не будут или не могут быть достигнуты; или 
исчезла  необходимость  в  проекте.  Каждый  проект  приводит  к  созданию  уникального 
продукта,  услуги  или  результата.  Несмотря  на  то,  что  в  результатах  проекта  могут 
присутствовать  повторяющиеся  элементы,  их  наличие  не  нарушает  принципиальной 
уникальности работ по проекту. 
 
Управление проектами – это приложение знаний, навыков, инструментов и методов к 
работам проекта для удовлетворения требований, предъявляемых к проекту [3]. Управление 
проектами выполняется с помощью применения и интеграции логически сгруппированных 
42 процессов управления проектами, объединенных в следующие 5 групп процессов: 

1.  Инициация; 

2.  Планирование; 

3.  Исполнение; 

4.  Мониторинг и управление; 

5.  Завершение. 

 
Assembla  -  веб-приложение  для  управления  проектами,  ориентированное  на 
управление разработкой программного обеспечения, но, также подходящее для управления 
проектной деятельностью любой направленности. Группы процессов управления проектами, 
покрываемые функционалом системы управления проектами Assembla: 

1.  Планирование хода выполнения проекта; 

2.  Мониторинг хода выполнения проекта; 

3.  Управление ходом выполнения проекта. 

Инструментарий для процесса планирования, предоставляемый системой управления 

 
проектами Assembla: 

 

 

8 

1.  Создание вех (назначение: названия, описания, даты предполагаемого окончания, 

ответственного за веху пользователя); 

2.  Создание задач (назначение: названия, описания, приоритета, ответственного за 

задачу пользователя, вехи, оценки сложности); 

Инструментарий  для  процесса  мониторинга,  предоставляемый  системой  управления 

 
проектами Assembla: 

1.  Лента  событий  (создание  новых  задач,  изменения  статусов  задач,  добавление 

новых комментариев к задачам и т.д.); 

2.  Фильтрация  задач  по  следующим  параметрам:  все  активные  задачи;  активные 
задачи,  отсортированные  по  вехам;  активные  задачи,  отсортированные  по 
пользователям;  закрытые  задачи,  отсортированные  по  вехам;  закрытые  задачи, 
отсортированные по дате закрытия; все задачи текущего пользователя; активные 
задачи  текущего  пользователя;  закрытые  задачи  текущего  пользователя; 
наблюдаемые задачи текущего пользователя; 

3.  StandUp отчеты о проделанной работе за неделю или день. 

Инструментарий  для  процесса  управления,  предоставляемый  системой  управления 

 
проектами Assembla: 

1.  Редактирование вех (изменение: предполагаемого окончания и ответственного за 

веху пользователя); 

2.  Редактирование  задач 

(изменение:  приоритета,  ответственного  за  задачу 

пользователя, вехи, оценки сложности); 

3.  Создание комментариев к задачам; 

4.  Управление  членами  проекта  (приглашение  пользователя  в  проект,  удаление 

пользователя из проекта, изменение прав доступа пользователя). 

 

 

 

9 

 
2.2 Теоретические основы 
 
Гибкие  методологии  -  это  серии  подходов  к  разработке  программного  обеспечения, 
ориентированные  на  итеративную  модель  разработки  и  динамическое  формирование 
требований. Таким образом, на настоящий момент доступно два вида организации процесса 
разработки  программного  обеспечения:  итеративная  и  каскадная  модели.  Главное  отличие 
между  гибкой  и  каскадной  методологиями  заключается  в  способе  планирования  и 
выполнения проекта. В то время, как в Agile методологии весь процесс разработки поделен 
на  некоторое  количество  итераций  (количество  итераций  зависит  от  размера  и  сложности 
проекта, но обычно итерация длится от нескольких недель до одного месяца), после каждой 
из которых команда поставляет новую версию программного продукта с расширенным, по-
сравнению  с  предыдущей  версией,  функционалом.  В  каскадной  же  модели  весь  процесс 
разработки  разделен  на  стандартные  фазы,  такие  как:  анализ,  проектирование,  разработка, 
тестирование,  внедрение  и  т.д.  В  свою  очередь,  все  итерации  при  работе  с  гибкими 
методологиями так же делятся на перечисленные выше фазы, но, стоит отметить, что каждая 
итерация гораздо меньше целого проекта, что ведет к более эффективному и качественному 
процессу разработки. 
 
Еще  одно  важное  преимущество  Agile  методологии  над  каскадной  моделью 
разработки  заключается  в  проблеме  постоянного  изменения  требований  к  продукту  в 
современной  индустрии  разработки  программного  обеспечения.  Каскадная  модель 
изначально не была предназначена для работы с нестабильными требованиями из-за такого 
понятия, как - “wicked problem” - проблемы, чьи требования и ограничения не могут быть 
полностью известны до решения этой проблемы. “Этот парадокс подразумевает то, что для 
полного  решения  задачи  необходимо  решить  ее  два  раза:  первый  раз  -  чтобы  четко 
определить  проблему,  а  второй  раз  -  чтобы  создать  рабочее  решение”  [21].  В  противовес 
каскадной модели, Agile методологии полностью решают эту проблему благодаря делению 
проектных  работ  на  итерации  и  возможности  повторения  любой  фазы  итерации  любое 
необходимое количество раз. 
 
 

 

10 

 
 
2.2.1 Главные принципы гибких методологий 
Для  полного  понимания  основных  концепций  и  принципов  Agile  разработки 
 
необходимо  ознакомится  с  ключевым  документом  в  сфере  гибких  методологий  - 
“Манифестом гибких методологий разработки программного обеспечения” [9]: 

1.  Наивысший  приоритет  разработки  -  удовлетворение  потребностей  заказчика 

благодаря регулярной и ранней поставке программного обеспечения. 

2.  Изменения требований возможны на любых стадиях разработки. 
3.  Важность частоты выпуска работающего продукта. 
4.  Постоянная совместная работа разработчиков и представителей бизнеса. 
5.  Над  проектом  должны  работать  мотивированные  профессионалы  в  подходящих 

для труда условиях. 

6.  Непосредственное  общение 

-  наиболее  эффективное  средство  обменом 

информацией. 

7.  Работающий продукт - основной показатель прогресса. 
8.  Члены  команды  должны  иметь  возможность  поддерживать  постоянный  ритм 

работы. 

9.  Постоянное  внимание  к  техническим  деталям  и  качеству  проектирования 

повышает гибкость проекта. 

10. Необходимость минимизации лишней работы. 
11. Самоорганизующиеся команды наиболее эффективны. 
12. Систематический анализ способов улучшения эффективности работы. 

 
2.2.2 Скрам 
Существует несколько платформ разработки программного обеспечения, основанных 
 
на гибких методологиях, но последний опрос “State of Agile” показал, что  73% компаний, 
использующих гибкие методологии, применяют скрам и его гибриды при разработке своих 
продуктов  [22].  Скрам  -  это  платформа,  структурирующая  поддержку  сложного  процесса 
разработки  программного  обеспечения.  Он  состоит  из  скрам  команд,  их  ролей,  событий, 
правил  и  артефактов.  Каждый  компонент  платформы  служит  своей  цели  и  важен  для 
успешного  использования 
  скрам-процесса.  На  данном  рисунке  продемонстрирован 
стандартный скрам-процесс  (Рис.1). 
 
 
 

 

 

 

 
 
 

 

 

 

 

11 

 

 

 

Рис.1 Стандартный скрам-процесс 

 

 
 

 2.2.2.1 Скрам роли 
 

Ключевые роли в скрам-процессе [24]: 
1.  Владелец  продукта 

-  человек,  ответственный 

за  формулирование  и 
приоритезацию  задач,  управление  командой  и  взаимодействие  с  заказчиком. 
Любой  член  команды  может  быть  владельцем  продукта,  но  обычно  эту  роль 
выполняет  менеджер  проекта,  как  человек,  имеющий  наибольшее  знание  по 
проекту, чем любой член команды. 

2.  Скрам-команда  -  кросс-функциональная  команда,  состоящая  из  специалистов 
разного профиля:  разработчиков,  дизайнеров,  аналитиков,  тестировщиков и т.д., 
ответственная за разработку нового функционала. 

3.  Скрам-мастер  -  буфер  между  командой  и  любыми  отвлекающими  факторами. 

Следит за соблюдением командой теории, практик и правил скрам-процесса. 

 

 

 

12 

 
 
2.2.2.2 Спринт 
 
Спринт - одна из ключевых частей скрам-процесса. Это период времени за который 
набор запланированных функций должен быть реализован скрам-командой. Обычно спринт 
длится  от  нескольких  недель  до  одного  месяца.  Точное  значение  длины  спринта  зависит 
многих  факторов,  таких  как:  сложность  проекта,  объем  проекта,  объем  команды  и  ее 
профессионализм. Новый спринт начинается сразу после предыдущего. 
 
2.2.2.3 Резерв 
 
Резерв - это приоритезированый список задач по разработке программного продукта. 
Существуют  два  вида  резервов:  резерв  спринта,  определяющий  задачи,  которые  должны 
быть  выполнены  за  время  длительности  спринта;  и  резерв  продукта,  который  состоит  из 
списка задач по всему проекту. Обе категории спринтов составляются владельцем продукта 
с  некоторой  помощью  от  скрам-команды  для  определения  более  точной  оценки  задач  по 
времени и сложности.  
 
2.2.2.4 Встречи 
 

Список ключевых встреч в скрам-процессе [24]: 
1.  Планирование спринта происходит в начале каждой итерации. За время встречи 

составляется резерв для следующего спринта. 

2.  Ежедневное совещание посвящено выяснению ответов на три ключевых вопроса 
для  каждого  члена  команды:  что  сделано  к  текущему  совещанию,  что  будет 
сделано  к  следующему  совещанию,  какие  проблемы  мешают  достижению  цели 
спринта. 

3.  Обзор  итогов  спринта  проводится  после  завершения  каждого  спринта. 

Проводится демонстрация достигнутых за спринт результатов. 

4.  Ретроспективное  совещание  также  проводится  после  завершения  спринта. 
Обсуждаются итоги прошедшего спринта и последующие возможные улучшения 
в процессе разработки. 

 

 

 

13 

 
2.3 Анализ существующих решений 
2.3.1 Assembla Touch 
 
На  данный  момент  существует  единственное  приложение  для  работы  с  системой 
управления  проектами  Assembla  на  платформе  Android.  Последнее  обновление  этого 
приложения было в 2012 году [14] и обладает рядом значительных недостатков: 

1.  Не  соответствие  требованиям  к  современному  интерфейсу  приложения  на 

платформе Android [4]  (Рис.2); 

2.  Не  соответствие  требованиям  к  производительности  современного  приложения 

на платформе Android; 

3.  Отсутствие возможности работы без интернет-соединения  (Рис.3); 
4.  Отсутствие возможности просмотра более 10 элементов ленты событий. 

 

14 

Рис.2 Пример пользовательского интерфейса Assembla Touch 

 

 

 

15 

Рис.3 Пример поведения приложения Assembla Touch при отсутствии интернет соединения 
 
 

 

 

16 

 
3. Описание используемых технологий 
3.1 Архитектура системы 
Разрабатываемая  в  рамках  данного  проекта  система  спроектирована  на  основе 
 
клиент-серверной  архитектуры.  В  качестве  клиента  выступает  приложение,  написанное  на 
платформе  Android,  в  качестве  серверов  выступают  два  компонента:  сервер  Assembla  и 
сервер  нотификаций.  В  рамках  работы  было  разработано  два  компонента:  клиентское 
приложение  и  сервер  нотификаций.  Сервер  Assembla  является  готовым  компонентом, 
взаимодействие  с  которым  происходит  через  API  посредством  HTTP  запросов.  Клиент 
получает информацию с сервера Assembla  и сохраняет ее в базу данных для дальнейшего 
использования  при  отсутствии  интернет-соединения.  Также,  клиент  отправляет  вводимую 
пользователем  информацию  на  сервер  Assembla,  который  в  свою  очередь  сохраняет  ее  в 
базу данных и делает ее доступной для других клиентов. Сервер нотификаций переодически 
делает запросы на сервер Assembla, проверяя наличие новой информации для пользователя. 
В случае появления такой информации,  сервер нотификации уведомляет клиент об этом и 
обновляет  в  базе  данных  время  последней  проверки,  во  избежание  дублирования 
уведомлений. 

Рис.4 Архитектура системы 

 

 

 

 

17 
 

 
3.2 Клиентское приложение 
 
Клиентское  приложение  представляет  из  себя  нативное  Android  приложение, 
написанное  с  использованием  Android  SDK  (Software  Development  Kit),  предоставляющим 
доступ  к  стандартным  функциям  операционной  системы  Android  и  необходимые 
инструменты для сборки, запуска и отладки приложений [5]. 
 
3.2.1 Компоненты Android приложения 
 Android приложения состоит из четырех основных компонентов: Действия (Activity), 
 
Сервисы (Service), Приемники (BroadcastReceiver) и Источники данных (ContentProvider) [7]. 
Приложение не обязательно должно включать в себя все перечисленные выше компоненты, 
но оно должно включать как минимум один из них, чтобы быть работоспособным. Иерархия 
этих компонентов изображена на следующем рисунке   (Рис.5).  Назначение перечисленных 
выше компонентов приведено ниже: 

1.  Действия  представляют  собой  репрезентацию  одного  экрана  пользовательского 

интерфейса. 

2.  Сервисы  работают  в  бэкграунде  и  используются  для  выполнения  длительных 

операций и для работы с удаленными процессами. 

3.  Источники  данных  управляют  данными  приложений,  позволяют  их  считывать, 

модифицировать и дают доступ к ним сторонним приложениям. 

4.  Приемники  позволяют  получать  уведомления  и  информацию  как  о  системных, 

так и определенных разработчиком событиях. 

 
Все  эти  компоненты  работают  независимо  друг  от  друга.  Для  того,  чтобы 
активировать  компоненты  или  передавать  данные  между  ними,    используется  еще  один 
базовый компонент Android SDK, под названием Намерение (Intent). 

 

 

 

18 

Рис.5 Иерархия компонентов Android приложения 

 

 3.2.2 OrmLite 
Для хранения данных на клиенте используется  стандартная для Android приложений 
 
реляционная  база  данных  SQLite  и  надстройка  над  ней,  под  названием  OrmLite.  OrmLite 
(Object Relational Mapping Lite) предоставляет легковесный функционал для сохранения Java 
объектов  в  SQL  базу  данных  с  использованием  нативных  вызовов  к  Android  database  API 
[15]. Данная библиотека предоставляет следующий функционал: 

1.  Настройка с помощью аннотаций. 
2.  Мощная абстракция Объектов Доступа к Базе Данных (Database Access Object). 
3.  Гибкий Конструктор Запросов (Query Builder). 
4.  Поддержка “компилируемых” SQL запросов для повторяющихся заданий. 
5.  Поддержка  “внешних”  объектов  с  полями  классов,  являющихся  объектами,  но, 

хранящимися в таблицах базы данных. 

6.  Базовая поддержка транзакций. 
7.  Автоматическая генерация SQL кода для генерации таблиц. 

 

 

19 

 
 
3.2.3 Volley 
Для работы с сетью используется рекомендуемая разработчиками Google библиотека 
 
Volley [18], которая является надстройкой над стандартным для Android приложения Apache 
HTTP клиентом. Volley  обладает следующими характеристиками: 

1.  Поддержка загрузки JSON, изображений, текста. 
2.  Кэширование как в памяти, так и на дисковом пространстве. 
3.  Широкие возможности кастомизации. 
4.  Наличие инструментов для отладки и трассировки. 
5.  Поддержка Gson. 

 
3.2.4 Gson 
Для  декодирования  и  кодирования  информации  в  формате  JSON  (JavaScript  Object 
 
Notation), получаемой и отправляемой на сервер используется библиотека Gson. Gson - это 
Java  библиотека,  используемая  для  конвертирования  Java  объектов  в  их  JSON 
репрезентацию и обратно [16]. JSON - легковесный и легкочитабельный  формат передачи 
данных 
следующими 
характеристиками: 

JavaScript.  Данная  библиотека 

основанный  на 

обладает 

1.  Предоставление  простых  методов  toJson()  и  fromJson()  для  преобразования  Java 

объектов в JSON и наоборот. 

2.  Расширенная поддержка Java Generics. 
3.  Кастомизация репрезентации объектов. 
4. 

глубоких 

(с  иерархией 

сложных  объектов 

 Поддержка  произвольных 
вложенностей). 
 
 
3.2.5 Java 
В основе мобильной платформы Android  лежит виртуальная машина Dalvik, которая 
 
исполняет  модифицированный  Java  байткод.  Таким  образом,  стандартным  языком 
разработки для Android  приложений является Java.  Java  -  объектно-ориентированный язык 
программирования  высокого  уровня,  разработанный  Джеймсом  Гослингом  и  Sun 
Microsystems. Главный принцип Java - “write once, run everywhere” [20], позволяет запускать 
Java  код  на  разных  платформах  без  его  модификации.  Главные  достоинства  языка  Java: 
кроссплатформенность,  обратная  совместимость,  стабильность  и  широкое  сообщество 
разработчиков. Для разработки Android приложений возможно использование как JDK (Java 
Development Kit) версии 6, так и 7. 
 
 

 

20 

 
 
3.2.6 XML 
 
При  разработке  Android  приложений  рекомендовано  использовать  паттерн  MVVM 
(Model  View  View-Model)  и  для  возможности  работы  с  этим  паттерном  необходимо 
разделить  Model  и  View-Model  от  View.  Это  достигается  с  помощью  Менеджеров 
Расположения  (Layouts).  Менеджер  Расположения  определяет    визуальную  структуру 
пользовательского  интерфейса  с  помощью  XML(eXtensible  Markup  Language)  [19].  XML  - 
расширяемый  язык  разметки  с  формальным  синтаксисом,  удобный  для  создания  и 
обработки  документов  [25].  Таким  образом,  пользовательский  интерфейс  можно  целиком 
создать с использованием XML и отделить его от логики приложения, написанной на Java. 
 
3.3 Сервер нотификаций 
 
Для  получения  клиентом  уведомлений  об  изменениях  в  текущих  проектах 
пользователя  необходимо  реализовать  серверный  компонент,  который  бы  переодический 
запрашивал информацию с сервера Assembla и, в случае наличия обновлений уведомлял бы 
об  этом  клиент.  В  качестве  сервера  был  выбран  облачный  хостинг  Google  App  Engine, 
предоставляемый компанией Google. 
 
3.3.1 Google App Engine 
Google  App  Engine  (GAE)  -  PaaS  (Platform  as  a  Service)  облачное  решение  для 
 
разработки  и  хостинга  веб-приложений  с  использованием  инфраструктуры  Google  [26]. 
Google  App  Engine  поддерживает  приложения,  написанные  на  следующих  языках 
программирования:  Java,  Python,  PHP  и  Go.  GAE  предоставляет  возможность  легко 
разработать  и  развернуть  масштабируемое  веб-приложение,  выдерживающее  высокую 
нагрузку и большие количества данных. GAE обладает следующими особенности: 
1.  Хранилище данных с поддержкой запросов, сортировки и транзакций. 
2.  Автоматическое масштабирование и балансировка нагрузки. 
3.  Асинхронные очереди запросов для выполнения работы за пределами запросов. 
4.  Задания выполняющиеся по расписанию. 
5.  Интеграция с сервисами и API Google. 
Также,  еще  одним  плюсом  использования  GAE  является  возможность  бесплатного 
 
тестирования  приложения  или  его  работы  с  небольшим  количеством  пользователей.  Для 
бесплатных приложений действую следующие ограничения [12] (табл. 1). 
 

 

 

 
 

21 

Ограничение 
Время на запрос 
Размер HTTP 
ответа 
Размера объекта 
базы данных 
Размер кода 
приложения 
Часы работы 
экземпляра сервера 
Входящий трафик 
Исходящий трафик 
Объём базы 
Количество 
операций с базой 
Количество URL 
запросов 

 

Ограничения Google App Engine 

Лимит в день 
60 секунд для обычного запроса 

Таблица 1 

32 Мб 

1 Мб 

150 Мб 

28 часов в сутки 

Неограничен 
1 Гб в сутки 
1 Гб в сутки 

50 тысяч операций в сутки 

657,000 в сутки 

 

Данные  ограничения  позволяют  провести  тестирование  системы  на  небольшой 
 
группе  пользователей  бесплатно.  В  дальнейшем,  плата  взимается  исходя  из  объема 
предоставляемых услуг и только за используемые функции. 
 
3.3.2 Python 
Как было отмечено ранее для разработке приложений для Google App Engine можно 
 
использовать несколько языков программирования.  В рамках данного проекта был выбран 
Python.  Python  -  интерпретируемый  объектно-ориентированный  язык  высокого  уровня  с 
поддержкой  динамической  семантики,  разработанный  Гвидо  ван  Россумом.  Обладая 
обширной  стандартной  библиотекой  Python  покрывает  различные  области  разработки 
программного  обеспечения:  разработка    веб-приложений,  доступ  к    базам  данных, 
разработка пользовательских интерфейсов,  решение научных и вычислительных задач и т.д. 
[1]. Достоинства языка программирования Python: читабельность кода, удобство и легкость 
освоения,  мощная  стандартная  библиотека,  открытость  исходного  кода  и,  большое  и 
развивающееся сообщество разработчиков. 
 
 

22 

 
3.4 Среды разработки 
 
3.4.1 Android Studio 
Для разработки мобильного клиента Android  Studio  была выбрана  в качестве среды 
 
разработки.  Android Studio - среда разработки для платформы Android на основе IntelliJ Idea. 
Android  Studio  предоставляет  интегрированные  в  среду  разработки  инструменты  для 
разработки  и  отладки    Android  приложений  [6].  Достоинства  данной  IDE  (Integrated 
Development Environment): 

1.  Специфические  для  Android  разработки  методы  рефакторинга  и  быстрые 

исправления. 

2.  Инструменты  для  нахождения  проблем  с  производительностью,  юзабилити, 

совместимости версий и т.д. 

3.  Шаблоны для создания распространенных компонентов. 
4.  Богатый редактор пользовательского интерфейса. 

 

 
3.4.1 PyCharm 
Для  разработки  сервера  нотификаций  в  качестве  среды  разработки  был  выбран 
 
PyCharm.  Как  и    Android  Studio,    PyCharm    основан  на  IntelliJ  Idea,  поэтому  они  имеют 
одинаковый базовый функционал (подсветка синтаксиса, автодополнение исходного кода и 
т.д.),  горячие  клавиши  и  интерфейс.  Таким  образом,  понадобится  минимальное  время  на 
освоение данного инструмента. Кроме того, PyCharm является не только средой разработки 
для  Python,  но  и  имеет  интеграцию  с  Google  App  Engine  [23],  что  позволит  ускорить 
разработку и увеличить качество конечного результата. 
 

 

 

 
4 Реализация системы 

23 

4.1 Организация базы данных 
4.1.1 Инфологическая схема базы данных клиентского приложения 
 

Рис.6 Инфологическая схема базы данных 

 

 

 

24 
 

 
4.1.2 Даталогическая схема базы данных клиентского приложения 
 

 

 

Рис.7 Даталогическая схема базы данных 

 
 4.1.3 Класс Space 
 
являются столбцами соответствующей таблицы базы данных. 
 

 

Ниже  приведена  таблица  (табл.2)  полей  класса  Space,  которые  одновременно 

25 

Таблица 2 

 

Поля класса Space 

 
 

Поле 

id 

name 

description 

 
 
4.1.4 Класс User 
 
столбцами соответствующей таблицы базы данных. 

Ниже приведена таблица (табл.3) полей класса User, которые одновременно являются 

Таблица 3 

 

Поля класса User 

Описание 

уникальный 
идентификатор 
пространства 

имя 
пространства 
описание 
пространства 

Описание 

уникальный 
идентификатор 
пользователя 

имя 
пользователя 
псевдоним 
пользователя 
организация 
пользователя 
телефон 
пользователя 

Тип данных 

String 

String 

String 

 

 

Тип данных 

String 

String 

String 

String 

String 

 

Поле 

id 

name 

login 

organization 

phone 

 
 

 

 
 
 
4.1.5 Класс SpaceMember 
 
одновременнояявляются столбцами соответствующей таблицы базы данных. 

Ниже  приведена 

(табл.4)  полей 

таблица 

класса  SpaceMember, 

которые 

 
Таблица 4 

26 

 

 

Поля класса SpaceMember 

Поле 

id 

Тип данных 

String 

spaceID 

String 

userID 

String 

role 

status 

invitedByID 

invitedTime 

agreedTime 

 
 
 

String 

int 

String 

long 

long 

 

Описание 

уникальный 
идентификатор 
члена 
пространства 
идентификатор 
пространства 
ассоциируемог
о  с  данными 
членом 
пространства 
идентификатор 
пользователя 
ассоциируемог
о 
с  данным 
членом 
пространства 
роль 
пространства 
статус 
пространства 
идентификатор 
пользователя 
пригласившего 
данного  члена 
пространства 

члена 

члена 

время 
приглашения 
время 
принятия 
приглашения 

 
 
4.1.6 Класс Milestone 
 
являются столбцами соответствующей таблицы базы данных. 

27 

Ниже  приведена  таблица  (табл.5)  полей  класса  Milestone,  которые  одновременно 

 

Поля класса Milestone 

 

Поле 

id 

spaceID 

userID 

description 

createdBy 

Тип данных 

String 

String 

String 

String 

String 

updatedBy 

String 

isCompleted 

boolean 

dueDate 

completedDate 

long 

long 

 

 
Таблица 5 

Описание 

уникальный 
идентификатор 
вехи 
идентификатор 
пространства 
ассоциируемог
о 
с 
данной 
вехой 
идентификатор 
пользователя 
ответственного 
за данную веху 

описание вехи 

идентификатор 
пользователя 
создавшего 
данную веху 

идентификатор 
пользователя 
обновившего 
данную веху 

законченность 
вехи 
время 
планируемого 
завершения 
вехи 
время 
действительног
о 
завершения 
вехи 

 

Поле 

createdAt 

updatedAt 

28 

Тип данных 

long 

long 

Описание 

время создания 
вехи 
время 
обновления 
вехи 

 
 
4.1.7 Класс Ticket 
 
являются столбцами соответствующей таблицы базы данных. 

Ниже  приведена  таблица  (табл.6)  полей  класса  Ticket,  которые  одновременно 

 
Таблица 6 

 

Поля класса Ticket 

 

Поле 

number 

id 

spaceID 

Тип данных 

int 

String 

String 

milstoneID 

String 

assignedToID 

String 

reporterID 

String 

 

Описание 

с 

номер задачи в 
пространстве 
уникальный 
идентификатор 
задачи 
идентификатор 
пространства 
ассоциируемог
о 
данной 
задачей 
идентификатор 
вехи 
ассоциируемой 
с 
данной 
задачей  
идентификатор 
пользователя 
ответственного 
за 
данную 
задачу 
идентификатор 
пользователя 
создавшего 
данную задачу 

 

Поле 

summary 

description 

estimate 

priority 

status 

createdOn 

updatedAt 

29 

Тип данных 

String 

String 

double 

int 

String 

long 

long 

Описание 

название 
задачи 
описание 
задачи 
оценка задачи 

приоритет 
задачи 
статус задачи 

время создания 
задачи 
время 
обновления 
задачи 

 
 
4.1.8 Класс TicketComment 
 
одновременно являются столбцами соответствующей таблицы базы данных. 

Ниже  приведена  таблица 

(табл.7)  полей  класса  TicketComment,  которые 

 
Таблица 7 

 

Поля класса TicketComment 

 

Поле 

id 

userID 

Тип данных 

String 

String 

ticketID 

String 

 

Описание 

уникальный 
идентификатор 
комментария 

идентификатор 
пользователя 
создавшего 
данный 
комментарий 
идентификатор 
задачи 
ассоциируемой 
с 
данным 
комментарием 

 

Поле 

comment 

ticketChanges 

createdAt 

updatedAt 

30 

Тип данных 

String 

String 

long 

long 

Описание 

содержание 
комментария 
содержание 
системного 
комментария 

время создания 
комментария 
время 
обновления 
комментария 

 

  
4.1.9 Класс User сервера нотификаций 
 
одновременно являются столбцами соответствующей таблицы базы данных. 

Ниже  приведена  таблица  (табл.8)  полей  класса  User  сервера  нотификаций,  которые 

 
Таблица 8 

 

Поля класса User сервера нотификаций 

 

Поле 

user_id 

name 

token 

Тип данных 

db.StringProperty() 

db.StringProperty() 

db.StringProperty() 

time 

db.DateTimeProperty() 

 

 

 

 

Описание 

уникальный 
идентификатор 
пользователя 

имя 
пользователя 
токен  сервера 
Assembla 
ассоциируемы
й 
с  данным 
пользователем 

время 
последнего 
обновления 

31 

 
4.2 Реализация клиента 
4.2.1 Аутентификация пользователя 
 
Аутентификация пользователя в системе Assembla  происходит по протоколу OAuth 
2.0.  OAuth  2.0  -  открытый  протокол  авторизации,  позволяющий  предоставить  третьей 
стороне  доступ  к  закрытым  ресурсам  пользователя  без  необходимости  передачи  логина  и 
пароля  [17].  При  успешной  аутентификации  пользователя  сервер  Assembla  передает  на 
клиент два токена. Первый - токен доступа, с помощью которого подписываются все HTTP 
запросы  к  серверу  Assembla  и,  таким  образом,  проводится  идентификация  пользователя  в 
системе. Период жизни этого токена составляет 15 минут после последнего запроса, затем 
данный  токен  становится  недействительным.  Второй  токен  -  токен  обновления  позволяет 
получить  токен  доступа  для  аутентифицированного  пользователя.  Таким  образом,  в 
клиентском  приложении  реализован  механизм,  который  в  случае  невалидности  токена 
доступа обновляет его с помощью токена обновления и повторяет запрос, который не был 
выполнен из-за возникшей ошибки. Форма аутентификации изображена на (Рис.8). 

 

 

32 

 

Рис.8 Форма аутентификации 

 
4.2.2 Синхронизация данных 
 
Для возможности работы с приложением в режиме отсутствия интернет-соединения 
был реализован механизм синхронизации, встроенный в платформу Android. При успешной 
аутентификации  пользователя  выполняется  начальная  синхронизация  с  сервером  Assembla 
(Рис.9).  Скачиваются  данные  о  пространствах,  пользователях,  вехах  и  задачах,  которые 
затем  сохраняются  в  базе  данных.  Затем,  в  настройках  мобильного  устройства  появляется 
меню  управления  учетной  записью  Assembla 
(Рис.10).  По  умолчанию  включена 
 

 
автоматическая  синхронизация,  которая  запускается  системой  при  удобных  для  нее 
обстоятельствах  примерно  раз  в  сутки.  Также,  автоматическую  синхронизацию  можно 
отключить или запускать ее по желанию пользователя. 

33 

Рис.9 Начальная синхронизация данных 

 

 

 

34 

 

Рис.10 Меню настройки синхронизации данных 

 

4.2.3 Лента событий 
 
Лента событий показывает обновления в проектах пользователя, такие как: появление 
новых  задач,  изменение  задач,  появление  комментариев  к  задачам  и  т.д.  (Рис.11).  При 
нажатии  на  элемент  ленты,  который  относится  к  какой-либо  задаче,  пользователь  может 
перейти на ее подробное описание.  
 

 

 

 

35 

Рис.11 Лента событий 

 

4.2.4 Список пространств 
 
Список пространств отображает проекты, в которых участвует текущий пользователь 
(Рис.12).  При  отсутствии  интернет-соединения  отображаются  локальные  данные  вместо 
данных, полученных с сервера Assembla. При нажатии на элемент списка появляется экран 
со списком задач выбранного пространства. 

 

 

36 

 

Рис.12 Список пространств 

 
4.2.5 Список задач 
 
Список  задач  отображает  задачи  для  выбранного  пространства  (Рис.13).  Задачи 
можно  отфильтровать  по  следующим  критериям:  все  задачи;  активные  задачи, 
отсортированные по вехам; активные задачи, отсортированные по пользователям; закрытые 
задачи,  отсортированные  по  вехам;  все  задачи  текущего  пользователя;  активные  задачи 
текущего  пользователя;  закрытые  задачи  текущего  пользователя;  активные  задачи  для 
выбранной  вехи    (Рис.14).  В  случае  отсутствия  интернет-соединения  используются 
локальные данные. Все фильтры также работают и в случае работы с локальными данными. 
 

 
По  нажатию  на  элемент  списка  можно  перейти  на  экран  подробной  информации  о 
выбранной задаче. 

37 

Рис.13 Список задач 

 

 

 

 

38 

Рис.14 Фильтры списка задач 

 

4.2.6 Экран отдельной задачи 
 
На  экране  отдельной  задачи  показывается  дополнительная  информация  о  текущей 
задаче,  такая  как:  дата  создания,  приоритет,  оценка,  описание  и  пользователь,  создавший 
задачу (Рис.15). С данного экрана можно перейти на список комментариев к текущей задаче. 
 

 

 

 

39 

Рис.15 Отдельная задача 

 
 

4.2.7 Список комментариев 
 
Список комментариев отображает как созданные пользователями комментарии, так и 
автоматически  сгенерированные  системные  комментарии  об  изменениях  задачи  (Рис.16). 
Также,  при наличии интернет-соединения,  пользователь имеет возможность создать новый 
комментарий к текущей задаче. 
 
 

 

 

40 

Рис.16 Список комментариев 

 

При  наличии  интернет-соединения  пользователь  может  создавать  новые  задачи 

4.2.8 Создание и редактирование задач 
 
(Рис.17) или редактировать текущие в выбранном проекте (Рис.18). 
 

 

 

41 

Рис.17 Создание новой задачи 

 

 

 

 

 

42 

Рис.18 Редактирование существующей задачи 

4.3 Реализация сервера нотификаций 

Сервер нотификаций работает по следующему алгоритму: 
1.  При  аутентификации  пользователя  клиент  посылает  информацию  о  нем  на 

сервер. 

2.  При каждом открытии и обновлении ленты событий на клиенте, клиент посылает 

на сервер информацию о времени последнего открытия. 

3.  Сервер  запрашивает  ленту  событий  с  сервера  Assembla  каждые  10  минут, 
используя  в  качестве  фильтра  время  последнего  обновления,  полученное  с 
клиента. 

 

 

43 

4.  При  каждом  запросе  ленты  событий  сервер  обновляет  время  последнего 

обновления ленты во избежание дублирования нотификаций. 

5.  В случае наличия новых данных в ленте событий, сервер отправляет уведомление 

на клиент (Рис.19). 

6.  По нажатию на уведомление пользователь переходит на экран ленты событий и 

продолжает свою работу с приложением. 

Рис.19 Уведомления 

 

 

 

 

 
5 Заключение 

44 

 
В рамках данной было разработано клиентское приложение для системы управления 
проектами  Assembla  и  серверный  компонент,  реализующий  возможность  отправки  на 
уведомлений  об  изменениях  в  проектах  пользователя  на  клиентское  приложение. 
Разработанное приложение реализует следующий функционал:  

1.  Аутентификация пользователя; 
2.  Отображение ленты событий; 
3.  Отображение списка пространств; 
4.  Отображение списка задач; 
5.  Отображение полной информации об отдельной задаче; 
6.  Фильтрация  задач  по  следующим  параметрам:  все  задачи;  активные  задачи, 
отсортированные по вехам; активные задачи, отсортированные по пользователям; 
закрытые задачи, отсортированные по вехам; все задачи текущего пользователя; 
активные задачи текущего пользователя; закрытые задачи текущего пользователя; 
активные задачи, принадлежащие конкретной вехе; 

7.  Создание и редактирование задачи; 
8.  Отображения списка комментариев к задаче; 
9.  Добавление комментария к задаче; 
10. Отображение списка вех; 
11. Отображение уведомлений о новых событиях при активном интернет-соединении 

и наличии новых событий; 

12. Сохранение задач,  вех,  пользователей  и проектов в локальную базу данных для 

работоспособности приложения в условиях отсутствия интернет соединения; 

13. Синхронизация локальных данных с Assembla. 
 
Разработанное  приложение  полностью  соответствует  заявленным  требованиям,  а 
также  уже  прошло  апробацию  в  компании  Эмпатика,  которая  использует  Assembla  в 
качестве системы управления проектами для поддержки процесса разработки программного 
обеспечения. В ходе эксплуатации был внесен ряд изменений в приложении в соответствии 
с пожеланиями пользователей и обнаруженными ошибками. 
 
скачивания и использования широкому кругу пользователей. 
Если рассматривать дальнейшее направление разработки, то следует идти в сторону 
 
расширения  функционала  мобильного  клиента  по  сравнению  с  веб-версией  Assembla.  На 
данный момент клиентское приложение реализует только часть функционала веб-версии из-
 

На  текущий  момент  приложение  опубликовано  в  Google  Play  [13]  и  доступно  для 

 
за особенностей эксплуатации мобильных устройств. Следующие нововведения могут быть 
реализованы в будущем: 

45 

1.  Поддержка других мобильных платформ (iOS, Windows Phone); 
2.  Функция создания и редактирования вех; 
3.  Функция создания и просмотра отчетов о работе.  

 

 

 
6 Список использованной литературы 
1.  About Python. [Электронный ресурс] URL: https://www.python.org/about/ (дата обращения: 

46 

10.05.14) 

2.  Agile  Momentum.  [Электронный  ресурс]  URL:  http://stateofagile.versionone.com/agile-

momentum/ (дата обращения: 10.05.14) 

3.  A Guide to the Project Management Body of Knowledge. (Project Management Institute, 2013) 
4.  Android 
URL: 

[Электронный 

ресурс] 

Design. 

https://developer.android.com/design/index.html 

5.  Android  SDK.  [Электронный  ресурс]  URL:  http://developer.android.com/sdk/index.html 

(дата обращения: 10.05.14) 
Studio. 

6.  Android 

[Электронный 

ресурс] 

URL: 

http://developer.android.com/sdk/installing/studio.html (дата обращения: 10.05.14) 

7.  Application  Fundamentals.  http://developer.android.com/guide/components/fundamentals.html 

(дата обращения: 10.05.14) 

8.  Assembla  API  Documentation  Site. 

[Электронный 

ресурс]  URL: 

http://api-

doc.assembla.com/index.html (дата обращения: 10.05.14) 

9.  Beck K., Beedle M., van Bennekum A., Cockburn A., Cunningham W., Fowler M., Grenning 
J., Highsmith J., Hunt A., Jeffries R., Kern J., Marick B., Robin C. Martin, Mellor S., Schwaber 
K.,  Sutherland  J.,Thomas  D.  Manifesto  for  Agile  Software  Development.  [Электронный 
ресурс] URL: http:// agilemanifesto.org/ (дата обращения: 10.05.14) 

10. Blodget  H.  The  Number  Of  Smartphones  In  Use  Is  About  To  Pass  The  Number  Of  PCs. 
[Электронный ресурс] URL: http://www.businessinsider.com/number-of-smartphones-tablets-
pcs-2013-12 (дата обращения: 10.05.14) 

11. Flyvbjerg B. Why Your IT Project May Be Riskier Than You Think. [Электронный ресурс] 
(дата 

http://hbr.org/2011/09/why-your-it-project-may-be-riskier-than-you-think/ 

URL: 
обращения: 10.05.14) 

12. Google 

App 

Engine 

ресурс] 
https://developers.google.com/appengine/docs/quotas (дата обращения: 10.05.14) 
ресурс] 

[Электронный 

[Электронный 

Assembla 

Android. 

Quotas. 

Play 

13. Google 

https://play.google.com/store/apps/details?id=com.empatika.assembla.assembla 
обращения: 10.05.14) 

URL: 

URL: 
(дата 

14. Google 

URL: 
https://play.google.com/store/apps/details?id=com.assembla.touch (дата обращения: 10.05.14) 

[Электронный 

Assembla 

ресурс] 

Touch 

Play 

 

 
15. Gray 

47 

ресурс] 
http://ormlite.com/sqlite_java_android_orm.shtml (дата обращения: 10.05.14) 

[Электронный 

OrmLite. 

W. 

URL:  

16. Google  Gson.  [Электронный  ресурс]  URL:  https://code.google.com/p/google-gson/  (дата 

обращения: 10.05.14) 

17. Hammer-Lahav  E.  OAuth  Introduction.  [Электронный  ресурс]  URL:  http://oauth.net/about/ 

(дата обращения: 10.05.14) 

18. Kirkpatrick  F.  Volley.  Easy,  fast  networking  for  Android.  [Электронный  ресурс]  URL: 

http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-
%20Easy,%20Fast%20Networking%20for%20Android.pdf (дата обращения: 10.05.14) 

19. Layouts. [Электронный ресурс] URL: http://developer.android.com/guide/topics/ui/declaring-

layout.html (дата обращения: 10.05.14) 

20. Learn  About  Java  Technology.  [Электронный ресурс]  URL:  http://www.java.com/en/about/ 

(дата обращения: 10.05.14) 

21. McConnell S. Code Complete (Redmond: Microsoft Press, 2004) 
22. Practices  &  Tools.  [Электронный  ресурс]  URL:  http://stateofagile.versionone.com/agile-

practices-tools/ (дата обращения: 10.05.14) 

23. PyCharm.  [Электронный  ресурс]  URL:  http://www.jetbrains.com/pycharm/features/  (дата 

обращения: 10.05.14) 

24. Schwaber K. Agile Project Management with Scrum (Redmond: Microsoft Press, 2004) 
25. Walsh  N.  A  Technical 

[Электронный  ресурс]  URL: 

Introduction 

to  XML. 

www.xml.com/pub/a/98/10/guide0.html (дата обращения: 10.05.14) 

ресурс] 

URL: 
обращения: 

(дата 

26. What 

Is 

Google 

[Электронный 
https://developers.google.com/appengine/docs/whatisgoogleappengine 
10.05.14) 

Engine?. 

App 

 

 

 

 

